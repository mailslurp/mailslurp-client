/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CreateInboxForwarderOptions, InboxForwarderDto, InboxForwarderTestOptions, InboxForwarderTestResult, PageInboxForwarderDto, TestNewInboxForwarderOptions } from '../models';
export interface CreateNewInboxForwarderRequest {
    inboxId: string;
    createInboxForwarderOptions: CreateInboxForwarderOptions;
}
export interface DeleteInboxForwarderRequest {
    id: string;
}
export interface DeleteInboxForwardersRequest {
    inboxId?: string;
}
export interface GetInboxForwarderRequest {
    id: string;
}
export interface GetInboxForwardersRequest {
    inboxId?: string;
    page?: number;
    size?: number;
    sort?: GetInboxForwardersSortEnum;
    searchFilter?: string;
    since?: Date;
    before?: Date;
}
export interface TestInboxForwarderRequest {
    id: string;
    inboxForwarderTestOptions: InboxForwarderTestOptions;
}
export interface TestInboxForwardersForInboxRequest {
    inboxId: string;
    inboxForwarderTestOptions: InboxForwarderTestOptions;
}
export interface TestNewInboxForwarderRequest {
    testNewInboxForwarderOptions: TestNewInboxForwarderOptions;
}
/**
 *
 */
export declare class InboxForwarderControllerApi extends runtime.BaseAPI {
    /**
     * Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     * Create an inbox forwarder
     */
    createNewInboxForwarderRaw(requestParameters: CreateNewInboxForwarderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InboxForwarderDto>>;
    /**
     * Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     * Create an inbox forwarder
     */
    createNewInboxForwarder(requestParameters: CreateNewInboxForwarderRequest, initOverrides?: RequestInit): Promise<InboxForwarderDto>;
    /**
     * Delete inbox forwarder
     * Delete an inbox forwarder
     */
    deleteInboxForwarderRaw(requestParameters: DeleteInboxForwarderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete inbox forwarder
     * Delete an inbox forwarder
     */
    deleteInboxForwarder(requestParameters: DeleteInboxForwarderRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Delete inbox forwarders. Accepts optional inboxId filter.
     * Delete inbox forwarders
     */
    deleteInboxForwardersRaw(requestParameters: DeleteInboxForwardersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete inbox forwarders. Accepts optional inboxId filter.
     * Delete inbox forwarders
     */
    deleteInboxForwarders(requestParameters: DeleteInboxForwardersRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Get inbox ruleset
     * Get an inbox forwarder
     */
    getInboxForwarderRaw(requestParameters: GetInboxForwarderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InboxForwarderDto>>;
    /**
     * Get inbox ruleset
     * Get an inbox forwarder
     */
    getInboxForwarder(requestParameters: GetInboxForwarderRequest, initOverrides?: RequestInit): Promise<InboxForwarderDto>;
    /**
     * List all forwarders attached to an inbox
     * List inbox forwarders
     */
    getInboxForwardersRaw(requestParameters: GetInboxForwardersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PageInboxForwarderDto>>;
    /**
     * List all forwarders attached to an inbox
     * List inbox forwarders
     */
    getInboxForwarders(requestParameters: GetInboxForwardersRequest, initOverrides?: RequestInit): Promise<PageInboxForwarderDto>;
    /**
     * Test an inbox forwarder
     * Test an inbox forwarder
     */
    testInboxForwarderRaw(requestParameters: TestInboxForwarderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InboxForwarderTestResult>>;
    /**
     * Test an inbox forwarder
     * Test an inbox forwarder
     */
    testInboxForwarder(requestParameters: TestInboxForwarderRequest, initOverrides?: RequestInit): Promise<InboxForwarderTestResult>;
    /**
     * Test inbox forwarders for inbox
     * Test inbox forwarders for inbox
     */
    testInboxForwardersForInboxRaw(requestParameters: TestInboxForwardersForInboxRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InboxForwarderTestResult>>;
    /**
     * Test inbox forwarders for inbox
     * Test inbox forwarders for inbox
     */
    testInboxForwardersForInbox(requestParameters: TestInboxForwardersForInboxRequest, initOverrides?: RequestInit): Promise<InboxForwarderTestResult>;
    /**
     * Test new inbox forwarder
     * Test new inbox forwarder
     */
    testNewInboxForwarderRaw(requestParameters: TestNewInboxForwarderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InboxForwarderTestResult>>;
    /**
     * Test new inbox forwarder
     * Test new inbox forwarder
     */
    testNewInboxForwarder(requestParameters: TestNewInboxForwarderRequest, initOverrides?: RequestInit): Promise<InboxForwarderTestResult>;
}
/**
 * @export
 * @enum {string}
 */
export declare enum GetInboxForwardersSortEnum {
    ASC = "ASC",
    DESC = "DESC"
}
