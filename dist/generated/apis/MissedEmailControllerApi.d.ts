/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { MissedEmailDto, PageMissedEmailProjection, PageUnknownMissedEmailProjection } from '../models';
export interface GetAllMissedEmailsRequest {
    page?: number;
    size?: number;
    sort?: GetAllMissedEmailsSortEnum;
    searchFilter?: string;
    since?: Date;
    before?: Date;
    inboxId?: string;
}
export interface GetAllUnknownMissedEmailsRequest {
    page?: number;
    size?: number;
    sort?: GetAllUnknownMissedEmailsSortEnum;
    searchFilter?: string;
    since?: Date;
    before?: Date;
    inboxId?: string;
}
export interface GetMissedEmailRequest {
    missedEmailId: string;
}
export interface WaitForNthMissedEmailRequest {
    index: number;
    inboxId?: string;
    timeout?: number;
    since?: Date;
    before?: Date;
}
/**
 *
 */
export declare class MissedEmailControllerApi extends runtime.BaseAPI {
    /**
     * Get all MissedEmails in paginated format
     */
    getAllMissedEmailsRaw(requestParameters: GetAllMissedEmailsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PageMissedEmailProjection>>;
    /**
     * Get all MissedEmails in paginated format
     */
    getAllMissedEmails(requestParameters: GetAllMissedEmailsRequest, initOverrides?: RequestInit): Promise<PageMissedEmailProjection>;
    /**
     * Unknown missed emails are emails that were sent to MailSlurp but could not be assigned to an existing inbox.
     * Get all unknown missed emails in paginated format
     */
    getAllUnknownMissedEmailsRaw(requestParameters: GetAllUnknownMissedEmailsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PageUnknownMissedEmailProjection>>;
    /**
     * Unknown missed emails are emails that were sent to MailSlurp but could not be assigned to an existing inbox.
     * Get all unknown missed emails in paginated format
     */
    getAllUnknownMissedEmails(requestParameters: GetAllUnknownMissedEmailsRequest, initOverrides?: RequestInit): Promise<PageUnknownMissedEmailProjection>;
    /**
     * List emails that were missed due to plan limits.
     * Get MissedEmail
     */
    getMissedEmailRaw(requestParameters: GetMissedEmailRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MissedEmailDto>>;
    /**
     * List emails that were missed due to plan limits.
     * Get MissedEmail
     */
    getMissedEmail(requestParameters: GetMissedEmailRequest, initOverrides?: RequestInit): Promise<MissedEmailDto>;
    /**
     * If emails were missed due to a plan limit they are saved as missed emails. If support team enables the canRestore flag these emails can be reload into your account using this method.
     * Restore missed emails
     */
    restoreMissedEmailsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * If emails were missed due to a plan limit they are saved as missed emails. If support team enables the canRestore flag these emails can be reload into your account using this method.
     * Restore missed emails
     */
    restoreMissedEmails(initOverrides?: RequestInit): Promise<void>;
    /**
     * Wait for 0 based index missed email
     * Wait for Nth missed email
     */
    waitForNthMissedEmailRaw(requestParameters: WaitForNthMissedEmailRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MissedEmailDto>>;
    /**
     * Wait for 0 based index missed email
     * Wait for Nth missed email
     */
    waitForNthMissedEmail(requestParameters: WaitForNthMissedEmailRequest, initOverrides?: RequestInit): Promise<MissedEmailDto>;
}
/**
 * @export
 * @enum {string}
 */
export declare enum GetAllMissedEmailsSortEnum {
    ASC = "ASC",
    DESC = "DESC"
}
/**
 * @export
 * @enum {string}
 */
export declare enum GetAllUnknownMissedEmailsSortEnum {
    ASC = "ASC",
    DESC = "DESC"
}
