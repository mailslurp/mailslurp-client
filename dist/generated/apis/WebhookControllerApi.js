"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetWebhooksSortEnum = exports.GetWebhookResultsEventNameEnum = exports.GetWebhookResultsResultTypeEnum = exports.GetWebhookResultsSortEnum = exports.GetTestWebhookPayloadEventNameEnum = exports.GetPhoneNumberWebhooksPaginatedHealthEnum = exports.GetPhoneNumberWebhooksPaginatedEventTypeEnum = exports.GetPhoneNumberWebhooksPaginatedSortEnum = exports.GetJsonSchemaForWebhookEventEventEnum = exports.GetInboxWebhooksPaginatedEventTypeEnum = exports.GetInboxWebhooksPaginatedHealthEnum = exports.GetInboxWebhooksPaginatedSortEnum = exports.GetAllWebhooksEventTypeEnum = exports.GetAllWebhooksHealthEnum = exports.GetAllWebhooksSortEnum = exports.GetAllWebhookResultsEventNameEnum = exports.GetAllWebhookResultsResultTypeEnum = exports.GetAllWebhookResultsSortEnum = exports.GetAllWebhookEndpointsEventTypeEnum = exports.GetAllWebhookEndpointsHealthEnum = exports.GetAllWebhookEndpointsSortEnum = exports.GetAllAccountWebhooksHealthEnum = exports.GetAllAccountWebhooksEventTypeEnum = exports.GetAllAccountWebhooksSortEnum = exports.WebhookControllerApi = void 0;
var runtime = __importStar(require("../runtime"));
var index_1 = require("../models/index");
/**
 *
 */
var WebhookControllerApi = /** @class */ (function (_super) {
    __extends(WebhookControllerApi, _super);
    function WebhookControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get notified of account level events such as bounce and bounce recipient.
     * Attach a WebHook URL to an inbox
     */
    WebhookControllerApi.prototype.createAccountWebhookRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['createWebhookOptions'] == null) {
                            throw new runtime.RequiredError('createWebhookOptions', 'Required parameter "createWebhookOptions" was null or undefined when calling createAccountWebhook().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.CreateWebhookOptionsToJSON)(requestParameters['createWebhookOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get notified of account level events such as bounce and bounce recipient.
     * Attach a WebHook URL to an inbox
     */
    WebhookControllerApi.prototype.createAccountWebhook = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createAccountWebhookRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
     * Attach a WebHook URL to an inbox
     */
    WebhookControllerApi.prototype.createWebhookRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling createWebhook().');
                        }
                        if (requestParameters['createWebhookOptions'] == null) {
                            throw new runtime.RequiredError('createWebhookOptions', 'Required parameter "createWebhookOptions" was null or undefined when calling createWebhook().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/webhooks".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.CreateWebhookOptionsToJSON)(requestParameters['createWebhookOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
     * Attach a WebHook URL to an inbox
     */
    WebhookControllerApi.prototype.createWebhook = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createWebhookRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get notified whenever a phone number receives an SMS via a WebHook URL.
     * Attach a WebHook URL to a phone number
     */
    WebhookControllerApi.prototype.createWebhookForPhoneNumberRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['phoneNumberId'] == null) {
                            throw new runtime.RequiredError('phoneNumberId', 'Required parameter "phoneNumberId" was null or undefined when calling createWebhookForPhoneNumber().');
                        }
                        if (requestParameters['createWebhookOptions'] == null) {
                            throw new runtime.RequiredError('createWebhookOptions', 'Required parameter "createWebhookOptions" was null or undefined when calling createWebhookForPhoneNumber().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/phone/numbers/{phoneNumberId}/webhooks".replace("{".concat("phoneNumberId", "}"), encodeURIComponent(String(requestParameters['phoneNumberId']))),
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.CreateWebhookOptionsToJSON)(requestParameters['createWebhookOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get notified whenever a phone number receives an SMS via a WebHook URL.
     * Attach a WebHook URL to a phone number
     */
    WebhookControllerApi.prototype.createWebhookForPhoneNumber = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createWebhookForPhoneNumberRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete all webhooks
     */
    WebhookControllerApi.prototype.deleteAllWebhooksRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks",
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Delete all webhooks
     */
    WebhookControllerApi.prototype.deleteAllWebhooks = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteAllWebhooksRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Delete and disable a Webhook for an Inbox
     */
    WebhookControllerApi.prototype.deleteWebhookRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling deleteWebhook().');
                        }
                        if (requestParameters['webhookId'] == null) {
                            throw new runtime.RequiredError('webhookId', 'Required parameter "webhookId" was null or undefined when calling deleteWebhook().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/webhooks/{webhookId}".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))).replace("{".concat("webhookId", "}"), encodeURIComponent(String(requestParameters['webhookId']))),
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Delete and disable a Webhook for an Inbox
     */
    WebhookControllerApi.prototype.deleteWebhook = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteWebhookRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Delete a webhook
     */
    WebhookControllerApi.prototype.deleteWebhookByIdRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['webhookId'] == null) {
                            throw new runtime.RequiredError('webhookId', 'Required parameter "webhookId" was null or undefined when calling deleteWebhookById().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/{webhookId}".replace("{".concat("webhookId", "}"), encodeURIComponent(String(requestParameters['webhookId']))),
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Delete a webhook
     */
    WebhookControllerApi.prototype.deleteWebhookById = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteWebhookByIdRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * List account webhooks in paginated form. Allows for page index, page size, and sort direction.
     * List account webhooks Paginated
     */
    WebhookControllerApi.prototype.getAllAccountWebhooksRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        if (requestParameters['eventType'] != null) {
                            queryParameters['eventType'] = requestParameters['eventType'];
                        }
                        if (requestParameters['health'] != null) {
                            queryParameters['health'] = requestParameters['health'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/account/paginated",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageWebhookProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * List account webhooks in paginated form. Allows for page index, page size, and sort direction.
     * List account webhooks Paginated
     */
    WebhookControllerApi.prototype.getAllAccountWebhooks = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllAccountWebhooksRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List webhooks URL in paginated form. Allows for page index, page size, and sort direction.
     * List Webhooks endpoints Paginated
     */
    WebhookControllerApi.prototype.getAllWebhookEndpointsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        if (requestParameters['phoneId'] != null) {
                            queryParameters['phoneId'] = requestParameters['phoneId'];
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        if (requestParameters['health'] != null) {
                            queryParameters['health'] = requestParameters['health'];
                        }
                        if (requestParameters['eventType'] != null) {
                            queryParameters['eventType'] = requestParameters['eventType'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/endpoints",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageWebhookEndpointProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * List webhooks URL in paginated form. Allows for page index, page size, and sort direction.
     * List Webhooks endpoints Paginated
     */
    WebhookControllerApi.prototype.getAllWebhookEndpoints = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllWebhookEndpointsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get results for all webhooks
     */
    WebhookControllerApi.prototype.getAllWebhookResultsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        if (requestParameters['unseenOnly'] != null) {
                            queryParameters['unseenOnly'] = requestParameters['unseenOnly'];
                        }
                        if (requestParameters['resultType'] != null) {
                            queryParameters['resultType'] = requestParameters['resultType'];
                        }
                        if (requestParameters['eventName'] != null) {
                            queryParameters['eventName'] = requestParameters['eventName'];
                        }
                        if (requestParameters['minStatusCode'] != null) {
                            queryParameters['minStatusCode'] = requestParameters['minStatusCode'];
                        }
                        if (requestParameters['maxStatusCode'] != null) {
                            queryParameters['maxStatusCode'] = requestParameters['maxStatusCode'];
                        }
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        if (requestParameters['smsId'] != null) {
                            queryParameters['smsId'] = requestParameters['smsId'];
                        }
                        if (requestParameters['attachmentId'] != null) {
                            queryParameters['attachmentId'] = requestParameters['attachmentId'];
                        }
                        if (requestParameters['emailId'] != null) {
                            queryParameters['emailId'] = requestParameters['emailId'];
                        }
                        if (requestParameters['phoneId'] != null) {
                            queryParameters['phoneId'] = requestParameters['phoneId'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/results",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageWebhookResultFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get results for all webhooks
     */
    WebhookControllerApi.prototype.getAllWebhookResults = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllWebhookResultsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List webhooks in paginated form. Allows for page index, page size, and sort direction.
     * List Webhooks Paginated
     */
    WebhookControllerApi.prototype.getAllWebhooksRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        if (requestParameters['phoneId'] != null) {
                            queryParameters['phoneId'] = requestParameters['phoneId'];
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        if (requestParameters['health'] != null) {
                            queryParameters['health'] = requestParameters['health'];
                        }
                        if (requestParameters['eventType'] != null) {
                            queryParameters['eventType'] = requestParameters['eventType'];
                        }
                        if (requestParameters['url'] != null) {
                            queryParameters['url'] = requestParameters['url'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/paginated",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageWebhookProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * List webhooks in paginated form. Allows for page index, page size, and sort direction.
     * List Webhooks Paginated
     */
    WebhookControllerApi.prototype.getAllWebhooks = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllWebhooksRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get paginated webhooks for an Inbox
     */
    WebhookControllerApi.prototype.getInboxWebhooksPaginatedRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling getInboxWebhooksPaginated().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        if (requestParameters['health'] != null) {
                            queryParameters['health'] = requestParameters['health'];
                        }
                        if (requestParameters['eventType'] != null) {
                            queryParameters['eventType'] = requestParameters['eventType'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/webhooks/paginated".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageWebhookProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get paginated webhooks for an Inbox
     */
    WebhookControllerApi.prototype.getInboxWebhooksPaginated = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxWebhooksPaginatedRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get JSON Schema definition for webhook payload by event
     */
    WebhookControllerApi.prototype.getJsonSchemaForWebhookEventRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['event'] == null) {
                            throw new runtime.RequiredError('event', 'Required parameter "event" was null or undefined when calling getJsonSchemaForWebhookEvent().');
                        }
                        queryParameters = {};
                        if (requestParameters['event'] != null) {
                            queryParameters['event'] = requestParameters['event'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/schema",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.JSONSchemaDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get JSON Schema definition for webhook payload by event
     */
    WebhookControllerApi.prototype.getJsonSchemaForWebhookEvent = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getJsonSchemaForWebhookEventRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get JSON Schema definition for webhook payload
     */
    WebhookControllerApi.prototype.getJsonSchemaForWebhookPayloadRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['webhookId'] == null) {
                            throw new runtime.RequiredError('webhookId', 'Required parameter "webhookId" was null or undefined when calling getJsonSchemaForWebhookPayload().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/{webhookId}/schema".replace("{".concat("webhookId", "}"), encodeURIComponent(String(requestParameters['webhookId']))),
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.JSONSchemaDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get JSON Schema definition for webhook payload
     */
    WebhookControllerApi.prototype.getJsonSchemaForWebhookPayload = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getJsonSchemaForWebhookPayloadRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get paginated webhooks for a phone number
     */
    WebhookControllerApi.prototype.getPhoneNumberWebhooksPaginatedRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['phoneId'] == null) {
                            throw new runtime.RequiredError('phoneId', 'Required parameter "phoneId" was null or undefined when calling getPhoneNumberWebhooksPaginated().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        if (requestParameters['eventType'] != null) {
                            queryParameters['eventType'] = requestParameters['eventType'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        if (requestParameters['health'] != null) {
                            queryParameters['health'] = requestParameters['health'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/phone/numbers/{phoneId}/webhooks/paginated".replace("{".concat("phoneId", "}"), encodeURIComponent(String(requestParameters['phoneId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageWebhookProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get paginated webhooks for a phone number
     */
    WebhookControllerApi.prototype.getPhoneNumberWebhooksPaginated = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPhoneNumberWebhooksPaginatedRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get test webhook payload example. Response content depends on eventName passed. Uses `EMAIL_RECEIVED` as default.
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['eventName'] != null) {
                            queryParameters['eventName'] = requestParameters['eventName'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/test",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.AbstractWebhookPayloadFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get test webhook payload example. Response content depends on eventName passed. Uses `EMAIL_RECEIVED` as default.
     */
    WebhookControllerApi.prototype.getTestWebhookPayload = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTestWebhookPayloadRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get webhook test payload for bounce
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadBounceRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/test/email-bounce-payload",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookBouncePayloadFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get webhook test payload for bounce
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadBounce = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTestWebhookPayloadBounceRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get webhook test payload for bounce recipient
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadBounceRecipientRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/test/email-bounce-recipient-payload",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookBounceRecipientPayloadFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get webhook test payload for bounce recipient
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadBounceRecipient = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTestWebhookPayloadBounceRecipientRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get webhook test payload for delivery status event
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadDeliveryStatusRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/test/delivery-status-payload",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookDeliveryStatusPayloadFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get webhook test payload for delivery status event
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadDeliveryStatus = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTestWebhookPayloadDeliveryStatusRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get webhook test payload for email opened event
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadEmailOpenedRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/test/email-opened-payload",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookEmailOpenedPayloadFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get webhook test payload for email opened event
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadEmailOpened = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTestWebhookPayloadEmailOpenedRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get webhook test payload for email opened event
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadEmailReadRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/test/email-read-payload",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookEmailReadPayloadFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get webhook test payload for email opened event
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadEmailRead = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTestWebhookPayloadEmailReadRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get example payload for webhook
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadForWebhookRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['webhookId'] == null) {
                            throw new runtime.RequiredError('webhookId', 'Required parameter "webhookId" was null or undefined when calling getTestWebhookPayloadForWebhook().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/{webhookId}/example".replace("{".concat("webhookId", "}"), encodeURIComponent(String(requestParameters['webhookId']))),
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.AbstractWebhookPayloadFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get example payload for webhook
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadForWebhook = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTestWebhookPayloadForWebhookRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get webhook test payload for new attachment event
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadNewAttachmentRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/test/new-attachment-payload",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookNewAttachmentPayloadFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get webhook test payload for new attachment event
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadNewAttachment = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTestWebhookPayloadNewAttachmentRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get webhook test payload for new contact event
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadNewContactRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/test/new-contact-payload",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookNewContactPayloadFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get webhook test payload for new contact event
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadNewContact = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTestWebhookPayloadNewContactRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get webhook test payload for new email event
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadNewEmailRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/test/new-email-payload",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookNewEmailPayloadFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get webhook test payload for new email event
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadNewEmail = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTestWebhookPayloadNewEmailRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get webhook test payload for new sms event
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadNewSmsRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/test/new-sms-payload",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookNewSmsPayloadFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get webhook test payload for new sms event
     */
    WebhookControllerApi.prototype.getTestWebhookPayloadNewSms = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTestWebhookPayloadNewSmsRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get a webhook
     */
    WebhookControllerApi.prototype.getWebhookRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['webhookId'] == null) {
                            throw new runtime.RequiredError('webhookId', 'Required parameter "webhookId" was null or undefined when calling getWebhook().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/{webhookId}".replace("{".concat("webhookId", "}"), encodeURIComponent(String(requestParameters['webhookId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get a webhook
     */
    WebhookControllerApi.prototype.getWebhook = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWebhookRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get a webhook result for a webhook
     */
    WebhookControllerApi.prototype.getWebhookResultRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['webhookResultId'] == null) {
                            throw new runtime.RequiredError('webhookResultId', 'Required parameter "webhookResultId" was null or undefined when calling getWebhookResult().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/results/{webhookResultId}".replace("{".concat("webhookResultId", "}"), encodeURIComponent(String(requestParameters['webhookResultId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookResultDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get a webhook result for a webhook
     */
    WebhookControllerApi.prototype.getWebhookResult = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWebhookResultRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get a webhook results for a webhook
     */
    WebhookControllerApi.prototype.getWebhookResultsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['webhookId'] == null) {
                            throw new runtime.RequiredError('webhookId', 'Required parameter "webhookId" was null or undefined when calling getWebhookResults().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        if (requestParameters['unseenOnly'] != null) {
                            queryParameters['unseenOnly'] = requestParameters['unseenOnly'];
                        }
                        if (requestParameters['resultType'] != null) {
                            queryParameters['resultType'] = requestParameters['resultType'];
                        }
                        if (requestParameters['eventName'] != null) {
                            queryParameters['eventName'] = requestParameters['eventName'];
                        }
                        if (requestParameters['minStatusCode'] != null) {
                            queryParameters['minStatusCode'] = requestParameters['minStatusCode'];
                        }
                        if (requestParameters['maxStatusCode'] != null) {
                            queryParameters['maxStatusCode'] = requestParameters['maxStatusCode'];
                        }
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        if (requestParameters['smsId'] != null) {
                            queryParameters['smsId'] = requestParameters['smsId'];
                        }
                        if (requestParameters['attachmentId'] != null) {
                            queryParameters['attachmentId'] = requestParameters['attachmentId'];
                        }
                        if (requestParameters['emailId'] != null) {
                            queryParameters['emailId'] = requestParameters['emailId'];
                        }
                        if (requestParameters['phoneId'] != null) {
                            queryParameters['phoneId'] = requestParameters['phoneId'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/{webhookId}/results".replace("{".concat("webhookId", "}"), encodeURIComponent(String(requestParameters['webhookId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageWebhookResultFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get a webhook results for a webhook
     */
    WebhookControllerApi.prototype.getWebhookResults = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWebhookResultsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get a webhook results count for a webhook
     */
    WebhookControllerApi.prototype.getWebhookResultsCountRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['webhookId'] == null) {
                            throw new runtime.RequiredError('webhookId', 'Required parameter "webhookId" was null or undefined when calling getWebhookResultsCount().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/{webhookId}/results/count".replace("{".concat("webhookId", "}"), encodeURIComponent(String(requestParameters['webhookId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.CountDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get a webhook results count for a webhook
     */
    WebhookControllerApi.prototype.getWebhookResultsCount = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWebhookResultsCountRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get count of unseen webhook results with error status
     */
    WebhookControllerApi.prototype.getWebhookResultsUnseenErrorCountRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/results/unseen-count",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.UnseenErrorCountDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get count of unseen webhook results with error status
     */
    WebhookControllerApi.prototype.getWebhookResultsUnseenErrorCount = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWebhookResultsUnseenErrorCountRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get all webhooks for an Inbox
     * @deprecated
     */
    WebhookControllerApi.prototype.getWebhooksRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling getWebhooks().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/webhooks".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(index_1.WebhookProjectionFromJSON); })];
                }
            });
        });
    };
    /**
     * Get all webhooks for an Inbox
     * @deprecated
     */
    WebhookControllerApi.prototype.getWebhooks = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWebhooksRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Allows you to resend webhook payloads for any recorded webhook result that failed to deliver the payload.
     * Redrive all webhook results that have failed status
     */
    WebhookControllerApi.prototype.redriveAllWebhookResultsRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/results/redrive",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookRedriveAllResultFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Allows you to resend webhook payloads for any recorded webhook result that failed to deliver the payload.
     * Redrive all webhook results that have failed status
     */
    WebhookControllerApi.prototype.redriveAllWebhookResults = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.redriveAllWebhookResultsRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
     * Get a webhook result and try to resend the original webhook payload
     */
    WebhookControllerApi.prototype.redriveWebhookResultRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['webhookResultId'] == null) {
                            throw new runtime.RequiredError('webhookResultId', 'Required parameter "webhookResultId" was null or undefined when calling redriveWebhookResult().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/results/{webhookResultId}/redrive".replace("{".concat("webhookResultId", "}"), encodeURIComponent(String(requestParameters['webhookResultId']))),
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookRedriveResultFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
     * Get a webhook result and try to resend the original webhook payload
     */
    WebhookControllerApi.prototype.redriveWebhookResult = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.redriveWebhookResultRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Send webhook test data
     */
    WebhookControllerApi.prototype.sendTestDataRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['webhookId'] == null) {
                            throw new runtime.RequiredError('webhookId', 'Required parameter "webhookId" was null or undefined when calling sendTestData().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/{webhookId}/test".replace("{".concat("webhookId", "}"), encodeURIComponent(String(requestParameters['webhookId']))),
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookTestResultFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Send webhook test data
     */
    WebhookControllerApi.prototype.sendTestData = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sendTestDataRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update a webhook
     */
    WebhookControllerApi.prototype.updateWebhookRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['webhookId'] == null) {
                            throw new runtime.RequiredError('webhookId', 'Required parameter "webhookId" was null or undefined when calling updateWebhook().');
                        }
                        if (requestParameters['createWebhookOptions'] == null) {
                            throw new runtime.RequiredError('createWebhookOptions', 'Required parameter "createWebhookOptions" was null or undefined when calling updateWebhook().');
                        }
                        queryParameters = {};
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        if (requestParameters['phoneNumberId'] != null) {
                            queryParameters['phoneNumberId'] = requestParameters['phoneNumberId'];
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/{webhookId}".replace("{".concat("webhookId", "}"), encodeURIComponent(String(requestParameters['webhookId']))),
                            method: 'PATCH',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.CreateWebhookOptionsToJSON)(requestParameters['createWebhookOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update a webhook
     */
    WebhookControllerApi.prototype.updateWebhook = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateWebhookRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update a webhook request headers
     */
    WebhookControllerApi.prototype.updateWebhookHeadersRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['webhookId'] == null) {
                            throw new runtime.RequiredError('webhookId', 'Required parameter "webhookId" was null or undefined when calling updateWebhookHeaders().');
                        }
                        if (requestParameters['webhookHeaders'] == null) {
                            throw new runtime.RequiredError('webhookHeaders', 'Required parameter "webhookHeaders" was null or undefined when calling updateWebhookHeaders().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/{webhookId}/headers".replace("{".concat("webhookId", "}"), encodeURIComponent(String(requestParameters['webhookId']))),
                            method: 'PUT',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.WebhookHeadersToJSON)(requestParameters['webhookHeaders']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.WebhookDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update a webhook request headers
     */
    WebhookControllerApi.prototype.updateWebhookHeaders = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateWebhookHeadersRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Verify a webhook payload using the messageId and signature. This allows you to be sure that MailSlurp sent the payload and not another server.
     * Verify a webhook payload signature
     */
    WebhookControllerApi.prototype.verifyWebhookSignatureRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['verifyWebhookSignatureOptions'] == null) {
                            throw new runtime.RequiredError('verifyWebhookSignatureOptions', 'Required parameter "verifyWebhookSignatureOptions" was null or undefined when calling verifyWebhookSignature().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/verify",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.VerifyWebhookSignatureOptionsToJSON)(requestParameters['verifyWebhookSignatureOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.VerifyWebhookSignatureResultsFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Verify a webhook payload using the messageId and signature. This allows you to be sure that MailSlurp sent the payload and not another server.
     * Verify a webhook payload signature
     */
    WebhookControllerApi.prototype.verifyWebhookSignature = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.verifyWebhookSignatureRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Wait for webhook results for a webhook
     */
    WebhookControllerApi.prototype.waitForWebhookResultsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['webhookId'] == null) {
                            throw new runtime.RequiredError('webhookId', 'Required parameter "webhookId" was null or undefined when calling waitForWebhookResults().');
                        }
                        if (requestParameters['expectedCount'] == null) {
                            throw new runtime.RequiredError('expectedCount', 'Required parameter "expectedCount" was null or undefined when calling waitForWebhookResults().');
                        }
                        if (requestParameters['timeout'] == null) {
                            throw new runtime.RequiredError('timeout', 'Required parameter "timeout" was null or undefined when calling waitForWebhookResults().');
                        }
                        queryParameters = {};
                        if (requestParameters['expectedCount'] != null) {
                            queryParameters['expectedCount'] = requestParameters['expectedCount'];
                        }
                        if (requestParameters['timeout'] != null) {
                            queryParameters['timeout'] = requestParameters['timeout'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/webhooks/{webhookId}/wait".replace("{".concat("webhookId", "}"), encodeURIComponent(String(requestParameters['webhookId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(index_1.WebhookResultDtoFromJSON); })];
                }
            });
        });
    };
    /**
     * Wait for webhook results for a webhook
     */
    WebhookControllerApi.prototype.waitForWebhookResults = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.waitForWebhookResultsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return WebhookControllerApi;
}(runtime.BaseAPI));
exports.WebhookControllerApi = WebhookControllerApi;
/**
 * @export
 */
exports.GetAllAccountWebhooksSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetAllAccountWebhooksEventTypeEnum = {
    EMAIL_RECEIVED: 'EMAIL_RECEIVED',
    NEW_EMAIL: 'NEW_EMAIL',
    NEW_CONTACT: 'NEW_CONTACT',
    NEW_ATTACHMENT: 'NEW_ATTACHMENT',
    EMAIL_OPENED: 'EMAIL_OPENED',
    EMAIL_READ: 'EMAIL_READ',
    DELIVERY_STATUS: 'DELIVERY_STATUS',
    BOUNCE: 'BOUNCE',
    BOUNCE_RECIPIENT: 'BOUNCE_RECIPIENT',
    NEW_SMS: 'NEW_SMS',
    NEW_GUEST_USER: 'NEW_GUEST_USER'
};
/**
 * @export
 */
exports.GetAllAccountWebhooksHealthEnum = {
    HEALTHY: 'HEALTHY',
    UNHEALTHY: 'UNHEALTHY'
};
/**
 * @export
 */
exports.GetAllWebhookEndpointsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetAllWebhookEndpointsHealthEnum = {
    HEALTHY: 'HEALTHY',
    UNHEALTHY: 'UNHEALTHY'
};
/**
 * @export
 */
exports.GetAllWebhookEndpointsEventTypeEnum = {
    EMAIL_RECEIVED: 'EMAIL_RECEIVED',
    NEW_EMAIL: 'NEW_EMAIL',
    NEW_CONTACT: 'NEW_CONTACT',
    NEW_ATTACHMENT: 'NEW_ATTACHMENT',
    EMAIL_OPENED: 'EMAIL_OPENED',
    EMAIL_READ: 'EMAIL_READ',
    DELIVERY_STATUS: 'DELIVERY_STATUS',
    BOUNCE: 'BOUNCE',
    BOUNCE_RECIPIENT: 'BOUNCE_RECIPIENT',
    NEW_SMS: 'NEW_SMS',
    NEW_GUEST_USER: 'NEW_GUEST_USER'
};
/**
 * @export
 */
exports.GetAllWebhookResultsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetAllWebhookResultsResultTypeEnum = {
    BAD_RESPONSE: 'BAD_RESPONSE',
    EXCEPTION: 'EXCEPTION',
    SUCCESS: 'SUCCESS',
    REDRIVEN: 'REDRIVEN'
};
/**
 * @export
 */
exports.GetAllWebhookResultsEventNameEnum = {
    EMAIL_RECEIVED: 'EMAIL_RECEIVED',
    NEW_EMAIL: 'NEW_EMAIL',
    NEW_CONTACT: 'NEW_CONTACT',
    NEW_ATTACHMENT: 'NEW_ATTACHMENT',
    EMAIL_OPENED: 'EMAIL_OPENED',
    EMAIL_READ: 'EMAIL_READ',
    DELIVERY_STATUS: 'DELIVERY_STATUS',
    BOUNCE: 'BOUNCE',
    BOUNCE_RECIPIENT: 'BOUNCE_RECIPIENT',
    NEW_SMS: 'NEW_SMS',
    NEW_GUEST_USER: 'NEW_GUEST_USER'
};
/**
 * @export
 */
exports.GetAllWebhooksSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetAllWebhooksHealthEnum = {
    HEALTHY: 'HEALTHY',
    UNHEALTHY: 'UNHEALTHY'
};
/**
 * @export
 */
exports.GetAllWebhooksEventTypeEnum = {
    EMAIL_RECEIVED: 'EMAIL_RECEIVED',
    NEW_EMAIL: 'NEW_EMAIL',
    NEW_CONTACT: 'NEW_CONTACT',
    NEW_ATTACHMENT: 'NEW_ATTACHMENT',
    EMAIL_OPENED: 'EMAIL_OPENED',
    EMAIL_READ: 'EMAIL_READ',
    DELIVERY_STATUS: 'DELIVERY_STATUS',
    BOUNCE: 'BOUNCE',
    BOUNCE_RECIPIENT: 'BOUNCE_RECIPIENT',
    NEW_SMS: 'NEW_SMS',
    NEW_GUEST_USER: 'NEW_GUEST_USER'
};
/**
 * @export
 */
exports.GetInboxWebhooksPaginatedSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetInboxWebhooksPaginatedHealthEnum = {
    HEALTHY: 'HEALTHY',
    UNHEALTHY: 'UNHEALTHY'
};
/**
 * @export
 */
exports.GetInboxWebhooksPaginatedEventTypeEnum = {
    EMAIL_RECEIVED: 'EMAIL_RECEIVED',
    NEW_EMAIL: 'NEW_EMAIL',
    NEW_CONTACT: 'NEW_CONTACT',
    NEW_ATTACHMENT: 'NEW_ATTACHMENT',
    EMAIL_OPENED: 'EMAIL_OPENED',
    EMAIL_READ: 'EMAIL_READ',
    DELIVERY_STATUS: 'DELIVERY_STATUS',
    BOUNCE: 'BOUNCE',
    BOUNCE_RECIPIENT: 'BOUNCE_RECIPIENT',
    NEW_SMS: 'NEW_SMS',
    NEW_GUEST_USER: 'NEW_GUEST_USER'
};
/**
 * @export
 */
exports.GetJsonSchemaForWebhookEventEventEnum = {
    EMAIL_RECEIVED: 'EMAIL_RECEIVED',
    NEW_EMAIL: 'NEW_EMAIL',
    NEW_CONTACT: 'NEW_CONTACT',
    NEW_ATTACHMENT: 'NEW_ATTACHMENT',
    EMAIL_OPENED: 'EMAIL_OPENED',
    EMAIL_READ: 'EMAIL_READ',
    DELIVERY_STATUS: 'DELIVERY_STATUS',
    BOUNCE: 'BOUNCE',
    BOUNCE_RECIPIENT: 'BOUNCE_RECIPIENT',
    NEW_SMS: 'NEW_SMS',
    NEW_GUEST_USER: 'NEW_GUEST_USER'
};
/**
 * @export
 */
exports.GetPhoneNumberWebhooksPaginatedSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetPhoneNumberWebhooksPaginatedEventTypeEnum = {
    EMAIL_RECEIVED: 'EMAIL_RECEIVED',
    NEW_EMAIL: 'NEW_EMAIL',
    NEW_CONTACT: 'NEW_CONTACT',
    NEW_ATTACHMENT: 'NEW_ATTACHMENT',
    EMAIL_OPENED: 'EMAIL_OPENED',
    EMAIL_READ: 'EMAIL_READ',
    DELIVERY_STATUS: 'DELIVERY_STATUS',
    BOUNCE: 'BOUNCE',
    BOUNCE_RECIPIENT: 'BOUNCE_RECIPIENT',
    NEW_SMS: 'NEW_SMS',
    NEW_GUEST_USER: 'NEW_GUEST_USER'
};
/**
 * @export
 */
exports.GetPhoneNumberWebhooksPaginatedHealthEnum = {
    HEALTHY: 'HEALTHY',
    UNHEALTHY: 'UNHEALTHY'
};
/**
 * @export
 */
exports.GetTestWebhookPayloadEventNameEnum = {
    EMAIL_RECEIVED: 'EMAIL_RECEIVED',
    NEW_EMAIL: 'NEW_EMAIL',
    NEW_CONTACT: 'NEW_CONTACT',
    NEW_ATTACHMENT: 'NEW_ATTACHMENT',
    EMAIL_OPENED: 'EMAIL_OPENED',
    EMAIL_READ: 'EMAIL_READ',
    DELIVERY_STATUS: 'DELIVERY_STATUS',
    BOUNCE: 'BOUNCE',
    BOUNCE_RECIPIENT: 'BOUNCE_RECIPIENT',
    NEW_SMS: 'NEW_SMS',
    NEW_GUEST_USER: 'NEW_GUEST_USER'
};
/**
 * @export
 */
exports.GetWebhookResultsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetWebhookResultsResultTypeEnum = {
    BAD_RESPONSE: 'BAD_RESPONSE',
    EXCEPTION: 'EXCEPTION',
    SUCCESS: 'SUCCESS',
    REDRIVEN: 'REDRIVEN'
};
/**
 * @export
 */
exports.GetWebhookResultsEventNameEnum = {
    EMAIL_RECEIVED: 'EMAIL_RECEIVED',
    NEW_EMAIL: 'NEW_EMAIL',
    NEW_CONTACT: 'NEW_CONTACT',
    NEW_ATTACHMENT: 'NEW_ATTACHMENT',
    EMAIL_OPENED: 'EMAIL_OPENED',
    EMAIL_READ: 'EMAIL_READ',
    DELIVERY_STATUS: 'DELIVERY_STATUS',
    BOUNCE: 'BOUNCE',
    BOUNCE_RECIPIENT: 'BOUNCE_RECIPIENT',
    NEW_SMS: 'NEW_SMS',
    NEW_GUEST_USER: 'NEW_GUEST_USER'
};
/**
 * @export
 */
exports.GetWebhooksSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
