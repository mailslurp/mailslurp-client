/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { CreateTrackingPixelOptions, PageTrackingPixelProjection, TrackingPixelDto } from '../models/index';
export interface CreateTrackingPixelRequest {
    createTrackingPixelOptions: CreateTrackingPixelOptions;
}
export interface GetAllTrackingPixelsRequest {
    page?: number;
    size?: number;
    sort?: GetAllTrackingPixelsSortEnum;
    searchFilter?: string;
    since?: Date;
    before?: Date;
}
export interface GetTrackingPixelRequest {
    id: string;
}
/**
 *
 */
export declare class TrackingControllerApi extends runtime.BaseAPI {
    /**
     * Create a tracking pixel. A tracking pixel is an image that can be embedded in an email. When the email is viewed and the image is seen MailSlurp will mark the pixel as seen. Use tracking pixels to monitor email open events. You can receive open notifications via webhook or by fetching the pixel.
     * Create tracking pixel
     */
    createTrackingPixelRaw(requestParameters: CreateTrackingPixelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackingPixelDto>>;
    /**
     * Create a tracking pixel. A tracking pixel is an image that can be embedded in an email. When the email is viewed and the image is seen MailSlurp will mark the pixel as seen. Use tracking pixels to monitor email open events. You can receive open notifications via webhook or by fetching the pixel.
     * Create tracking pixel
     */
    createTrackingPixel(requestParameters: CreateTrackingPixelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackingPixelDto>;
    /**
     * List tracking pixels in paginated form
     * Get tracking pixels
     */
    getAllTrackingPixelsRaw(requestParameters: GetAllTrackingPixelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageTrackingPixelProjection>>;
    /**
     * List tracking pixels in paginated form
     * Get tracking pixels
     */
    getAllTrackingPixels(requestParameters?: GetAllTrackingPixelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageTrackingPixelProjection>;
    /**
     * Get pixel
     */
    getTrackingPixelRaw(requestParameters: GetTrackingPixelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackingPixelDto>>;
    /**
     * Get pixel
     */
    getTrackingPixel(requestParameters: GetTrackingPixelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackingPixelDto>;
}
/**
 * @export
 */
export declare const GetAllTrackingPixelsSortEnum: {
    readonly ASC: "ASC";
    readonly DESC: "DESC";
};
export type GetAllTrackingPixelsSortEnum = typeof GetAllTrackingPixelsSortEnum[keyof typeof GetAllTrackingPixelsSortEnum];
