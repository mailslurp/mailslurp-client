/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AccountBounceBlockDto, BouncedEmailDto, BouncedRecipientDto, Complaint, FilterBouncedRecipientsOptions, FilterBouncedRecipientsResult, PageBouncedEmail, PageBouncedRecipients, PageComplaint, PageListUnsubscribeRecipients } from '../models/index';
export interface FilterBouncedRecipientRequest {
    filterBouncedRecipientsOptions: FilterBouncedRecipientsOptions;
}
export interface GetBouncedEmailRequest {
    id: string;
}
export interface GetBouncedEmailsRequest {
    page?: number;
    size?: number;
    sort?: GetBouncedEmailsSortEnum;
    since?: Date;
    before?: Date;
}
export interface GetBouncedRecipientRequest {
    id: string;
}
export interface GetBouncedRecipientsRequest {
    page?: number;
    size?: number;
    sort?: GetBouncedRecipientsSortEnum;
    since?: Date;
    before?: Date;
}
export interface GetComplaintRequest {
    id: string;
}
export interface GetComplaintsRequest {
    page?: number;
    size?: number;
    sort?: GetComplaintsSortEnum;
    since?: Date;
    before?: Date;
}
export interface GetListUnsubscribeRecipientsRequest {
    page?: number;
    size?: number;
    sort?: GetListUnsubscribeRecipientsSortEnum;
    domainId?: string;
}
/**
 *
 */
export declare class BounceControllerApi extends runtime.BaseAPI {
    /**
     * Prevent email sending errors by remove recipients who have resulted in past email bounces or complaints
     * Filter a list of email recipients and remove those who have bounced
     */
    filterBouncedRecipientRaw(requestParameters: FilterBouncedRecipientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FilterBouncedRecipientsResult>>;
    /**
     * Prevent email sending errors by remove recipients who have resulted in past email bounces or complaints
     * Filter a list of email recipients and remove those who have bounced
     */
    filterBouncedRecipient(requestParameters: FilterBouncedRecipientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FilterBouncedRecipientsResult>;
    /**
     * Check if account block status prevents sending
     * Can account send email
     */
    getAccountBounceBlockStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountBounceBlockDto>>;
    /**
     * Check if account block status prevents sending
     * Can account send email
     */
    getAccountBounceBlockStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountBounceBlockDto>;
    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * Get a bounced email.
     */
    getBouncedEmailRaw(requestParameters: GetBouncedEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BouncedEmailDto>>;
    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * Get a bounced email.
     */
    getBouncedEmail(requestParameters: GetBouncedEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BouncedEmailDto>;
    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * Get paginated list of bounced emails.
     */
    getBouncedEmailsRaw(requestParameters: GetBouncedEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBouncedEmail>>;
    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * Get paginated list of bounced emails.
     */
    getBouncedEmails(requestParameters?: GetBouncedEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBouncedEmail>;
    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * Get a bounced email.
     */
    getBouncedRecipientRaw(requestParameters: GetBouncedRecipientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BouncedRecipientDto>>;
    /**
     * Bounced emails are email you have sent that were rejected by a recipient
     * Get a bounced email.
     */
    getBouncedRecipient(requestParameters: GetBouncedRecipientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BouncedRecipientDto>;
    /**
     * Bounced recipients are email addresses that you have sent emails to that did not accept the sent email. Once a recipient is bounced you cannot send emails to that address.
     * Get paginated list of bounced recipients.
     */
    getBouncedRecipientsRaw(requestParameters: GetBouncedRecipientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageBouncedRecipients>>;
    /**
     * Bounced recipients are email addresses that you have sent emails to that did not accept the sent email. Once a recipient is bounced you cannot send emails to that address.
     * Get paginated list of bounced recipients.
     */
    getBouncedRecipients(requestParameters?: GetBouncedRecipientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageBouncedRecipients>;
    /**
     * Get complaint
     * Get complaint
     */
    getComplaintRaw(requestParameters: GetComplaintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Complaint>>;
    /**
     * Get complaint
     * Get complaint
     */
    getComplaint(requestParameters: GetComplaintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Complaint>;
    /**
     * SMTP complaints made against your account
     * Get paginated list of complaints.
     */
    getComplaintsRaw(requestParameters: GetComplaintsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageComplaint>>;
    /**
     * SMTP complaints made against your account
     * Get paginated list of complaints.
     */
    getComplaints(requestParameters?: GetComplaintsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageComplaint>;
    /**
     * Unsubscribed recipient have unsubscribed from a mailing list for a user or domain and cannot be contacted again.
     * Get paginated list of unsubscribed recipients.
     */
    getListUnsubscribeRecipientsRaw(requestParameters: GetListUnsubscribeRecipientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageListUnsubscribeRecipients>>;
    /**
     * Unsubscribed recipient have unsubscribed from a mailing list for a user or domain and cannot be contacted again.
     * Get paginated list of unsubscribed recipients.
     */
    getListUnsubscribeRecipients(requestParameters?: GetListUnsubscribeRecipientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageListUnsubscribeRecipients>;
}
/**
 * @export
 */
export declare const GetBouncedEmailsSortEnum: {
    readonly ASC: "ASC";
    readonly DESC: "DESC";
};
export type GetBouncedEmailsSortEnum = typeof GetBouncedEmailsSortEnum[keyof typeof GetBouncedEmailsSortEnum];
/**
 * @export
 */
export declare const GetBouncedRecipientsSortEnum: {
    readonly ASC: "ASC";
    readonly DESC: "DESC";
};
export type GetBouncedRecipientsSortEnum = typeof GetBouncedRecipientsSortEnum[keyof typeof GetBouncedRecipientsSortEnum];
/**
 * @export
 */
export declare const GetComplaintsSortEnum: {
    readonly ASC: "ASC";
    readonly DESC: "DESC";
};
export type GetComplaintsSortEnum = typeof GetComplaintsSortEnum[keyof typeof GetComplaintsSortEnum];
/**
 * @export
 */
export declare const GetListUnsubscribeRecipientsSortEnum: {
    readonly ASC: "ASC";
    readonly DESC: "DESC";
};
export type GetListUnsubscribeRecipientsSortEnum = typeof GetListUnsubscribeRecipientsSortEnum[keyof typeof GetListUnsubscribeRecipientsSortEnum];
