/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CreateRulesetOptions, InboxRulesetTestResult, PageRulesetDto, RulesetDto, RulesetTestOptions, TestInboxRulesetSendingOptions, TestNewInboxRulesetOptions, TestRulesetReceivingOptions, TestRulesetReceivingResult, TestRulesetSendingResult } from '../models';
export interface CreateNewRulesetRequest {
    createRulesetOptions: CreateRulesetOptions;
    inboxId?: string;
    phoneId?: string;
}
export interface DeleteRulesetRequest {
    id: string;
}
export interface DeleteRulesetsRequest {
    inboxId?: string;
    phoneId?: string;
}
export interface GetRulesetRequest {
    id: string;
}
export interface GetRulesetsRequest {
    inboxId?: string;
    phoneId?: string;
    page?: number;
    size?: number;
    sort?: GetRulesetsSortEnum;
    searchFilter?: string;
    since?: Date;
    before?: Date;
}
export interface TestInboxRulesetsForInboxRequest {
    inboxId: string;
    rulesetTestOptions: RulesetTestOptions;
}
export interface TestNewRulesetRequest {
    testNewInboxRulesetOptions: TestNewInboxRulesetOptions;
}
export interface TestRulesetRequest {
    id: string;
    rulesetTestOptions: RulesetTestOptions;
}
export interface TestRulesetReceivingRequest {
    testRulesetReceivingOptions: TestRulesetReceivingOptions;
}
export interface TestRulesetSendingRequest {
    testInboxRulesetSendingOptions: TestInboxRulesetSendingOptions;
}
/**
 *
 */
export declare class RulesetControllerApi extends runtime.BaseAPI {
    /**
     * Create a new inbox or phone number rule for forwarding, blocking, and allowing emails or SMS when sending and receiving
     * Create a ruleset
     */
    createNewRulesetRaw(requestParameters: CreateNewRulesetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RulesetDto>>;
    /**
     * Create a new inbox or phone number rule for forwarding, blocking, and allowing emails or SMS when sending and receiving
     * Create a ruleset
     */
    createNewRuleset(requestParameters: CreateNewRulesetRequest, initOverrides?: RequestInit): Promise<RulesetDto>;
    /**
     * Delete ruleset
     * Delete a ruleset
     */
    deleteRulesetRaw(requestParameters: DeleteRulesetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete ruleset
     * Delete a ruleset
     */
    deleteRuleset(requestParameters: DeleteRulesetRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Delete rulesets. Accepts optional inboxId or phoneId filters.
     * Delete rulesets
     */
    deleteRulesetsRaw(requestParameters: DeleteRulesetsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete rulesets. Accepts optional inboxId or phoneId filters.
     * Delete rulesets
     */
    deleteRulesets(requestParameters: DeleteRulesetsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Get ruleset
     * Get a ruleset
     */
    getRulesetRaw(requestParameters: GetRulesetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RulesetDto>>;
    /**
     * Get ruleset
     * Get a ruleset
     */
    getRuleset(requestParameters: GetRulesetRequest, initOverrides?: RequestInit): Promise<RulesetDto>;
    /**
     * List all rulesets attached to an inbox or phone or account
     * List rulesets block and allow lists
     */
    getRulesetsRaw(requestParameters: GetRulesetsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PageRulesetDto>>;
    /**
     * List all rulesets attached to an inbox or phone or account
     * List rulesets block and allow lists
     */
    getRulesets(requestParameters: GetRulesetsRequest, initOverrides?: RequestInit): Promise<PageRulesetDto>;
    /**
     * Test inbox rulesets for inbox
     * Test inbox rulesets for inbox
     */
    testInboxRulesetsForInboxRaw(requestParameters: TestInboxRulesetsForInboxRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InboxRulesetTestResult>>;
    /**
     * Test inbox rulesets for inbox
     * Test inbox rulesets for inbox
     */
    testInboxRulesetsForInbox(requestParameters: TestInboxRulesetsForInboxRequest, initOverrides?: RequestInit): Promise<InboxRulesetTestResult>;
    /**
     * Test new ruleset
     * Test new ruleset
     */
    testNewRulesetRaw(requestParameters: TestNewRulesetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InboxRulesetTestResult>>;
    /**
     * Test new ruleset
     * Test new ruleset
     */
    testNewRuleset(requestParameters: TestNewRulesetRequest, initOverrides?: RequestInit): Promise<InboxRulesetTestResult>;
    /**
     * Test an inbox or phone ruleset
     * Test a ruleset
     */
    testRulesetRaw(requestParameters: TestRulesetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InboxRulesetTestResult>>;
    /**
     * Test an inbox or phone ruleset
     * Test a ruleset
     */
    testRuleset(requestParameters: TestRulesetRequest, initOverrides?: RequestInit): Promise<InboxRulesetTestResult>;
    /**
     * Test whether inbound emails from an email address would be blocked or allowed by inbox rulesets or test if phone number can receive SMS
     * Test receiving with rulesets
     */
    testRulesetReceivingRaw(requestParameters: TestRulesetReceivingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TestRulesetReceivingResult>>;
    /**
     * Test whether inbound emails from an email address would be blocked or allowed by inbox rulesets or test if phone number can receive SMS
     * Test receiving with rulesets
     */
    testRulesetReceiving(requestParameters: TestRulesetReceivingRequest, initOverrides?: RequestInit): Promise<TestRulesetReceivingResult>;
    /**
     * Test whether outbound emails to an email address would be blocked or allowed by inbox rulesets or whether a phone number can send SMS
     * Test sending with rulesets
     */
    testRulesetSendingRaw(requestParameters: TestRulesetSendingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TestRulesetSendingResult>>;
    /**
     * Test whether outbound emails to an email address would be blocked or allowed by inbox rulesets or whether a phone number can send SMS
     * Test sending with rulesets
     */
    testRulesetSending(requestParameters: TestRulesetSendingRequest, initOverrides?: RequestInit): Promise<TestRulesetSendingResult>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetRulesetsSortEnum {
    ASC = "ASC",
    DESC = "DESC"
}
