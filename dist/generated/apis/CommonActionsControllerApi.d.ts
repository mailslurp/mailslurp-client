/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { InboxDto, SimpleSendEmailOptions } from '../models';
export interface CreateNewEmailAddressRequest {
    allowTeamAccess?: boolean;
    useDomainPool?: boolean;
    expiresAt?: Date;
    expiresIn?: number;
    emailAddress?: string;
    inboxType?: CreateNewEmailAddressInboxTypeEnum;
    description?: string;
    name?: string;
    tags?: Set<string>;
    favourite?: boolean;
}
export interface CreateNewEmailAddress1Request {
    allowTeamAccess?: boolean;
    useDomainPool?: boolean;
    expiresAt?: Date;
    expiresIn?: number;
    emailAddress?: string;
    inboxType?: CreateNewEmailAddress1InboxTypeEnum;
    description?: string;
    name?: string;
    tags?: Set<string>;
    favourite?: boolean;
}
export interface DeleteEmailAddressRequest {
    inboxId: string;
}
export interface EmptyInboxRequest {
    inboxId: string;
}
export interface SendEmailSimpleRequest {
    simpleSendEmailOptions: SimpleSendEmailOptions;
}
/**
 *
 */
export declare class CommonActionsControllerApi extends runtime.BaseAPI {
    /**
     * Returns an Inbox with an `id` and an `emailAddress`
     * Create new random inbox
     */
    createNewEmailAddressRaw(requestParameters: CreateNewEmailAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InboxDto>>;
    /**
     * Returns an Inbox with an `id` and an `emailAddress`
     * Create new random inbox
     */
    createNewEmailAddress(requestParameters: CreateNewEmailAddressRequest, initOverrides?: RequestInit): Promise<InboxDto>;
    /**
     * Returns an Inbox with an `id` and an `emailAddress`
     * Create new random inbox
     */
    createNewEmailAddress1Raw(requestParameters: CreateNewEmailAddress1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InboxDto>>;
    /**
     * Returns an Inbox with an `id` and an `emailAddress`
     * Create new random inbox
     */
    createNewEmailAddress1(requestParameters: CreateNewEmailAddress1Request, initOverrides?: RequestInit): Promise<InboxDto>;
    /**
     * Deletes inbox email address
     * Delete inbox email address by inbox id
     */
    deleteEmailAddressRaw(requestParameters: DeleteEmailAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Deletes inbox email address
     * Delete inbox email address by inbox id
     */
    deleteEmailAddress(requestParameters: DeleteEmailAddressRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Deletes all emails
     * Delete all emails in an inbox
     */
    emptyInboxRaw(requestParameters: EmptyInboxRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Deletes all emails
     * Delete all emails in an inbox
     */
    emptyInbox(requestParameters: EmptyInboxRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * If no senderId or inboxId provided a random email address will be used to send from.
     * Send an email
     */
    sendEmailSimpleRaw(requestParameters: SendEmailSimpleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * If no senderId or inboxId provided a random email address will be used to send from.
     * Send an email
     */
    sendEmailSimple(requestParameters: SendEmailSimpleRequest, initOverrides?: RequestInit): Promise<void>;
}
/**
 * @export
 * @enum {string}
 */
export declare enum CreateNewEmailAddressInboxTypeEnum {
    HTTP_INBOX = "HTTP_INBOX",
    SMTP_INBOX = "SMTP_INBOX"
}
/**
 * @export
 * @enum {string}
 */
export declare enum CreateNewEmailAddress1InboxTypeEnum {
    HTTP_INBOX = "HTTP_INBOX",
    SMTP_INBOX = "SMTP_INBOX"
}
