"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListInboxTrackingPixelsSortEnum = exports.ListInboxRulesetsSortEnum = exports.GetScheduledJobsByInboxIdSortEnum = exports.GetOutboxesSortEnum = exports.GetOrganizationInboxesSortEnum = exports.GetInboxesByTagSortEnum = exports.GetInboxesSortEnum = exports.GetInboxTagsPaginatedSortEnum = exports.GetInboxTagsSortEnum = exports.GetInboxSentEmailsSortEnum = exports.GetInboxPlusAddressesSortEnum = exports.GetInboxPlusAddressEmailsForPlusAddressIdSortEnum = exports.GetInboxPlusAddressEmailsSortEnum = exports.GetInboxEmailsPaginatedSortEnum = exports.GetEmailsSortEnum = exports.GetDeliveryStatusesByInboxIdSortEnum = exports.GetAllScheduledJobsSortEnum = exports.GetAllPlusAddressesSortEnum = exports.GetAllInboxesOffsetPaginatedInboxFunctionEnum = exports.GetAllInboxesOffsetPaginatedInboxTypeEnum = exports.GetAllInboxesOffsetPaginatedSortEnum = exports.GetAllInboxesInboxFunctionEnum = exports.GetAllInboxesInboxTypeEnum = exports.GetAllInboxesSortEnum = exports.CreateInboxInboxTypeEnum = exports.InboxControllerApi = void 0;
var runtime = __importStar(require("../runtime"));
var index_1 = require("../models/index");
/**
 *
 */
var InboxControllerApi = /** @class */ (function (_super) {
    __extends(InboxControllerApi, _super);
    function InboxControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get a scheduled email job and cancel it. Will fail if status of job is already cancelled, failed, or complete.
     * Cancel a scheduled email job
     */
    InboxControllerApi.prototype.cancelScheduledJobRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['jobId'] == null) {
                            throw new runtime.RequiredError('jobId', 'Required parameter "jobId" was null or undefined when calling cancelScheduledJob().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/scheduled-jobs/{jobId}".replace("{".concat("jobId", "}"), encodeURIComponent(String(requestParameters['jobId']))),
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ScheduledJobDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get a scheduled email job and cancel it. Will fail if status of job is already cancelled, failed, or complete.
     * Cancel a scheduled email job
     */
    InboxControllerApi.prototype.cancelScheduledJob = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.cancelScheduledJobRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty.
     * Create an inbox email address. An inbox has a real email address and can send and receive emails. Inboxes can be either `SMTP` or `HTTP` inboxes.
     */
    InboxControllerApi.prototype.createInboxRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['emailAddress'] != null) {
                            queryParameters['emailAddress'] = requestParameters['emailAddress'];
                        }
                        if (requestParameters['tags'] != null) {
                            queryParameters['tags'] = requestParameters['tags'];
                        }
                        if (requestParameters['name'] != null) {
                            queryParameters['name'] = requestParameters['name'];
                        }
                        if (requestParameters['description'] != null) {
                            queryParameters['description'] = requestParameters['description'];
                        }
                        if (requestParameters['useDomainPool'] != null) {
                            queryParameters['useDomainPool'] = requestParameters['useDomainPool'];
                        }
                        if (requestParameters['favourite'] != null) {
                            queryParameters['favourite'] = requestParameters['favourite'];
                        }
                        if (requestParameters['expiresAt'] != null) {
                            queryParameters['expiresAt'] = requestParameters['expiresAt'].toISOString();
                        }
                        if (requestParameters['expiresIn'] != null) {
                            queryParameters['expiresIn'] = requestParameters['expiresIn'];
                        }
                        if (requestParameters['allowTeamAccess'] != null) {
                            queryParameters['allowTeamAccess'] = requestParameters['allowTeamAccess'];
                        }
                        if (requestParameters['inboxType'] != null) {
                            queryParameters['inboxType'] = requestParameters['inboxType'];
                        }
                        if (requestParameters['virtualInbox'] != null) {
                            queryParameters['virtualInbox'] = requestParameters['virtualInbox'];
                        }
                        if (requestParameters['useShortAddress'] != null) {
                            queryParameters['useShortAddress'] = requestParameters['useShortAddress'];
                        }
                        if (requestParameters['domainId'] != null) {
                            queryParameters['domainId'] = requestParameters['domainId'];
                        }
                        if (requestParameters['domainName'] != null) {
                            queryParameters['domainName'] = requestParameters['domainName'];
                        }
                        if (requestParameters['prefix'] != null) {
                            queryParameters['prefix'] = requestParameters['prefix'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.InboxDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty.
     * Create an inbox email address. An inbox has a real email address and can send and receive emails. Inboxes can be either `SMTP` or `HTTP` inboxes.
     */
    InboxControllerApi.prototype.createInbox = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createInboxRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     * Create an inbox ruleset
     */
    InboxControllerApi.prototype.createInboxRulesetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling createInboxRuleset().');
                        }
                        if (requestParameters['createInboxRulesetOptions'] == null) {
                            throw new runtime.RequiredError('createInboxRulesetOptions', 'Required parameter "createInboxRulesetOptions" was null or undefined when calling createInboxRuleset().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/rulesets".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.CreateInboxRulesetOptionsToJSON)(requestParameters['createInboxRulesetOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.InboxRulesetDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     * Create an inbox ruleset
     */
    InboxControllerApi.prototype.createInboxRuleset = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createInboxRulesetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Create an inbox with default options. Uses MailSlurp domain pool address and is private.
     */
    InboxControllerApi.prototype.createInboxWithDefaultsRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/withDefaults",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.InboxDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Create an inbox with default options. Uses MailSlurp domain pool address and is private.
     */
    InboxControllerApi.prototype.createInboxWithDefaults = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createInboxWithDefaultsRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
     * Create an inbox with options. Extended options for inbox creation.
     */
    InboxControllerApi.prototype.createInboxWithOptionsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['createInboxDto'] == null) {
                            throw new runtime.RequiredError('createInboxDto', 'Required parameter "createInboxDto" was null or undefined when calling createInboxWithOptions().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/withOptions",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.CreateInboxDtoToJSON)(requestParameters['createInboxDto']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.InboxDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
     * Create an inbox with options. Extended options for inbox creation.
     */
    InboxControllerApi.prototype.createInboxWithOptions = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createInboxWithOptionsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Deletes all emails in an inbox. Be careful as emails cannot be recovered
     * Delete all emails in a given inboxes.
     */
    InboxControllerApi.prototype.deleteAllInboxEmailsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling deleteAllInboxEmails().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/deleteAllInboxEmails".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Deletes all emails in an inbox. Be careful as emails cannot be recovered
     * Delete all emails in a given inboxes.
     */
    InboxControllerApi.prototype.deleteAllInboxEmails = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteAllInboxEmailsRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
     * Delete all inboxes
     */
    InboxControllerApi.prototype.deleteAllInboxesRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes",
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
     * Delete all inboxes
     */
    InboxControllerApi.prototype.deleteAllInboxes = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteAllInboxesRaw(initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Permanently delete all inboxes by description
     * Delete inboxes by description
     */
    InboxControllerApi.prototype.deleteAllInboxesByDescriptionRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['description'] == null) {
                            throw new runtime.RequiredError('description', 'Required parameter "description" was null or undefined when calling deleteAllInboxesByDescription().');
                        }
                        queryParameters = {};
                        if (requestParameters['description'] != null) {
                            queryParameters['description'] = requestParameters['description'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/by-description",
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Permanently delete all inboxes by description
     * Delete inboxes by description
     */
    InboxControllerApi.prototype.deleteAllInboxesByDescription = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteAllInboxesByDescriptionRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Permanently delete all inboxes by name
     * Delete inboxes by name
     */
    InboxControllerApi.prototype.deleteAllInboxesByNameRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['name'] == null) {
                            throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling deleteAllInboxesByName().');
                        }
                        queryParameters = {};
                        if (requestParameters['name'] != null) {
                            queryParameters['name'] = requestParameters['name'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/by-name",
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Permanently delete all inboxes by name
     * Delete inboxes by name
     */
    InboxControllerApi.prototype.deleteAllInboxesByName = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteAllInboxesByNameRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Permanently delete all inboxes by tag
     * Delete inboxes by tag
     */
    InboxControllerApi.prototype.deleteAllInboxesByTagRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tag'] == null) {
                            throw new runtime.RequiredError('tag', 'Required parameter "tag" was null or undefined when calling deleteAllInboxesByTag().');
                        }
                        queryParameters = {};
                        if (requestParameters['tag'] != null) {
                            queryParameters['tag'] = requestParameters['tag'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/by-tag",
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Permanently delete all inboxes by tag
     * Delete inboxes by tag
     */
    InboxControllerApi.prototype.deleteAllInboxesByTag = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteAllInboxesByTagRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
     * Delete inbox
     */
    InboxControllerApi.prototype.deleteInboxRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling deleteInbox().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
     * Delete inbox
     */
    InboxControllerApi.prototype.deleteInbox = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteInboxRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Check if inboxes exist by email address. Useful if you are sending emails to mailslurp addresses
     * Does inbox exist
     */
    InboxControllerApi.prototype.doesInboxExistRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['emailAddress'] == null) {
                            throw new runtime.RequiredError('emailAddress', 'Required parameter "emailAddress" was null or undefined when calling doesInboxExist().');
                        }
                        queryParameters = {};
                        if (requestParameters['emailAddress'] != null) {
                            queryParameters['emailAddress'] = requestParameters['emailAddress'];
                        }
                        if (requestParameters['allowCatchAll'] != null) {
                            queryParameters['allowCatchAll'] = requestParameters['allowCatchAll'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/exists",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.InboxExistsDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Check if inboxes exist by email address. Useful if you are sending emails to mailslurp addresses
     * Does inbox exist
     */
    InboxControllerApi.prototype.doesInboxExist = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.doesInboxExistRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Remove any expired inboxes for your account (instead of waiting for scheduled removal on server)
     * Remove expired inboxes
     */
    InboxControllerApi.prototype.flushExpiredRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/expired",
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.FlushExpiredInboxesResultFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Remove any expired inboxes for your account (instead of waiting for scheduled removal on server)
     * Remove expired inboxes
     */
    InboxControllerApi.prototype.flushExpired = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.flushExpiredRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List inboxes in paginated form. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative `getInboxes` method returns a full list of inboxes but is limited to 100 results.
     * List All Inboxes Paginated
     */
    InboxControllerApi.prototype.getAllInboxesRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['favourite'] != null) {
                            queryParameters['favourite'] = requestParameters['favourite'];
                        }
                        if (requestParameters['search'] != null) {
                            queryParameters['search'] = requestParameters['search'];
                        }
                        if (requestParameters['tag'] != null) {
                            queryParameters['tag'] = requestParameters['tag'];
                        }
                        if (requestParameters['teamAccess'] != null) {
                            queryParameters['teamAccess'] = requestParameters['teamAccess'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        if (requestParameters['inboxType'] != null) {
                            queryParameters['inboxType'] = requestParameters['inboxType'];
                        }
                        if (requestParameters['inboxFunction'] != null) {
                            queryParameters['inboxFunction'] = requestParameters['inboxFunction'];
                        }
                        if (requestParameters['domainId'] != null) {
                            queryParameters['domainId'] = requestParameters['domainId'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/paginated",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageInboxProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * List inboxes in paginated form. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative `getInboxes` method returns a full list of inboxes but is limited to 100 results.
     * List All Inboxes Paginated
     */
    InboxControllerApi.prototype.getAllInboxes = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllInboxesRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List inboxes in paginated form. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative `getInboxes` method returns a full list of inboxes but is limited to 100 results.
     * List All Inboxes Offset Paginated
     */
    InboxControllerApi.prototype.getAllInboxesOffsetPaginatedRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['favourite'] != null) {
                            queryParameters['favourite'] = requestParameters['favourite'];
                        }
                        if (requestParameters['search'] != null) {
                            queryParameters['search'] = requestParameters['search'];
                        }
                        if (requestParameters['tag'] != null) {
                            queryParameters['tag'] = requestParameters['tag'];
                        }
                        if (requestParameters['teamAccess'] != null) {
                            queryParameters['teamAccess'] = requestParameters['teamAccess'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        if (requestParameters['inboxType'] != null) {
                            queryParameters['inboxType'] = requestParameters['inboxType'];
                        }
                        if (requestParameters['inboxFunction'] != null) {
                            queryParameters['inboxFunction'] = requestParameters['inboxFunction'];
                        }
                        if (requestParameters['domainId'] != null) {
                            queryParameters['domainId'] = requestParameters['domainId'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/offset-paginated",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageInboxProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * List inboxes in paginated form. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative `getInboxes` method returns a full list of inboxes but is limited to 100 results.
     * List All Inboxes Offset Paginated
     */
    InboxControllerApi.prototype.getAllInboxesOffsetPaginated = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllInboxesOffsetPaginatedRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns paginated list of all plus alias addresses found for in account based on received emails that used the inbox address with a +xyz alias.
     * Get all sub address plus address aliases for an inbox
     */
    InboxControllerApi.prototype.getAllPlusAddressesRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/plus-addresses",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PagePlusAddressProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Returns paginated list of all plus alias addresses found for in account based on received emails that used the inbox address with a +xyz alias.
     * Get all sub address plus address aliases for an inbox
     */
    InboxControllerApi.prototype.getAllPlusAddresses = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllPlusAddressesRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Schedule sending of emails using scheduled jobs. These can be inbox or account level.
     * Get all scheduled email sending jobs for account
     */
    InboxControllerApi.prototype.getAllScheduledJobsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/scheduled-jobs",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageScheduledJobsFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Schedule sending of emails using scheduled jobs. These can be inbox or account level.
     * Get all scheduled email sending jobs for account
     */
    InboxControllerApi.prototype.getAllScheduledJobs = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllScheduledJobsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get all email delivery statuses for an inbox
     * @deprecated
     */
    InboxControllerApi.prototype.getDeliveryStatusesByInboxIdRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling getDeliveryStatusesByInboxId().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/delivery-status".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageDeliveryStatusFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get all email delivery statuses for an inbox
     * @deprecated
     */
    InboxControllerApi.prototype.getDeliveryStatusesByInboxId = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDeliveryStatusesByInboxIdRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List emails that an inbox has received. Only emails that are sent to the inbox\'s email address will appear in the inbox. It may take several seconds for any email you send to an inbox\'s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the `minCount` parameter. The server will retry the inbox database until the `minCount` is satisfied or the `retryTimeout` is reached
     * Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
     */
    InboxControllerApi.prototype.getEmailsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling getEmails().');
                        }
                        queryParameters = {};
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['limit'] != null) {
                            queryParameters['limit'] = requestParameters['limit'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['retryTimeout'] != null) {
                            queryParameters['retryTimeout'] = requestParameters['retryTimeout'];
                        }
                        if (requestParameters['delayTimeout'] != null) {
                            queryParameters['delayTimeout'] = requestParameters['delayTimeout'];
                        }
                        if (requestParameters['minCount'] != null) {
                            queryParameters['minCount'] = requestParameters['minCount'];
                        }
                        if (requestParameters['unreadOnly'] != null) {
                            queryParameters['unreadOnly'] = requestParameters['unreadOnly'];
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/emails".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(index_1.EmailPreviewFromJSON); })];
                }
            });
        });
    };
    /**
     * List emails that an inbox has received. Only emails that are sent to the inbox\'s email address will appear in the inbox. It may take several seconds for any email you send to an inbox\'s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the `minCount` parameter. The server will retry the inbox database until the `minCount` is satisfied or the `retryTimeout` is reached
     * Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
     */
    InboxControllerApi.prototype.getEmails = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getEmailsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get IMAP access usernames and passwords
     */
    InboxControllerApi.prototype.getImapAccessRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/imap-access",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ImapAccessDetailsFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get IMAP access usernames and passwords
     */
    InboxControllerApi.prototype.getImapAccess = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getImapAccessRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get IMAP and SMTP access usernames and passwords
     */
    InboxControllerApi.prototype.getImapSmtpAccessRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/imap-smtp-access",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ImapSmtpAccessDetailsFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get IMAP and SMTP access usernames and passwords
     */
    InboxControllerApi.prototype.getImapSmtpAccess = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getImapSmtpAccessRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get IMAP and SMTP access details in .env format
     */
    InboxControllerApi.prototype.getImapSmtpAccessEnvRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/imap-smtp-access/env",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get IMAP and SMTP access details in .env format
     */
    InboxControllerApi.prototype.getImapSmtpAccessEnv = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getImapSmtpAccessEnvRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get IMAP and SMTP server hosts
     */
    InboxControllerApi.prototype.getImapSmtpAccessServersRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/imap-smtp-access/servers",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ImapSmtpAccessServersFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get IMAP and SMTP server hosts
     */
    InboxControllerApi.prototype.getImapSmtpAccessServers = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getImapSmtpAccessServersRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns an inbox\'s properties, including its email address and ID.
     * Get Inbox. Returns properties of an inbox.
     */
    InboxControllerApi.prototype.getInboxRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling getInbox().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.InboxDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Returns an inbox\'s properties, including its email address and ID.
     * Get Inbox. Returns properties of an inbox.
     */
    InboxControllerApi.prototype.getInbox = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get a inbox result by email address
     * Search for an inbox with the provided email address
     */
    InboxControllerApi.prototype.getInboxByEmailAddressRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['emailAddress'] == null) {
                            throw new runtime.RequiredError('emailAddress', 'Required parameter "emailAddress" was null or undefined when calling getInboxByEmailAddress().');
                        }
                        queryParameters = {};
                        if (requestParameters['emailAddress'] != null) {
                            queryParameters['emailAddress'] = requestParameters['emailAddress'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/byEmailAddress",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.InboxByEmailAddressResultFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get a inbox result by email address
     * Search for an inbox with the provided email address
     */
    InboxControllerApi.prototype.getInboxByEmailAddress = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxByEmailAddressRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get a inbox result by name
     * Search for an inbox with the given name
     */
    InboxControllerApi.prototype.getInboxByNameRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['name'] == null) {
                            throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling getInboxByName().');
                        }
                        queryParameters = {};
                        if (requestParameters['name'] != null) {
                            queryParameters['name'] = requestParameters['name'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/byName",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.InboxByNameResultFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get a inbox result by name
     * Search for an inbox with the given name
     */
    InboxControllerApi.prototype.getInboxByName = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxByNameRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get total inbox count
     */
    InboxControllerApi.prototype.getInboxCountRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/count",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.CountDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get total inbox count
     */
    InboxControllerApi.prototype.getInboxCount = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxCountRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get email count in inbox
     */
    InboxControllerApi.prototype.getInboxEmailCountRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling getInboxEmailCount().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/emails/count".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.CountDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get email count in inbox
     */
    InboxControllerApi.prototype.getInboxEmailCount = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxEmailCountRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get a paginated list of emails in an inbox. Does not hold connections open.
     * Get inbox emails paginated
     */
    InboxControllerApi.prototype.getInboxEmailsPaginatedRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling getInboxEmailsPaginated().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        if (requestParameters['syncConnectors'] != null) {
                            queryParameters['syncConnectors'] = requestParameters['syncConnectors'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/emails/paginated".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageEmailPreviewFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get a paginated list of emails in an inbox. Does not hold connections open.
     * Get inbox emails paginated
     */
    InboxControllerApi.prototype.getInboxEmailsPaginated = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxEmailsPaginatedRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get list of inbox IDs
     * Get all inbox IDs
     * @deprecated
     */
    InboxControllerApi.prototype.getInboxIdsRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/ids",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.InboxIdsResultFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get list of inbox IDs
     * Get all inbox IDs
     * @deprecated
     */
    InboxControllerApi.prototype.getInboxIds = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxIdsRaw(initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns a plus address object based on emails that used the inbox address with a +xyz alias.
     * Get sub address plus address for an inbox
     */
    InboxControllerApi.prototype.getInboxPlusAddressRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['plusAddressId'] == null) {
                            throw new runtime.RequiredError('plusAddressId', 'Required parameter "plusAddressId" was null or undefined when calling getInboxPlusAddress().');
                        }
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling getInboxPlusAddress().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/plus-addresses/{plusAddressId}".replace("{".concat("plusAddressId", "}"), encodeURIComponent(String(requestParameters['plusAddressId']))).replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PlusAddressDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Returns a plus address object based on emails that used the inbox address with a +xyz alias.
     * Get sub address plus address for an inbox
     */
    InboxControllerApi.prototype.getInboxPlusAddress = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxPlusAddressRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns a plus address object based on emails that used the inbox address with a +xyz alias.
     * Get sub address plus address by ID
     */
    InboxControllerApi.prototype.getInboxPlusAddressByIdRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['plusAddressId'] == null) {
                            throw new runtime.RequiredError('plusAddressId', 'Required parameter "plusAddressId" was null or undefined when calling getInboxPlusAddressById().');
                        }
                        queryParameters = {};
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/plus-addresses/{plusAddressId}".replace("{".concat("plusAddressId", "}"), encodeURIComponent(String(requestParameters['plusAddressId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PlusAddressDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Returns a plus address object based on emails that used the inbox address with a +xyz alias.
     * Get sub address plus address by ID
     */
    InboxControllerApi.prototype.getInboxPlusAddressById = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxPlusAddressByIdRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns paginated list of all emails for a given plus alias addresses found for an inbox based on received emails that used the inbox address with a +xyz alias.
     * Get emails for a given inbox plus address
     */
    InboxControllerApi.prototype.getInboxPlusAddressEmailsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['plusAddress'] == null) {
                            throw new runtime.RequiredError('plusAddress', 'Required parameter "plusAddress" was null or undefined when calling getInboxPlusAddressEmails().');
                        }
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling getInboxPlusAddressEmails().');
                        }
                        queryParameters = {};
                        if (requestParameters['plusAddress'] != null) {
                            queryParameters['plusAddress'] = requestParameters['plusAddress'];
                        }
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/plus-addresses/emails".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageEmailPreviewFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Returns paginated list of all emails for a given plus alias addresses found for an inbox based on received emails that used the inbox address with a +xyz alias.
     * Get emails for a given inbox plus address
     */
    InboxControllerApi.prototype.getInboxPlusAddressEmails = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxPlusAddressEmailsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns paginated list of all emails for a given plus alias addresses found for an inbox based on received emails that used the inbox address with a +xyz alias.
     * Get emails for a given inbox plus address
     */
    InboxControllerApi.prototype.getInboxPlusAddressEmailsForPlusAddressIdRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['plusAddressId'] == null) {
                            throw new runtime.RequiredError('plusAddressId', 'Required parameter "plusAddressId" was null or undefined when calling getInboxPlusAddressEmailsForPlusAddressId().');
                        }
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling getInboxPlusAddressEmailsForPlusAddressId().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/plus-addresses/{plusAddressId}/emails".replace("{".concat("plusAddressId", "}"), encodeURIComponent(String(requestParameters['plusAddressId']))).replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageEmailPreviewFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Returns paginated list of all emails for a given plus alias addresses found for an inbox based on received emails that used the inbox address with a +xyz alias.
     * Get emails for a given inbox plus address
     */
    InboxControllerApi.prototype.getInboxPlusAddressEmailsForPlusAddressId = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxPlusAddressEmailsForPlusAddressIdRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns paginated list of all plus alias addresses found for an inbox based on received emails that used the inbox address with a +xyz alias.
     * Get sub address plus address aliases for an inbox
     */
    InboxControllerApi.prototype.getInboxPlusAddressesRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling getInboxPlusAddresses().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/plus-addresses".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PagePlusAddressProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Returns paginated list of all plus alias addresses found for an inbox based on received emails that used the inbox address with a +xyz alias.
     * Get sub address plus address aliases for an inbox
     */
    InboxControllerApi.prototype.getInboxPlusAddresses = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxPlusAddressesRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get sent email count in inbox
     */
    InboxControllerApi.prototype.getInboxSentCountRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling getInboxSentCount().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/sent/count".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.CountDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get sent email count in inbox
     */
    InboxControllerApi.prototype.getInboxSentCount = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxSentCountRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns an inbox\'s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
     * Get Inbox Sent Emails
     * @deprecated
     */
    InboxControllerApi.prototype.getInboxSentEmailsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling getInboxSentEmails().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/sent".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageSentEmailProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Returns an inbox\'s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
     * Get Inbox Sent Emails
     * @deprecated
     */
    InboxControllerApi.prototype.getInboxSentEmails = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxSentEmailsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get all inbox tags
     * Get inbox tags
     */
    InboxControllerApi.prototype.getInboxTagsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/tags",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response)];
                }
            });
        });
    };
    /**
     * Get all inbox tags
     * Get inbox tags
     */
    InboxControllerApi.prototype.getInboxTags = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxTagsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get all inbox tags paginated
     * Get inbox tags paginated
     */
    InboxControllerApi.prototype.getInboxTagsPaginatedRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/tags/paginated",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageInboxTagsFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get all inbox tags paginated
     * Get inbox tags paginated
     */
    InboxControllerApi.prototype.getInboxTagsPaginated = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxTagsPaginatedRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List the inboxes you have created. Note use of the more advanced `getAllInboxes` is recommended and allows paginated access using a limit and sort parameter.
     * List Inboxes and email addresses
     * @deprecated
     */
    InboxControllerApi.prototype.getInboxesRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['excludeCatchAllInboxes'] != null) {
                            queryParameters['excludeCatchAllInboxes'] = requestParameters['excludeCatchAllInboxes'];
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        if (requestParameters['include'] != null) {
                            queryParameters['include'] = requestParameters['include'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(index_1.InboxDtoFromJSON); })];
                }
            });
        });
    };
    /**
     * List the inboxes you have created. Note use of the more advanced `getAllInboxes` is recommended and allows paginated access using a limit and sort parameter.
     * List Inboxes and email addresses
     * @deprecated
     */
    InboxControllerApi.prototype.getInboxes = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxesRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get all inboxes for a given inbox tag
     * Get inboxes for a tag
     */
    InboxControllerApi.prototype.getInboxesByTagRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['tag'] == null) {
                            throw new runtime.RequiredError('tag', 'Required parameter "tag" was null or undefined when calling getInboxesByTag().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        if (requestParameters['tag'] != null) {
                            queryParameters['tag'] = requestParameters['tag'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/tags/inboxes",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageInboxProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get all inboxes for a given inbox tag
     * Get inboxes for a tag
     */
    InboxControllerApi.prototype.getInboxesByTag = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getInboxesByTagRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get the newest email in an inbox or wait for one to arrive
     * Get latest email in an inbox. Use `WaitForController` to get emails that may not have arrived yet.
     */
    InboxControllerApi.prototype.getLatestEmailInInboxRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling getLatestEmailInInbox().');
                        }
                        if (requestParameters['timeoutMillis'] == null) {
                            throw new runtime.RequiredError('timeoutMillis', 'Required parameter "timeoutMillis" was null or undefined when calling getLatestEmailInInbox().');
                        }
                        queryParameters = {};
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        if (requestParameters['timeoutMillis'] != null) {
                            queryParameters['timeoutMillis'] = requestParameters['timeoutMillis'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/getLatestEmail",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.EmailFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get the newest email in an inbox or wait for one to arrive
     * Get latest email in an inbox. Use `WaitForController` to get emails that may not have arrived yet.
     */
    InboxControllerApi.prototype.getLatestEmailInInbox = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getLatestEmailInInboxRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List organization inboxes in paginated form. These are inboxes created with `allowTeamAccess` flag enabled. Organization inboxes are `readOnly` for non-admin users. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time).
     * List Organization Inboxes Paginated
     * @deprecated
     */
    InboxControllerApi.prototype.getOrganizationInboxesRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/organization",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageOrganizationInboxProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * List organization inboxes in paginated form. These are inboxes created with `allowTeamAccess` flag enabled. Organization inboxes are `readOnly` for non-admin users. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time).
     * List Organization Inboxes Paginated
     * @deprecated
     */
    InboxControllerApi.prototype.getOrganizationInboxes = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getOrganizationInboxesRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List inboxes that have sent emails
     * List all inboxes with sent emails
     */
    InboxControllerApi.prototype.getOutboxesRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/outboxes",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageInboxProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * List inboxes that have sent emails
     * List all inboxes with sent emails
     */
    InboxControllerApi.prototype.getOutboxes = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getOutboxesRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get a scheduled email job details.
     * Get a scheduled email job
     */
    InboxControllerApi.prototype.getScheduledJobRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['jobId'] == null) {
                            throw new runtime.RequiredError('jobId', 'Required parameter "jobId" was null or undefined when calling getScheduledJob().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/scheduled-jobs/{jobId}".replace("{".concat("jobId", "}"), encodeURIComponent(String(requestParameters['jobId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ScheduledJobDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get a scheduled email job details.
     * Get a scheduled email job
     */
    InboxControllerApi.prototype.getScheduledJob = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getScheduledJobRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Schedule sending of emails using scheduled jobs.
     * Get all scheduled email sending jobs for the inbox
     */
    InboxControllerApi.prototype.getScheduledJobsByInboxIdRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling getScheduledJobsByInboxId().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/scheduled-jobs".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageScheduledJobsFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Schedule sending of emails using scheduled jobs.
     * Get all scheduled email sending jobs for the inbox
     */
    InboxControllerApi.prototype.getScheduledJobsByInboxId = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getScheduledJobsByInboxIdRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get SMTP access usernames and passwords
     */
    InboxControllerApi.prototype.getSmtpAccessRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/smtp-access",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SmtpAccessDetailsFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get SMTP access usernames and passwords
     */
    InboxControllerApi.prototype.getSmtpAccess = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSmtpAccessRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns whether an email address is available
     * Is email address available
     */
    InboxControllerApi.prototype.isEmailAddressAvailableRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['emailAddress'] == null) {
                            throw new runtime.RequiredError('emailAddress', 'Required parameter "emailAddress" was null or undefined when calling isEmailAddressAvailable().');
                        }
                        queryParameters = {};
                        if (requestParameters['emailAddress'] != null) {
                            queryParameters['emailAddress'] = requestParameters['emailAddress'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/available",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.EmailAvailableResultFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Returns whether an email address is available
     * Is email address available
     */
    InboxControllerApi.prototype.isEmailAddressAvailable = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.isEmailAddressAvailableRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List all rulesets attached to an inbox
     * List inbox rulesets
     */
    InboxControllerApi.prototype.listInboxRulesetsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling listInboxRulesets().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/rulesets".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageInboxRulesetDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * List all rulesets attached to an inbox
     * List inbox rulesets
     */
    InboxControllerApi.prototype.listInboxRulesets = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listInboxRulesetsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List all tracking pixels sent from an inbox
     * List inbox tracking pixels
     */
    InboxControllerApi.prototype.listInboxTrackingPixelsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling listInboxTrackingPixels().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/tracking-pixels".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageTrackingPixelProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * List all tracking pixels sent from an inbox
     * List inbox tracking pixels
     */
    InboxControllerApi.prototype.listInboxTrackingPixels = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.listInboxTrackingPixelsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Search inboxes and return in paginated form. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative `getInboxes` method returns a full list of inboxes but is limited to 100 results.
     * Search all inboxes and return matching inboxes
     */
    InboxControllerApi.prototype.searchInboxesRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['searchInboxesOptions'] == null) {
                            throw new runtime.RequiredError('searchInboxesOptions', 'Required parameter "searchInboxesOptions" was null or undefined when calling searchInboxes().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/search",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.SearchInboxesOptionsToJSON)(requestParameters['searchInboxesOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageInboxProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Search inboxes and return in paginated form. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative `getInboxes` method returns a full list of inboxes but is limited to 100 results.
     * Search all inboxes and return matching inboxes
     */
    InboxControllerApi.prototype.searchInboxes = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.searchInboxesRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Send an email from an inbox\'s email address.  The request body should contain the `SendEmailOptions` that include recipients, attachments, body etc. See `SendEmailOptions` for all available properties. Note the `inboxId` refers to the inbox\'s id not the inbox\'s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method `sendEmailAndConfirm`.
     * Send Email
     */
    InboxControllerApi.prototype.sendEmailRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling sendEmail().');
                        }
                        if (requestParameters['sendEmailOptions'] == null) {
                            throw new runtime.RequiredError('sendEmailOptions', 'Required parameter "sendEmailOptions" was null or undefined when calling sendEmail().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.SendEmailOptionsToJSON)(requestParameters['sendEmailOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Send an email from an inbox\'s email address.  The request body should contain the `SendEmailOptions` that include recipients, attachments, body etc. See `SendEmailOptions` for all available properties. Note the `inboxId` refers to the inbox\'s id not the inbox\'s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method `sendEmailAndConfirm`.
     * Send Email
     */
    InboxControllerApi.prototype.sendEmail = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sendEmailRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Sister method for standard `sendEmail` method with the benefit of returning a `SentEmail` entity confirming the successful sending of the email with a link to the sent object created for it.
     * Send email and return sent confirmation
     */
    InboxControllerApi.prototype.sendEmailAndConfirmRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling sendEmailAndConfirm().');
                        }
                        if (requestParameters['sendEmailOptions'] == null) {
                            throw new runtime.RequiredError('sendEmailOptions', 'Required parameter "sendEmailOptions" was null or undefined when calling sendEmailAndConfirm().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/confirm".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.SendEmailOptionsToJSON)(requestParameters['sendEmailOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SentEmailDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Sister method for standard `sendEmail` method with the benefit of returning a `SentEmail` entity confirming the successful sending of the email with a link to the sent object created for it.
     * Send email and return sent confirmation
     */
    InboxControllerApi.prototype.sendEmailAndConfirm = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sendEmailAndConfirmRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Send an email using a queue. Will place the email onto a queue that will then be processed and sent. Use this queue method to enable any failed email sending to be recovered. This will prevent lost emails when sending if your account encounters a block or payment issue.
     * Send email with queue
     */
    InboxControllerApi.prototype.sendEmailWithQueueRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling sendEmailWithQueue().');
                        }
                        if (requestParameters['validateBeforeEnqueue'] == null) {
                            throw new runtime.RequiredError('validateBeforeEnqueue', 'Required parameter "validateBeforeEnqueue" was null or undefined when calling sendEmailWithQueue().');
                        }
                        if (requestParameters['sendEmailOptions'] == null) {
                            throw new runtime.RequiredError('sendEmailOptions', 'Required parameter "sendEmailOptions" was null or undefined when calling sendEmailWithQueue().');
                        }
                        queryParameters = {};
                        if (requestParameters['validateBeforeEnqueue'] != null) {
                            queryParameters['validateBeforeEnqueue'] = requestParameters['validateBeforeEnqueue'];
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/with-queue".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.SendEmailOptionsToJSON)(requestParameters['sendEmailOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Send an email using a queue. Will place the email onto a queue that will then be processed and sent. Use this queue method to enable any failed email sending to be recovered. This will prevent lost emails when sending if your account encounters a block or payment issue.
     * Send email with queue
     */
    InboxControllerApi.prototype.sendEmailWithQueue = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sendEmailWithQueueRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Send email using an SMTP envelope containing RCPT TO, MAIL FROM, and a SMTP BODY.
     * Send email using an SMTP mail envelope and message body and return sent confirmation
     */
    InboxControllerApi.prototype.sendSmtpEnvelopeRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling sendSmtpEnvelope().');
                        }
                        if (requestParameters['sendSMTPEnvelopeOptions'] == null) {
                            throw new runtime.RequiredError('sendSMTPEnvelopeOptions', 'Required parameter "sendSMTPEnvelopeOptions" was null or undefined when calling sendSmtpEnvelope().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/smtp-envelope".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.SendSMTPEnvelopeOptionsToJSON)(requestParameters['sendSMTPEnvelopeOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SentEmailDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Send email using an SMTP envelope containing RCPT TO, MAIL FROM, and a SMTP BODY.
     * Send email using an SMTP mail envelope and message body and return sent confirmation
     */
    InboxControllerApi.prototype.sendSmtpEnvelope = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sendSmtpEnvelopeRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Send an inbox a test email to test email receiving is working
     * Send a test email to inbox
     */
    InboxControllerApi.prototype.sendTestEmailRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling sendTestEmail().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/send-test-email".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Send an inbox a test email to test email receiving is working
     * Send a test email to inbox
     */
    InboxControllerApi.prototype.sendTestEmail = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sendTestEmailRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Send an email using a delay. Will place the email onto a scheduler that will then be processed and sent. Use delays to schedule email sending.
     * Send email with with delay or schedule
     */
    InboxControllerApi.prototype.sendWithScheduleRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling sendWithSchedule().');
                        }
                        if (requestParameters['sendEmailOptions'] == null) {
                            throw new runtime.RequiredError('sendEmailOptions', 'Required parameter "sendEmailOptions" was null or undefined when calling sendWithSchedule().');
                        }
                        queryParameters = {};
                        if (requestParameters['sendAtTimestamp'] != null) {
                            queryParameters['sendAtTimestamp'] = requestParameters['sendAtTimestamp'].toISOString();
                        }
                        if (requestParameters['sendAtNowPlusSeconds'] != null) {
                            queryParameters['sendAtNowPlusSeconds'] = requestParameters['sendAtNowPlusSeconds'];
                        }
                        if (requestParameters['validateBeforeEnqueue'] != null) {
                            queryParameters['validateBeforeEnqueue'] = requestParameters['validateBeforeEnqueue'];
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/with-schedule".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.SendEmailOptionsToJSON)(requestParameters['sendEmailOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ScheduledJobDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Send an email using a delay. Will place the email onto a scheduler that will then be processed and sent. Use delays to schedule email sending.
     * Send email with with delay or schedule
     */
    InboxControllerApi.prototype.sendWithSchedule = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sendWithScheduleRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Set and return new favorite state for an inbox
     * Set inbox favourited state
     */
    InboxControllerApi.prototype.setInboxFavouritedRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling setInboxFavourited().');
                        }
                        if (requestParameters['setInboxFavouritedOptions'] == null) {
                            throw new runtime.RequiredError('setInboxFavouritedOptions', 'Required parameter "setInboxFavouritedOptions" was null or undefined when calling setInboxFavourited().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}/favourite".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'PUT',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.SetInboxFavouritedOptionsToJSON)(requestParameters['setInboxFavouritedOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.InboxDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Set and return new favorite state for an inbox
     * Set inbox favourited state
     */
    InboxControllerApi.prototype.setInboxFavourited = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.setInboxFavouritedRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update IMAP access usernames and passwords
     */
    InboxControllerApi.prototype.updateImapAccessRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['updateImapAccessOptions'] == null) {
                            throw new runtime.RequiredError('updateImapAccessOptions', 'Required parameter "updateImapAccessOptions" was null or undefined when calling updateImapAccess().');
                        }
                        queryParameters = {};
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/imap-access",
                            method: 'PATCH',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.UpdateImapAccessOptionsToJSON)(requestParameters['updateImapAccessOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Update IMAP access usernames and passwords
     */
    InboxControllerApi.prototype.updateImapAccess = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateImapAccessRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Update editable fields on an inbox
     * Update Inbox. Change name and description. Email address is not editable.
     */
    InboxControllerApi.prototype.updateInboxRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['inboxId'] == null) {
                            throw new runtime.RequiredError('inboxId', 'Required parameter "inboxId" was null or undefined when calling updateInbox().');
                        }
                        if (requestParameters['updateInboxOptions'] == null) {
                            throw new runtime.RequiredError('updateInboxOptions', 'Required parameter "updateInboxOptions" was null or undefined when calling updateInbox().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/{inboxId}".replace("{".concat("inboxId", "}"), encodeURIComponent(String(requestParameters['inboxId']))),
                            method: 'PATCH',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.UpdateInboxOptionsToJSON)(requestParameters['updateInboxOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.InboxDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Update editable fields on an inbox
     * Update Inbox. Change name and description. Email address is not editable.
     */
    InboxControllerApi.prototype.updateInbox = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateInboxRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update SMTP access usernames and passwords
     */
    InboxControllerApi.prototype.updateSmtpAccessRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['updateSmtpAccessOptions'] == null) {
                            throw new runtime.RequiredError('updateSmtpAccessOptions', 'Required parameter "updateSmtpAccessOptions" was null or undefined when calling updateSmtpAccess().');
                        }
                        queryParameters = {};
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/inboxes/smtp-access",
                            method: 'PATCH',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.UpdateSmtpAccessOptionsToJSON)(requestParameters['updateSmtpAccessOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Update SMTP access usernames and passwords
     */
    InboxControllerApi.prototype.updateSmtpAccess = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateSmtpAccessRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return InboxControllerApi;
}(runtime.BaseAPI));
exports.InboxControllerApi = InboxControllerApi;
/**
 * @export
 */
exports.CreateInboxInboxTypeEnum = {
    HTTP_INBOX: 'HTTP_INBOX',
    SMTP_INBOX: 'SMTP_INBOX'
};
/**
 * @export
 */
exports.GetAllInboxesSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetAllInboxesInboxTypeEnum = {
    HTTP_INBOX: 'HTTP_INBOX',
    SMTP_INBOX: 'SMTP_INBOX'
};
/**
 * @export
 */
exports.GetAllInboxesInboxFunctionEnum = {
    ALIAS: 'ALIAS',
    THREAD: 'THREAD',
    CATCH_ALL: 'CATCH_ALL',
    CONNECTOR: 'CONNECTOR',
    ACCOUNT: 'ACCOUNT',
    GUEST: 'GUEST'
};
/**
 * @export
 */
exports.GetAllInboxesOffsetPaginatedSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetAllInboxesOffsetPaginatedInboxTypeEnum = {
    HTTP_INBOX: 'HTTP_INBOX',
    SMTP_INBOX: 'SMTP_INBOX'
};
/**
 * @export
 */
exports.GetAllInboxesOffsetPaginatedInboxFunctionEnum = {
    ALIAS: 'ALIAS',
    THREAD: 'THREAD',
    CATCH_ALL: 'CATCH_ALL',
    CONNECTOR: 'CONNECTOR',
    ACCOUNT: 'ACCOUNT',
    GUEST: 'GUEST'
};
/**
 * @export
 */
exports.GetAllPlusAddressesSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetAllScheduledJobsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetDeliveryStatusesByInboxIdSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetEmailsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetInboxEmailsPaginatedSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetInboxPlusAddressEmailsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetInboxPlusAddressEmailsForPlusAddressIdSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetInboxPlusAddressesSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetInboxSentEmailsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetInboxTagsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetInboxTagsPaginatedSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetInboxesSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetInboxesByTagSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetOrganizationInboxesSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetOutboxesSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetScheduledJobsByInboxIdSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.ListInboxRulesetsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.ListInboxTrackingPixelsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
