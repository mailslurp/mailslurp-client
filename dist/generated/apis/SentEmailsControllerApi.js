"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetSentOrganizationEmailsSortEnum = exports.GetSentEmailsWithQueueResultsSortEnum = exports.GetSentEmailsSortEnum = exports.GetSentEmailTrackingPixelsSortEnum = exports.GetSentDeliveryStatusesBySentIdSortEnum = exports.GetSentDeliveryStatusesSortEnum = exports.GetAllSentTrackingPixelsSortEnum = exports.SentEmailsControllerApi = void 0;
var runtime = __importStar(require("../runtime"));
var index_1 = require("../models/index");
/**
 *
 */
var SentEmailsControllerApi = /** @class */ (function (_super) {
    __extends(SentEmailsControllerApi, _super);
    function SentEmailsControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete all sent email receipts
     */
    SentEmailsControllerApi.prototype.deleteAllSentEmailsRaw = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/sent",
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Delete all sent email receipts
     */
    SentEmailsControllerApi.prototype.deleteAllSentEmails = function (initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteAllSentEmailsRaw(initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Delete sent email receipt
     */
    SentEmailsControllerApi.prototype.deleteSentEmailRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling deleteSentEmail().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/sent/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id']))),
                            method: 'DELETE',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Delete sent email receipt
     */
    SentEmailsControllerApi.prototype.deleteSentEmail = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteSentEmailRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get all sent email tracking pixels in paginated form
     */
    SentEmailsControllerApi.prototype.getAllSentTrackingPixelsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/sent/tracking-pixels",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageTrackingPixelProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get all sent email tracking pixels in paginated form
     */
    SentEmailsControllerApi.prototype.getAllSentTrackingPixels = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAllSentTrackingPixelsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns a raw, unparsed, and unprocessed sent email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawSentEmailJson endpoint
     * Get raw sent email string. Returns unparsed raw SMTP message with headers and body.
     */
    SentEmailsControllerApi.prototype.getRawSentEmailContentsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['emailId'] == null) {
                            throw new runtime.RequiredError('emailId', 'Required parameter "emailId" was null or undefined when calling getRawSentEmailContents().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/sent/{emailId}/raw".replace("{".concat("emailId", "}"), encodeURIComponent(String(requestParameters['emailId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Returns a raw, unparsed, and unprocessed sent email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawSentEmailJson endpoint
     * Get raw sent email string. Returns unparsed raw SMTP message with headers and body.
     */
    SentEmailsControllerApi.prototype.getRawSentEmailContents = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRawSentEmailContentsRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Returns a raw, unparsed, and unprocessed sent email wrapped in a JSON response object for easier handling when compared with the getRawSentEmail text/plain response
     * Get raw sent email in JSON. Unparsed SMTP message in JSON wrapper format.
     */
    SentEmailsControllerApi.prototype.getRawSentEmailJsonRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['emailId'] == null) {
                            throw new runtime.RequiredError('emailId', 'Required parameter "emailId" was null or undefined when calling getRawSentEmailJson().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/sent/{emailId}/raw/json".replace("{".concat("emailId", "}"), encodeURIComponent(String(requestParameters['emailId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.RawEmailJsonFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Returns a raw, unparsed, and unprocessed sent email wrapped in a JSON response object for easier handling when compared with the getRawSentEmail text/plain response
     * Get raw sent email in JSON. Unparsed SMTP message in JSON wrapper format.
     */
    SentEmailsControllerApi.prototype.getRawSentEmailJson = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getRawSentEmailJsonRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get a sent email delivery status
     */
    SentEmailsControllerApi.prototype.getSentDeliveryStatusRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['deliveryId'] == null) {
                            throw new runtime.RequiredError('deliveryId', 'Required parameter "deliveryId" was null or undefined when calling getSentDeliveryStatus().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/sent/delivery-status/{deliveryId}".replace("{".concat("deliveryId", "}"), encodeURIComponent(String(requestParameters['deliveryId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.DeliveryStatusDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get a sent email delivery status
     */
    SentEmailsControllerApi.prototype.getSentDeliveryStatus = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSentDeliveryStatusRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get all sent email delivery statuses
     */
    SentEmailsControllerApi.prototype.getSentDeliveryStatusesRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/sent/delivery-status",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageDeliveryStatusFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get all sent email delivery statuses
     */
    SentEmailsControllerApi.prototype.getSentDeliveryStatuses = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSentDeliveryStatusesRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get all sent email delivery statuses
     */
    SentEmailsControllerApi.prototype.getSentDeliveryStatusesBySentIdRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['sentId'] == null) {
                            throw new runtime.RequiredError('sentId', 'Required parameter "sentId" was null or undefined when calling getSentDeliveryStatusesBySentId().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/sent/{sentId}/delivery-status".replace("{".concat("sentId", "}"), encodeURIComponent(String(requestParameters['sentId']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageDeliveryStatusFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get all sent email delivery statuses
     */
    SentEmailsControllerApi.prototype.getSentDeliveryStatusesBySentId = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSentDeliveryStatusesBySentIdRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get sent email receipt
     */
    SentEmailsControllerApi.prototype.getSentEmailRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling getSentEmail().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/sent/{id}".replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.SentEmailDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get sent email receipt
     */
    SentEmailsControllerApi.prototype.getSentEmail = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSentEmailRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get sent email HTML content
     */
    SentEmailsControllerApi.prototype.getSentEmailHTMLContentRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling getSentEmailHTMLContent().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/sent/{id}/html".replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        if (this.isJsonMime(response.headers.get('content-type'))) {
                            return [2 /*return*/, new runtime.JSONApiResponse(response)];
                        }
                        else {
                            return [2 /*return*/, new runtime.TextApiResponse(response)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get sent email HTML content
     */
    SentEmailsControllerApi.prototype.getSentEmailHTMLContent = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSentEmailHTMLContentRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get a list of URLs for sent email content as text/html or raw SMTP message for viewing the message in a browser.
     * Get sent email URL for viewing in browser or downloading
     */
    SentEmailsControllerApi.prototype.getSentEmailPreviewURLsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling getSentEmailPreviewURLs().');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/sent/{id}/urls".replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.EmailPreviewUrlsFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get a list of URLs for sent email content as text/html or raw SMTP message for viewing the message in a browser.
     * Get sent email URL for viewing in browser or downloading
     */
    SentEmailsControllerApi.prototype.getSentEmailPreviewURLs = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSentEmailPreviewURLsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get all tracking pixels for a sent email in paginated form
     */
    SentEmailsControllerApi.prototype.getSentEmailTrackingPixelsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['id'] == null) {
                            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling getSentEmailTrackingPixels().');
                        }
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/sent/{id}/tracking-pixels".replace("{".concat("id", "}"), encodeURIComponent(String(requestParameters['id']))),
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageTrackingPixelProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get all tracking pixels for a sent email in paginated form
     */
    SentEmailsControllerApi.prototype.getSentEmailTrackingPixels = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSentEmailTrackingPixelsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get all sent emails in paginated form
     */
    SentEmailsControllerApi.prototype.getSentEmailsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/sent",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageSentEmailProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get all sent emails in paginated form
     */
    SentEmailsControllerApi.prototype.getSentEmails = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSentEmailsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get results of email sent with queues in paginated form
     */
    SentEmailsControllerApi.prototype.getSentEmailsWithQueueResultsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/sent/queue-results",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageSentEmailWithQueueProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get results of email sent with queues in paginated form
     */
    SentEmailsControllerApi.prototype.getSentEmailsWithQueueResults = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSentEmailsWithQueueResultsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get all sent organization emails in paginated form
     */
    SentEmailsControllerApi.prototype.getSentOrganizationEmailsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        if (requestParameters['page'] != null) {
                            queryParameters['page'] = requestParameters['page'];
                        }
                        if (requestParameters['size'] != null) {
                            queryParameters['size'] = requestParameters['size'];
                        }
                        if (requestParameters['sort'] != null) {
                            queryParameters['sort'] = requestParameters['sort'];
                        }
                        if (requestParameters['searchFilter'] != null) {
                            queryParameters['searchFilter'] = requestParameters['searchFilter'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/sent/organization",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.PageSentEmailProjectionFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get all sent organization emails in paginated form
     */
    SentEmailsControllerApi.prototype.getSentOrganizationEmails = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getSentOrganizationEmailsRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Wait for delivery statuses
     */
    SentEmailsControllerApi.prototype.waitForDeliveryStatusesRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters['sentId'] != null) {
                            queryParameters['sentId'] = requestParameters['sentId'];
                        }
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        if (requestParameters['timeout'] != null) {
                            queryParameters['timeout'] = requestParameters['timeout'];
                        }
                        if (requestParameters['index'] != null) {
                            queryParameters['index'] = requestParameters['index'];
                        }
                        if (requestParameters['since'] != null) {
                            queryParameters['since'] = requestParameters['since'].toISOString();
                        }
                        if (requestParameters['before'] != null) {
                            queryParameters['before'] = requestParameters['before'].toISOString();
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/sent/delivery-status/wait-for",
                            method: 'GET',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.DeliveryStatusDtoFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Wait for delivery statuses
     */
    SentEmailsControllerApi.prototype.waitForDeliveryStatuses = function () {
        return __awaiter(this, arguments, void 0, function (requestParameters, initOverrides) {
            var response;
            if (requestParameters === void 0) { requestParameters = {}; }
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.waitForDeliveryStatusesRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return SentEmailsControllerApi;
}(runtime.BaseAPI));
exports.SentEmailsControllerApi = SentEmailsControllerApi;
/**
 * @export
 */
exports.GetAllSentTrackingPixelsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetSentDeliveryStatusesSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetSentDeliveryStatusesBySentIdSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetSentEmailTrackingPixelsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetSentEmailsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetSentEmailsWithQueueResultsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * @export
 */
exports.GetSentOrganizationEmailsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
