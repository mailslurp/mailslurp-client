/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ConsentStatusDto, CreateEmergencyAddressOptions, CreatePhoneNumberOptions, EmergencyAddress, EmergencyAddressDto, EmptyResponseDto, PagePhoneMessageThreadItemProjection, PagePhoneMessageThreadProjection, PagePhoneNumberProjection, PageSentSmsProjection, PageSmsProjection, PhoneNumberDto, PhoneNumberValidationDto, PhonePlanAvailability, PhonePlanDto, SentSmsDto, SetPhoneFavouritedOptions, SmsSendOptions, TestPhoneNumberOptions, UpdatePhoneNumberOptions, ValidatePhoneNumberOptions } from '../models';
export interface CreateEmergencyAddressRequest {
    createEmergencyAddressOptions: CreateEmergencyAddressOptions;
}
export interface CreatePhoneNumberRequest {
    createPhoneNumberOptions: CreatePhoneNumberOptions;
}
export interface DeleteEmergencyAddressRequest {
    addressId: string;
}
export interface DeletePhoneNumberRequest {
    phoneNumberId: string;
}
export interface GetAllPhoneMessageThreadsRequest {
    page?: number;
    size?: number;
}
export interface GetEmergencyAddressRequest {
    addressId: string;
}
export interface GetPhoneMessageThreadItemsRequest {
    phoneNumberId: string;
    otherNumber: string;
    page?: number;
    size?: number;
}
export interface GetPhoneMessageThreadsRequest {
    phoneNumberId: string;
    page?: number;
    size?: number;
}
export interface GetPhoneNumberRequest {
    phoneNumberId: string;
}
export interface GetPhoneNumberByNameRequest {
    name: string;
}
export interface GetPhoneNumberByPhoneNumberRequest {
    phoneNumber: string;
}
export interface GetPhoneNumbersRequest {
    phoneCountry?: GetPhoneNumbersPhoneCountryEnum;
    page?: number;
    size?: number;
    sort?: GetPhoneNumbersSortEnum;
    since?: Date;
    before?: Date;
    search?: string;
    include?: Array<string>;
    favourite?: boolean;
}
export interface GetSentSmsByPhoneNumberRequest {
    phoneNumberId: string;
    page?: number;
    size?: number;
    sort?: GetSentSmsByPhoneNumberSortEnum;
    since?: Date;
    before?: Date;
    search?: string;
}
export interface GetSmsByPhoneNumberRequest {
    phoneNumberId: string;
    page?: number;
    size?: number;
    sort?: GetSmsByPhoneNumberSortEnum;
    unreadOnly?: boolean;
    since?: Date;
    before?: Date;
    search?: string;
    favourite?: boolean;
}
export interface SendSmsFromPhoneNumberRequest {
    phoneNumberId: string;
    smsSendOptions: SmsSendOptions;
}
export interface SetConsentStatusRequest {
    agree: boolean;
}
export interface SetPhoneFavouritedRequest {
    phoneNumberId: string;
    setPhoneFavouritedOptions: SetPhoneFavouritedOptions;
}
export interface TestPhoneNumberSendSmsRequest {
    phoneNumberId: string;
    testPhoneNumberOptions: TestPhoneNumberOptions;
    xTestId?: string;
}
export interface UpdatePhoneNumberRequest {
    phoneNumberId: string;
    updatePhoneNumberOptions: UpdatePhoneNumberOptions;
}
export interface ValidatePhoneNumberRequest {
    validatePhoneNumberOptions: ValidatePhoneNumberOptions;
}
/**
 *
 */
export declare class PhoneControllerApi extends runtime.BaseAPI {
    /**
     * Add an emergency address to a phone number
     * Create an emergency address
     */
    createEmergencyAddressRaw(requestParameters: CreateEmergencyAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EmergencyAddress>>;
    /**
     * Add an emergency address to a phone number
     * Create an emergency address
     */
    createEmergencyAddress(requestParameters: CreateEmergencyAddressRequest, initOverrides?: RequestInit): Promise<EmergencyAddress>;
    /**
     * Create new phone number
     * Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation.
     */
    createPhoneNumberRaw(requestParameters: CreatePhoneNumberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PhoneNumberDto>>;
    /**
     * Create new phone number
     * Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation.
     */
    createPhoneNumber(requestParameters: CreatePhoneNumberRequest, initOverrides?: RequestInit): Promise<PhoneNumberDto>;
    /**
     * Delete an emergency address
     * Delete an emergency address
     */
    deleteEmergencyAddressRaw(requestParameters: DeleteEmergencyAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EmptyResponseDto>>;
    /**
     * Delete an emergency address
     * Delete an emergency address
     */
    deleteEmergencyAddress(requestParameters: DeleteEmergencyAddressRequest, initOverrides?: RequestInit): Promise<EmptyResponseDto>;
    /**
     * Remove phone number from account
     * Delete a phone number
     */
    deletePhoneNumberRaw(requestParameters: DeletePhoneNumberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Remove phone number from account
     * Delete a phone number
     */
    deletePhoneNumber(requestParameters: DeletePhoneNumberRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * List all message threads for all phones
     * Get the latest messages for all phones
     */
    getAllPhoneMessageThreadsRaw(requestParameters: GetAllPhoneMessageThreadsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PagePhoneMessageThreadProjection>>;
    /**
     * List all message threads for all phones
     * Get the latest messages for all phones
     */
    getAllPhoneMessageThreads(requestParameters: GetAllPhoneMessageThreadsRequest, initOverrides?: RequestInit): Promise<PagePhoneMessageThreadProjection>;
    /**
     * Get the status of phone usage consent
     * Get consent status
     */
    getConsentStatusRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<ConsentStatusDto>>;
    /**
     * Get the status of phone usage consent
     * Get consent status
     */
    getConsentStatus(initOverrides?: RequestInit): Promise<ConsentStatusDto>;
    /**
     * Fetch an emergency address by ID
     * Get an emergency address
     */
    getEmergencyAddressRaw(requestParameters: GetEmergencyAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EmergencyAddress>>;
    /**
     * Fetch an emergency address by ID
     * Get an emergency address
     */
    getEmergencyAddress(requestParameters: GetEmergencyAddressRequest, initOverrides?: RequestInit): Promise<EmergencyAddress>;
    /**
     * List emergency addresses
     * Get emergency addresses
     */
    getEmergencyAddressesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<EmergencyAddressDto>>>;
    /**
     * List emergency addresses
     * Get emergency addresses
     */
    getEmergencyAddresses(initOverrides?: RequestInit): Promise<Array<EmergencyAddressDto>>;
    /**
     * List message thread messages for a phone message thread
     * Get messages in a phone thread
     */
    getPhoneMessageThreadItemsRaw(requestParameters: GetPhoneMessageThreadItemsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PagePhoneMessageThreadItemProjection>>;
    /**
     * List message thread messages for a phone message thread
     * Get messages in a phone thread
     */
    getPhoneMessageThreadItems(requestParameters: GetPhoneMessageThreadItemsRequest, initOverrides?: RequestInit): Promise<PagePhoneMessageThreadItemProjection>;
    /**
     * List message threads for a phone
     * Get the latest message preview for a thread
     */
    getPhoneMessageThreadsRaw(requestParameters: GetPhoneMessageThreadsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PagePhoneMessageThreadProjection>>;
    /**
     * List message threads for a phone
     * Get the latest message preview for a thread
     */
    getPhoneMessageThreads(requestParameters: GetPhoneMessageThreadsRequest, initOverrides?: RequestInit): Promise<PagePhoneMessageThreadProjection>;
    /**
     * Get a phone number by ID
     * Get a phone number by ID
     */
    getPhoneNumberRaw(requestParameters: GetPhoneNumberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PhoneNumberDto>>;
    /**
     * Get a phone number by ID
     * Get a phone number by ID
     */
    getPhoneNumber(requestParameters: GetPhoneNumberRequest, initOverrides?: RequestInit): Promise<PhoneNumberDto>;
    /**
     * Get a phone number by name
     * Get a phone number by name
     */
    getPhoneNumberByNameRaw(requestParameters: GetPhoneNumberByNameRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PhoneNumberDto>>;
    /**
     * Get a phone number by name
     * Get a phone number by name
     */
    getPhoneNumberByName(requestParameters: GetPhoneNumberByNameRequest, initOverrides?: RequestInit): Promise<PhoneNumberDto>;
    /**
     * Get a phone number by phone number
     * Get a phone number by phone number
     */
    getPhoneNumberByPhoneNumberRaw(requestParameters: GetPhoneNumberByPhoneNumberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PhoneNumberDto>>;
    /**
     * Get a phone number by phone number
     * Get a phone number by phone number
     */
    getPhoneNumberByPhoneNumber(requestParameters: GetPhoneNumberByPhoneNumberRequest, initOverrides?: RequestInit): Promise<PhoneNumberDto>;
    /**
     * List phone numbers for account
     * Get phone numbers
     */
    getPhoneNumbersRaw(requestParameters: GetPhoneNumbersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PagePhoneNumberProjection>>;
    /**
     * List phone numbers for account
     * Get phone numbers
     */
    getPhoneNumbers(requestParameters: GetPhoneNumbersRequest, initOverrides?: RequestInit): Promise<PagePhoneNumberProjection>;
    /**
     * Get phone number plans
     * Get phone plans
     */
    getPhonePlansRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PhonePlanDto>>>;
    /**
     * Get phone number plans
     * Get phone plans
     */
    getPhonePlans(initOverrides?: RequestInit): Promise<Array<PhonePlanDto>>;
    /**
     * Get phone plans availability
     */
    getPhonePlansAvailabilityRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<PhonePlanAvailability>>;
    /**
     * Get phone plans availability
     */
    getPhonePlansAvailability(initOverrides?: RequestInit): Promise<PhonePlanAvailability>;
    /**
     * Get sent SMS messages for a phone number
     * List sent TXT messages for a phone number
     */
    getSentSmsByPhoneNumberRaw(requestParameters: GetSentSmsByPhoneNumberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PageSentSmsProjection>>;
    /**
     * Get sent SMS messages for a phone number
     * List sent TXT messages for a phone number
     */
    getSentSmsByPhoneNumber(requestParameters: GetSentSmsByPhoneNumberRequest, initOverrides?: RequestInit): Promise<PageSentSmsProjection>;
    /**
     * Get SMS messages for a phone number
     * List SMS messages for a phone number
     */
    getSmsByPhoneNumberRaw(requestParameters: GetSmsByPhoneNumberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PageSmsProjection>>;
    /**
     * Get SMS messages for a phone number
     * List SMS messages for a phone number
     */
    getSmsByPhoneNumber(requestParameters: GetSmsByPhoneNumberRequest, initOverrides?: RequestInit): Promise<PageSmsProjection>;
    /**
     * Send SMS from a phone number
     * Send TXT message from a phone number
     */
    sendSmsFromPhoneNumberRaw(requestParameters: SendSmsFromPhoneNumberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SentSmsDto>>;
    /**
     * Send SMS from a phone number
     * Send TXT message from a phone number
     */
    sendSmsFromPhoneNumber(requestParameters: SendSmsFromPhoneNumberRequest, initOverrides?: RequestInit): Promise<SentSmsDto>;
    /**
     * Give or revoke consent for phone usage
     * Set consent status
     */
    setConsentStatusRaw(requestParameters: SetConsentStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ConsentStatusDto>>;
    /**
     * Give or revoke consent for phone usage
     * Set consent status
     */
    setConsentStatus(requestParameters: SetConsentStatusRequest, initOverrides?: RequestInit): Promise<ConsentStatusDto>;
    /**
     * Set and return new favorite state for a phone
     * Set phone favourited state
     */
    setPhoneFavouritedRaw(requestParameters: SetPhoneFavouritedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PhoneNumberDto>>;
    /**
     * Set and return new favorite state for a phone
     * Set phone favourited state
     */
    setPhoneFavourited(requestParameters: SetPhoneFavouritedRequest, initOverrides?: RequestInit): Promise<PhoneNumberDto>;
    /**
     * Test a phone number by sending an SMS to it
     * Test sending an SMS to a number
     */
    testPhoneNumberSendSmsRaw(requestParameters: TestPhoneNumberSendSmsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Test a phone number by sending an SMS to it
     * Test sending an SMS to a number
     */
    testPhoneNumberSendSms(requestParameters: TestPhoneNumberSendSmsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Set field for phone number
     * Update a phone number
     */
    updatePhoneNumberRaw(requestParameters: UpdatePhoneNumberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PhoneNumberDto>>;
    /**
     * Set field for phone number
     * Update a phone number
     */
    updatePhoneNumber(requestParameters: UpdatePhoneNumberRequest, initOverrides?: RequestInit): Promise<PhoneNumberDto>;
    /**
     * Validate a phone number
     * Verify validity of a phone number
     */
    validatePhoneNumberRaw(requestParameters: ValidatePhoneNumberRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PhoneNumberValidationDto>>;
    /**
     * Validate a phone number
     * Verify validity of a phone number
     */
    validatePhoneNumber(requestParameters: ValidatePhoneNumberRequest, initOverrides?: RequestInit): Promise<PhoneNumberValidationDto>;
}
/**
 * @export
 * @enum {string}
 */
export declare enum GetPhoneNumbersPhoneCountryEnum {
    US = "US",
    GB = "GB",
    AU = "AU",
    CA = "CA",
    EE = "EE",
    HK = "HK",
    PL = "PL",
    CH = "CH",
    PT = "PT",
    NL = "NL",
    IL = "IL",
    SE = "SE"
}
/**
 * @export
 * @enum {string}
 */
export declare enum GetPhoneNumbersSortEnum {
    ASC = "ASC",
    DESC = "DESC"
}
/**
 * @export
 * @enum {string}
 */
export declare enum GetSentSmsByPhoneNumberSortEnum {
    ASC = "ASC",
    DESC = "DESC"
}
/**
 * @export
 * @enum {string}
 */
export declare enum GetSmsByPhoneNumberSortEnum {
    ASC = "ASC",
    DESC = "DESC"
}
