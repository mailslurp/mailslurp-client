/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { CreateTemplateOptions, PageTemplateProjection, TemplateDto, TemplatePreview, TemplateProjection } from '../models/index';
export interface CreateTemplateRequest {
    createTemplateOptions: CreateTemplateOptions;
}
export interface DeleteTemplateRequest {
    templateId: string;
}
export interface GetAllTemplatesRequest {
    page?: number;
    size?: number;
    sort?: GetAllTemplatesSortEnum;
    since?: Date;
    before?: Date;
}
export interface GetTemplateRequest {
    templateId: string;
}
export interface GetTemplatePreviewHtmlRequest {
    templateId: string;
}
export interface GetTemplatePreviewJsonRequest {
    templateId: string;
}
export interface UpdateTemplateRequest {
    templateId: string;
    createTemplateOptions: CreateTemplateOptions;
}
/**
 *
 */
export declare class TemplateControllerApi extends runtime.BaseAPI {
    /**
     * Create an email template with variables for use with templated transactional emails.
     * Create a Template
     */
    createTemplateRaw(requestParameters: CreateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateDto>>;
    /**
     * Create an email template with variables for use with templated transactional emails.
     * Create a Template
     */
    createTemplate(requestParameters: CreateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateDto>;
    /**
     * Delete template
     * Delete email template
     */
    deleteTemplateRaw(requestParameters: DeleteTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete template
     * Delete email template
     */
    deleteTemplate(requestParameters: DeleteTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Get all templates in paginated format
     * List templates
     */
    getAllTemplatesRaw(requestParameters: GetAllTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageTemplateProjection>>;
    /**
     * Get all templates in paginated format
     * List templates
     */
    getAllTemplates(requestParameters?: GetAllTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageTemplateProjection>;
    /**
     * Get email template
     * Get template
     */
    getTemplateRaw(requestParameters: GetTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateDto>>;
    /**
     * Get email template
     * Get template
     */
    getTemplate(requestParameters: GetTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateDto>;
    /**
     * Get email template preview with passed template variables in HTML format for browsers. Pass template variables as query params.
     * Get template preview HTML
     */
    getTemplatePreviewHtmlRaw(requestParameters: GetTemplatePreviewHtmlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;
    /**
     * Get email template preview with passed template variables in HTML format for browsers. Pass template variables as query params.
     * Get template preview HTML
     */
    getTemplatePreviewHtml(requestParameters: GetTemplatePreviewHtmlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;
    /**
     * Get email template preview with passed template variables in JSON format. Pass template variables as query params.
     * Get template preview Json
     */
    getTemplatePreviewJsonRaw(requestParameters: GetTemplatePreviewJsonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatePreview>>;
    /**
     * Get email template preview with passed template variables in JSON format. Pass template variables as query params.
     * Get template preview Json
     */
    getTemplatePreviewJson(requestParameters: GetTemplatePreviewJsonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatePreview>;
    /**
     * Get all templates
     * List templates
     */
    getTemplatesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TemplateProjection>>>;
    /**
     * Get all templates
     * List templates
     */
    getTemplates(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TemplateProjection>>;
    /**
     * Update email template
     * Update template
     */
    updateTemplateRaw(requestParameters: UpdateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateDto>>;
    /**
     * Update email template
     * Update template
     */
    updateTemplate(requestParameters: UpdateTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateDto>;
}
/**
 * @export
 */
export declare const GetAllTemplatesSortEnum: {
    readonly ASC: "ASC";
    readonly DESC: "DESC";
};
export type GetAllTemplatesSortEnum = typeof GetAllTemplatesSortEnum[keyof typeof GetAllTemplatesSortEnum];
