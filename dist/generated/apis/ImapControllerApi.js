"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImapControllerApi = void 0;
var runtime = __importStar(require("../runtime"));
var index_1 = require("../models/index");
/**
 *
 */
var ImapControllerApi = /** @class */ (function (_super) {
    __extends(ImapControllerApi, _super);
    function ImapControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Fetch message in an inbox
     */
    ImapControllerApi.prototype.imapServerFetchRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['seqNum'] == null) {
                            throw new runtime.RequiredError('seqNum', 'Required parameter "seqNum" was null or undefined when calling imapServerFetch().');
                        }
                        queryParameters = {};
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        if (requestParameters['seqNum'] != null) {
                            queryParameters['seqNum'] = requestParameters['seqNum'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/imap/server/fetch",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ImapServerFetchResultFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Fetch message in an inbox
     */
    ImapControllerApi.prototype.imapServerFetch = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.imapServerFetchRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get a message by email ID
     */
    ImapControllerApi.prototype.imapServerGetRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['emailId'] == null) {
                            throw new runtime.RequiredError('emailId', 'Required parameter "emailId" was null or undefined when calling imapServerGet().');
                        }
                        queryParameters = {};
                        if (requestParameters['emailId'] != null) {
                            queryParameters['emailId'] = requestParameters['emailId'];
                        }
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/imap/server/get",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ImapServerGetResultFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get a message by email ID
     */
    ImapControllerApi.prototype.imapServerGet = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.imapServerGetRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * List messages in an inbox
     */
    ImapControllerApi.prototype.imapServerListRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['imapServerListOptions'] == null) {
                            throw new runtime.RequiredError('imapServerListOptions', 'Required parameter "imapServerListOptions" was null or undefined when calling imapServerList().');
                        }
                        queryParameters = {};
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/imap/server/list",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.ImapServerListOptionsToJSON)(requestParameters['imapServerListOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ImapServerListResultFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * List messages in an inbox
     */
    ImapControllerApi.prototype.imapServerList = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.imapServerListRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Create a new mailbox if possible
     */
    ImapControllerApi.prototype.imapServerMailboxRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['name'] == null) {
                            throw new runtime.RequiredError('name', 'Required parameter "name" was null or undefined when calling imapServerMailbox().');
                        }
                        queryParameters = {};
                        if (requestParameters['name'] != null) {
                            queryParameters['name'] = requestParameters['name'];
                        }
                        headerParameters = {};
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/imap/server/mailbox",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ImapServerMailboxResultFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Create a new mailbox if possible
     */
    ImapControllerApi.prototype.imapServerMailbox = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.imapServerMailboxRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Search messages in an inbox
     */
    ImapControllerApi.prototype.imapServerSearchRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['imapServerSearchOptions'] == null) {
                            throw new runtime.RequiredError('imapServerSearchOptions', 'Required parameter "imapServerSearchOptions" was null or undefined when calling imapServerSearch().');
                        }
                        queryParameters = {};
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/imap/server/search",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.ImapServerSearchOptionsToJSON)(requestParameters['imapServerSearchOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ImapServerSearchResultFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Search messages in an inbox
     */
    ImapControllerApi.prototype.imapServerSearch = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.imapServerSearchRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get status for mailbox
     */
    ImapControllerApi.prototype.imapServerStatusRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['imapServerStatusOptions'] == null) {
                            throw new runtime.RequiredError('imapServerStatusOptions', 'Required parameter "imapServerStatusOptions" was null or undefined when calling imapServerStatus().');
                        }
                        queryParameters = {};
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/imap/server/status",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.ImapServerStatusOptionsToJSON)(requestParameters['imapServerStatusOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return (0, index_1.ImapServerStatusResultFromJSON)(jsonValue); })];
                }
            });
        });
    };
    /**
     * Get status for mailbox
     */
    ImapControllerApi.prototype.imapServerStatus = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.imapServerStatusRaw(requestParameters, initOverrides)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update message flags
     */
    ImapControllerApi.prototype.imapServerUpdateFlagsRaw = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, _a, _b, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (requestParameters['imapUpdateFlagsOptions'] == null) {
                            throw new runtime.RequiredError('imapUpdateFlagsOptions', 'Required parameter "imapUpdateFlagsOptions" was null or undefined when calling imapServerUpdateFlags().');
                        }
                        queryParameters = {};
                        if (requestParameters['inboxId'] != null) {
                            queryParameters['inboxId'] = requestParameters['inboxId'];
                        }
                        headerParameters = {};
                        headerParameters['Content-Type'] = 'application/json';
                        if (!(this.configuration && this.configuration.apiKey)) return [3 /*break*/, 2];
                        _a = headerParameters;
                        _b = "x-api-key";
                        return [4 /*yield*/, this.configuration.apiKey("x-api-key")];
                    case 1:
                        _a[_b] = _c.sent(); // API_KEY authentication
                        _c.label = 2;
                    case 2: return [4 /*yield*/, this.request({
                            path: "/imap/server/update-flags",
                            method: 'POST',
                            headers: headerParameters,
                            query: queryParameters,
                            body: (0, index_1.ImapUpdateFlagsOptionsToJSON)(requestParameters['imapUpdateFlagsOptions']),
                        }, initOverrides)];
                    case 3:
                        response = _c.sent();
                        return [2 /*return*/, new runtime.VoidApiResponse(response)];
                }
            });
        });
    };
    /**
     * Update message flags
     */
    ImapControllerApi.prototype.imapServerUpdateFlags = function (requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.imapServerUpdateFlagsRaw(requestParameters, initOverrides)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return ImapControllerApi;
}(runtime.BaseAPI));
exports.ImapControllerApi = ImapControllerApi;
