/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { EmailFeatureNames } from './EmailFeatureNames';
import type { EmailFeatureOverview } from './EmailFeatureOverview';
import type { EmailFeatureSupportStatusPercentage } from './EmailFeatureSupportStatusPercentage';
/**
 *
 * @export
 * @interface EmailFeatureSupportResult
 */
export interface EmailFeatureSupportResult {
    /**
     *
     * @type {EmailFeatureNames}
     * @memberof EmailFeatureSupportResult
     */
    names: EmailFeatureNames;
    /**
     *
     * @type {Set<string>}
     * @memberof EmailFeatureSupportResult
     */
    detectedFeatures: Set<EmailFeatureSupportResultDetectedFeaturesEnum>;
    /**
     *
     * @type {Array<EmailFeatureOverview>}
     * @memberof EmailFeatureSupportResult
     */
    featureOverviews: Array<EmailFeatureOverview>;
    /**
     *
     * @type {Array<EmailFeatureSupportStatusPercentage>}
     * @memberof EmailFeatureSupportResult
     */
    featurePercentages: Array<EmailFeatureSupportStatusPercentage>;
}
/**
 * @export
 */
export declare const EmailFeatureSupportResultDetectedFeaturesEnum: {
    readonly amp: "amp";
    readonly css_accent_color: "css-accent-color";
    readonly css_align_items: "css-align-items";
    readonly css_animation: "css-animation";
    readonly css_aspect_ratio: "css-aspect-ratio";
    readonly css_at_font_face: "css-at-font-face";
    readonly css_at_import: "css-at-import";
    readonly css_at_keyframes: "css-at-keyframes";
    readonly css_at_media: "css-at-media";
    readonly css_at_supports: "css-at-supports";
    readonly css_background_blend_mode: "css-background-blend-mode";
    readonly css_background_clip: "css-background-clip";
    readonly css_background_color: "css-background-color";
    readonly css_background_image: "css-background-image";
    readonly css_background_origin: "css-background-origin";
    readonly css_background_position: "css-background-position";
    readonly css_background_repeat: "css-background-repeat";
    readonly css_background_size: "css-background-size";
    readonly css_background: "css-background";
    readonly css_block_inline_size: "css-block-inline-size";
    readonly css_border_image: "css-border-image";
    readonly css_border_inline_block_individual: "css-border-inline-block-individual";
    readonly css_border_inline_block_longhand: "css-border-inline-block-longhand";
    readonly css_border_inline_block: "css-border-inline-block";
    readonly css_border_radius_logical: "css-border-radius-logical";
    readonly css_border_radius: "css-border-radius";
    readonly css_border: "css-border";
    readonly css_box_shadow: "css-box-shadow";
    readonly css_box_sizing: "css-box-sizing";
    readonly css_caption_side: "css-caption-side";
    readonly css_clip_path: "css-clip-path";
    readonly css_column_count: "css-column-count";
    readonly css_column_layout_properties: "css-column-layout-properties";
    readonly css_direction: "css-direction";
    readonly css_display_flex: "css-display-flex";
    readonly css_display_grid: "css-display-grid";
    readonly css_display_none: "css-display-none";
    readonly css_display: "css-display";
    readonly css_filter: "css-filter";
    readonly css_flex_direction: "css-flex-direction";
    readonly css_flex_wrap: "css-flex-wrap";
    readonly css_float: "css-float";
    readonly css_font_kerning: "css-font-kerning";
    readonly css_font_weight: "css-font-weight";
    readonly css_font: "css-font";
    readonly css_gap: "css-gap";
    readonly css_grid_template: "css-grid-template";
    readonly css_height: "css-height";
    readonly css_hyphens: "css-hyphens";
    readonly css_inline_size: "css-inline-size";
    readonly css_justify_content: "css-justify-content";
    readonly css_left_right_top_bottom: "css-left-right-top-bottom";
    readonly css_letter_spacing: "css-letter-spacing";
    readonly css_line_height: "css-line-height";
    readonly css_list_style_image: "css-list-style-image";
    readonly css_list_style_position: "css-list-style-position";
    readonly css_list_style_type: "css-list-style-type";
    readonly css_list_style: "css-list-style";
    readonly css_margin_block_start_end: "css-margin-block-start-end";
    readonly css_margin_inline_block: "css-margin-inline-block";
    readonly css_margin_inline_start_end: "css-margin-inline-start-end";
    readonly css_margin_inline: "css-margin-inline";
    readonly css_margin: "css-margin";
    readonly css_max_block_size: "css-max-block-size";
    readonly css_max_height: "css-max-height";
    readonly css_max_width: "css-max-width";
    readonly css_min_height: "css-min-height";
    readonly css_min_inline_size: "css-min-inline-size";
    readonly css_min_width: "css-min-width";
    readonly css_mix_blend_mode: "css-mix-blend-mode";
    readonly css_object_fit: "css-object-fit";
    readonly css_object_position: "css-object-position";
    readonly css_opacity: "css-opacity";
    readonly css_outline_offset: "css-outline-offset";
    readonly css_outline: "css-outline";
    readonly css_overflow_wrap: "css-overflow-wrap";
    readonly css_overflow: "css-overflow";
    readonly css_padding_block_start_end: "css-padding-block-start-end";
    readonly css_padding_inline_block: "css-padding-inline-block";
    readonly css_padding_inline_start_end: "css-padding-inline-start-end";
    readonly css_padding: "css-padding";
    readonly css_position: "css-position";
    readonly css_tab_size: "css-tab-size";
    readonly css_table_layout: "css-table-layout";
    readonly css_text_align_last: "css-text-align-last";
    readonly css_text_align: "css-text-align";
    readonly css_text_decoration_color: "css-text-decoration-color";
    readonly css_text_decoration_thickness: "css-text-decoration-thickness";
    readonly css_text_decoration: "css-text-decoration";
    readonly css_text_emphasis_position: "css-text-emphasis-position";
    readonly css_text_emphasis: "css-text-emphasis";
    readonly css_text_indent: "css-text-indent";
    readonly css_text_overflow: "css-text-overflow";
    readonly css_text_shadow: "css-text-shadow";
    readonly css_text_transform: "css-text-transform";
    readonly css_text_underline_offset: "css-text-underline-offset";
    readonly css_transform: "css-transform";
    readonly css_vertical_align: "css-vertical-align";
    readonly css_visibility: "css-visibility";
    readonly css_white_space: "css-white-space";
    readonly css_width: "css-width";
    readonly css_word_break: "css-word-break";
    readonly css_writing_mode: "css-writing-mode";
    readonly css_z_index: "css-z-index";
    readonly html_abbr: "html-abbr";
    readonly html_address: "html-address";
    readonly html_align: "html-align";
    readonly html_anchor_links: "html-anchor-links";
    readonly html_aria_describedby: "html-aria-describedby";
    readonly html_aria_hidden: "html-aria-hidden";
    readonly html_aria_label: "html-aria-label";
    readonly html_aria_labelledby: "html-aria-labelledby";
    readonly html_aria_live: "html-aria-live";
    readonly html_audio: "html-audio";
    readonly html_background: "html-background";
    readonly html_base: "html-base";
    readonly html_blockquote: "html-blockquote";
    readonly html_body: "html-body";
    readonly html_button_reset: "html-button-reset";
    readonly html_button_submit: "html-button-submit";
    readonly html_code: "html-code";
    readonly html_del: "html-del";
    readonly html_dfn: "html-dfn";
    readonly html_dialog: "html-dialog";
    readonly html_dir: "html-dir";
    readonly html_div: "html-div";
    readonly html_doctype: "html-doctype";
    readonly html_form: "html-form";
    readonly html_h1_h6: "html-h1-h6";
    readonly html_height: "html-height";
    readonly html_image_maps: "html-image-maps";
    readonly html_input_checkbox: "html-input-checkbox";
    readonly html_input_hidden: "html-input-hidden";
    readonly html_input_radio: "html-input-radio";
    readonly html_input_reset: "html-input-reset";
    readonly html_input_submit: "html-input-submit";
    readonly html_input_text: "html-input-text";
    readonly html_lang: "html-lang";
    readonly html_link: "html-link";
    readonly html_lists: "html-lists";
    readonly html_loading_attribute: "html-loading-attribute";
    readonly html_mailto_links: "html-mailto-links";
    readonly html_marquee: "html-marquee";
    readonly html_meter: "html-meter";
    readonly html_object: "html-object";
    readonly html_p: "html-p";
    readonly html_picture: "html-picture";
    readonly html_pre: "html-pre";
    readonly html_progress: "html-progress";
    readonly html_required: "html-required";
    readonly html_role: "html-role";
    readonly html_rp: "html-rp";
    readonly html_rt: "html-rt";
    readonly html_ruby: "html-ruby";
    readonly html_select: "html-select";
    readonly html_semantics: "html-semantics";
    readonly html_small: "html-small";
    readonly html_span: "html-span";
    readonly html_srcset: "html-srcset";
    readonly html_strike: "html-strike";
    readonly html_strong: "html-strong";
    readonly html_style: "html-style";
    readonly html_svg: "html-svg";
    readonly html_table: "html-table";
    readonly html_target: "html-target";
    readonly html_textarea: "html-textarea";
    readonly html_valign: "html-valign";
    readonly html_video: "html-video";
    readonly html_wbr: "html-wbr";
    readonly html_width: "html-width";
    readonly image_avif: "image-avif";
    readonly image_base64: "image-base64";
    readonly image_bmp: "image-bmp";
    readonly image_gif: "image-gif";
    readonly image_ico: "image-ico";
    readonly image_jpg: "image-jpg";
    readonly image_png: "image-png";
    readonly image_svg: "image-svg";
    readonly image_webp: "image-webp";
    readonly unsupported: "unsupported";
};
export type EmailFeatureSupportResultDetectedFeaturesEnum = typeof EmailFeatureSupportResultDetectedFeaturesEnum[keyof typeof EmailFeatureSupportResultDetectedFeaturesEnum];
/**
 * Check if a given object implements the EmailFeatureSupportResult interface.
 */
export declare function instanceOfEmailFeatureSupportResult(value: object): value is EmailFeatureSupportResult;
export declare function EmailFeatureSupportResultFromJSON(json: any): EmailFeatureSupportResult;
export declare function EmailFeatureSupportResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmailFeatureSupportResult;
export declare function EmailFeatureSupportResultToJSON(json: any): EmailFeatureSupportResult;
export declare function EmailFeatureSupportResultToJSONTyped(value?: EmailFeatureSupportResult | null, ignoreDiscriminator?: boolean): any;
