"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfFakeEmailPreview = instanceOfFakeEmailPreview;
exports.FakeEmailPreviewFromJSON = FakeEmailPreviewFromJSON;
exports.FakeEmailPreviewFromJSONTyped = FakeEmailPreviewFromJSONTyped;
exports.FakeEmailPreviewToJSON = FakeEmailPreviewToJSON;
exports.FakeEmailPreviewToJSONTyped = FakeEmailPreviewToJSONTyped;
var Sender_1 = require("./Sender");
var EmailRecipients_1 = require("./EmailRecipients");
/**
 * Check if a given object implements the FakeEmailPreview interface.
 */
function instanceOfFakeEmailPreview(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('emailAddress' in value) || value['emailAddress'] === undefined)
        return false;
    if (!('hasAttachments' in value) || value['hasAttachments'] === undefined)
        return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined)
        return false;
    if (!('seen' in value) || value['seen'] === undefined)
        return false;
    return true;
}
function FakeEmailPreviewFromJSON(json) {
    return FakeEmailPreviewFromJSONTyped(json, false);
}
function FakeEmailPreviewFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'emailAddress': json['emailAddress'],
        'sender': json['sender'] == null ? undefined : (0, Sender_1.SenderFromJSON)(json['sender']),
        'recipients': json['recipients'] == null ? undefined : (0, EmailRecipients_1.EmailRecipientsFromJSON)(json['recipients']),
        'hasAttachments': json['hasAttachments'],
        'subject': json['subject'] == null ? undefined : json['subject'],
        'preview': json['preview'] == null ? undefined : json['preview'],
        'createdAt': (new Date(json['createdAt'])),
        'seen': json['seen'],
    };
}
function FakeEmailPreviewToJSON(json) {
    return FakeEmailPreviewToJSONTyped(json, false);
}
function FakeEmailPreviewToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'id': value['id'],
        'emailAddress': value['emailAddress'],
        'sender': (0, Sender_1.SenderToJSON)(value['sender']),
        'recipients': (0, EmailRecipients_1.EmailRecipientsToJSON)(value['recipients']),
        'hasAttachments': value['hasAttachments'],
        'subject': value['subject'],
        'preview': value['preview'],
        'createdAt': ((value['createdAt']).toISOString()),
        'seen': value['seen'],
    };
}
