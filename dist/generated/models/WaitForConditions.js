"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WaitForConditionsSortDirectionEnum = exports.WaitForConditionsCountTypeEnum = void 0;
exports.instanceOfWaitForConditions = instanceOfWaitForConditions;
exports.WaitForConditionsFromJSON = WaitForConditionsFromJSON;
exports.WaitForConditionsFromJSONTyped = WaitForConditionsFromJSONTyped;
exports.WaitForConditionsToJSON = WaitForConditionsToJSON;
exports.WaitForConditionsToJSONTyped = WaitForConditionsToJSONTyped;
var MatchOption_1 = require("./MatchOption");
/**
 * @export
 */
exports.WaitForConditionsCountTypeEnum = {
    EXACTLY: 'EXACTLY',
    ATLEAST: 'ATLEAST'
};
/**
 * @export
 */
exports.WaitForConditionsSortDirectionEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
};
/**
 * Check if a given object implements the WaitForConditions interface.
 */
function instanceOfWaitForConditions(value) {
    if (!('inboxId' in value) || value['inboxId'] === undefined)
        return false;
    if (!('timeout' in value) || value['timeout'] === undefined)
        return false;
    return true;
}
function WaitForConditionsFromJSON(json) {
    return WaitForConditionsFromJSONTyped(json, false);
}
function WaitForConditionsFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'inboxId': json['inboxId'],
        'count': json['count'] == null ? undefined : json['count'],
        'delayTimeout': json['delayTimeout'] == null ? undefined : json['delayTimeout'],
        'timeout': json['timeout'],
        'unreadOnly': json['unreadOnly'] == null ? undefined : json['unreadOnly'],
        'countType': json['countType'] == null ? undefined : json['countType'],
        'matches': json['matches'] == null ? undefined : (json['matches'].map(MatchOption_1.MatchOptionFromJSON)),
        'sortDirection': json['sortDirection'] == null ? undefined : json['sortDirection'],
        'since': json['since'] == null ? undefined : (new Date(json['since'])),
        'before': json['before'] == null ? undefined : (new Date(json['before'])),
    };
}
function WaitForConditionsToJSON(json) {
    return WaitForConditionsToJSONTyped(json, false);
}
function WaitForConditionsToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'inboxId': value['inboxId'],
        'count': value['count'],
        'delayTimeout': value['delayTimeout'],
        'timeout': value['timeout'],
        'unreadOnly': value['unreadOnly'],
        'countType': value['countType'],
        'matches': value['matches'] == null ? undefined : (value['matches'].map(MatchOption_1.MatchOptionToJSON)),
        'sortDirection': value['sortDirection'],
        'since': value['since'] == null ? undefined : (value['since'].toISOString()),
        'before': value['before'] == null ? undefined : (value['before'].toISOString()),
    };
}
