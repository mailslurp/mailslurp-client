"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DNSLookupResultToJSON = exports.DNSLookupResultFromJSONTyped = exports.DNSLookupResultFromJSON = exports.DNSLookupResultRecordTypeEnum = void 0;
/**
 * @export
 * @enum {string}
 */
var DNSLookupResultRecordTypeEnum;
(function (DNSLookupResultRecordTypeEnum) {
    DNSLookupResultRecordTypeEnum["A"] = "A";
    DNSLookupResultRecordTypeEnum["NS"] = "NS";
    DNSLookupResultRecordTypeEnum["MD"] = "MD";
    DNSLookupResultRecordTypeEnum["MF"] = "MF";
    DNSLookupResultRecordTypeEnum["CNAME"] = "CNAME";
    DNSLookupResultRecordTypeEnum["SOA"] = "SOA";
    DNSLookupResultRecordTypeEnum["MB"] = "MB";
    DNSLookupResultRecordTypeEnum["MG"] = "MG";
    DNSLookupResultRecordTypeEnum["MR"] = "MR";
    DNSLookupResultRecordTypeEnum["NULL"] = "NULL";
    DNSLookupResultRecordTypeEnum["WKS"] = "WKS";
    DNSLookupResultRecordTypeEnum["PTR"] = "PTR";
    DNSLookupResultRecordTypeEnum["HINFO"] = "HINFO";
    DNSLookupResultRecordTypeEnum["MINFO"] = "MINFO";
    DNSLookupResultRecordTypeEnum["MX"] = "MX";
    DNSLookupResultRecordTypeEnum["TXT"] = "TXT";
    DNSLookupResultRecordTypeEnum["RP"] = "RP";
    DNSLookupResultRecordTypeEnum["AFSDB"] = "AFSDB";
    DNSLookupResultRecordTypeEnum["X25"] = "X25";
    DNSLookupResultRecordTypeEnum["ISDN"] = "ISDN";
    DNSLookupResultRecordTypeEnum["RT"] = "RT";
    DNSLookupResultRecordTypeEnum["NSAP"] = "NSAP";
    DNSLookupResultRecordTypeEnum["NSAP_PTR"] = "NSAP_PTR";
    DNSLookupResultRecordTypeEnum["SIG"] = "SIG";
    DNSLookupResultRecordTypeEnum["KEY"] = "KEY";
    DNSLookupResultRecordTypeEnum["PX"] = "PX";
    DNSLookupResultRecordTypeEnum["GPOS"] = "GPOS";
    DNSLookupResultRecordTypeEnum["AAAA"] = "AAAA";
    DNSLookupResultRecordTypeEnum["LOC"] = "LOC";
    DNSLookupResultRecordTypeEnum["NXT"] = "NXT";
    DNSLookupResultRecordTypeEnum["EID"] = "EID";
    DNSLookupResultRecordTypeEnum["NIMLOC"] = "NIMLOC";
    DNSLookupResultRecordTypeEnum["SRV"] = "SRV";
    DNSLookupResultRecordTypeEnum["ATMA"] = "ATMA";
    DNSLookupResultRecordTypeEnum["NAPTR"] = "NAPTR";
    DNSLookupResultRecordTypeEnum["KX"] = "KX";
    DNSLookupResultRecordTypeEnum["CERT"] = "CERT";
    DNSLookupResultRecordTypeEnum["A6"] = "A6";
    DNSLookupResultRecordTypeEnum["DNAME"] = "DNAME";
    DNSLookupResultRecordTypeEnum["SINK"] = "SINK";
    DNSLookupResultRecordTypeEnum["OPT"] = "OPT";
    DNSLookupResultRecordTypeEnum["APL"] = "APL";
    DNSLookupResultRecordTypeEnum["DS"] = "DS";
    DNSLookupResultRecordTypeEnum["SSHFP"] = "SSHFP";
    DNSLookupResultRecordTypeEnum["IPSECKEY"] = "IPSECKEY";
    DNSLookupResultRecordTypeEnum["RRSIG"] = "RRSIG";
    DNSLookupResultRecordTypeEnum["NSEC"] = "NSEC";
    DNSLookupResultRecordTypeEnum["DNSKEY"] = "DNSKEY";
    DNSLookupResultRecordTypeEnum["DHCID"] = "DHCID";
    DNSLookupResultRecordTypeEnum["NSEC3"] = "NSEC3";
    DNSLookupResultRecordTypeEnum["NSEC3PARAM"] = "NSEC3PARAM";
    DNSLookupResultRecordTypeEnum["TLSA"] = "TLSA";
    DNSLookupResultRecordTypeEnum["SMIMEA"] = "SMIMEA";
    DNSLookupResultRecordTypeEnum["HIP"] = "HIP";
    DNSLookupResultRecordTypeEnum["NINFO"] = "NINFO";
    DNSLookupResultRecordTypeEnum["RKEY"] = "RKEY";
    DNSLookupResultRecordTypeEnum["TALINK"] = "TALINK";
    DNSLookupResultRecordTypeEnum["CDS"] = "CDS";
    DNSLookupResultRecordTypeEnum["CDNSKEY"] = "CDNSKEY";
    DNSLookupResultRecordTypeEnum["OPENPGPKEY"] = "OPENPGPKEY";
    DNSLookupResultRecordTypeEnum["CSYNC"] = "CSYNC";
    DNSLookupResultRecordTypeEnum["ZONEMD"] = "ZONEMD";
    DNSLookupResultRecordTypeEnum["SVCB"] = "SVCB";
    DNSLookupResultRecordTypeEnum["HTTPS"] = "HTTPS";
    DNSLookupResultRecordTypeEnum["SPF"] = "SPF";
    DNSLookupResultRecordTypeEnum["UINFO"] = "UINFO";
    DNSLookupResultRecordTypeEnum["UID"] = "UID";
    DNSLookupResultRecordTypeEnum["GID"] = "GID";
    DNSLookupResultRecordTypeEnum["UNSPEC"] = "UNSPEC";
    DNSLookupResultRecordTypeEnum["NID"] = "NID";
    DNSLookupResultRecordTypeEnum["L32"] = "L32";
    DNSLookupResultRecordTypeEnum["L64"] = "L64";
    DNSLookupResultRecordTypeEnum["LP"] = "LP";
    DNSLookupResultRecordTypeEnum["EUI48"] = "EUI48";
    DNSLookupResultRecordTypeEnum["EUI64"] = "EUI64";
    DNSLookupResultRecordTypeEnum["TKEY"] = "TKEY";
    DNSLookupResultRecordTypeEnum["TSIG"] = "TSIG";
    DNSLookupResultRecordTypeEnum["IXFR"] = "IXFR";
    DNSLookupResultRecordTypeEnum["AXFR"] = "AXFR";
    DNSLookupResultRecordTypeEnum["MAILB"] = "MAILB";
    DNSLookupResultRecordTypeEnum["MAILA"] = "MAILA";
    DNSLookupResultRecordTypeEnum["ANY"] = "ANY";
    DNSLookupResultRecordTypeEnum["URI"] = "URI";
    DNSLookupResultRecordTypeEnum["CAA"] = "CAA";
    DNSLookupResultRecordTypeEnum["AVC"] = "AVC";
    DNSLookupResultRecordTypeEnum["DOA"] = "DOA";
    DNSLookupResultRecordTypeEnum["AMTRELAY"] = "AMTRELAY";
    DNSLookupResultRecordTypeEnum["TA"] = "TA";
    DNSLookupResultRecordTypeEnum["DLV"] = "DLV";
})(DNSLookupResultRecordTypeEnum = exports.DNSLookupResultRecordTypeEnum || (exports.DNSLookupResultRecordTypeEnum = {}));
function DNSLookupResultFromJSON(json) {
    return DNSLookupResultFromJSONTyped(json, false);
}
exports.DNSLookupResultFromJSON = DNSLookupResultFromJSON;
function DNSLookupResultFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        recordType: json['recordType'],
        ttl: json['ttl'],
        recordEntries: json['recordEntries'],
        name: json['name'],
    };
}
exports.DNSLookupResultFromJSONTyped = DNSLookupResultFromJSONTyped;
function DNSLookupResultToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        recordType: value.recordType,
        ttl: value.ttl,
        recordEntries: value.recordEntries,
        name: value.name,
    };
}
exports.DNSLookupResultToJSON = DNSLookupResultToJSON;
