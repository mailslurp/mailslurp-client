"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfGroupContactsDto = instanceOfGroupContactsDto;
exports.GroupContactsDtoFromJSON = GroupContactsDtoFromJSON;
exports.GroupContactsDtoFromJSONTyped = GroupContactsDtoFromJSONTyped;
exports.GroupContactsDtoToJSON = GroupContactsDtoToJSON;
exports.GroupContactsDtoToJSONTyped = GroupContactsDtoToJSONTyped;
var ContactDto_1 = require("./ContactDto");
var GroupDto_1 = require("./GroupDto");
/**
 * Check if a given object implements the GroupContactsDto interface.
 */
function instanceOfGroupContactsDto(value) {
    if (!('group' in value) || value['group'] === undefined)
        return false;
    if (!('contacts' in value) || value['contacts'] === undefined)
        return false;
    return true;
}
function GroupContactsDtoFromJSON(json) {
    return GroupContactsDtoFromJSONTyped(json, false);
}
function GroupContactsDtoFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'group': (0, GroupDto_1.GroupDtoFromJSON)(json['group']),
        'contacts': (json['contacts'].map(ContactDto_1.ContactDtoFromJSON)),
    };
}
function GroupContactsDtoToJSON(json) {
    return GroupContactsDtoToJSONTyped(json, false);
}
function GroupContactsDtoToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'group': (0, GroupDto_1.GroupDtoToJSON)(value['group']),
        'contacts': (value['contacts'].map(ContactDto_1.ContactDtoToJSON)),
    };
}
