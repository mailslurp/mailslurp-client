/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * DNS Record required for verification of a domain. Record vary depending on domain type.
 * @export
 * @interface DomainNameRecord
 */
export interface DomainNameRecord {
    /**
     * Domain Name Server Record Label
     * @type {string}
     * @memberof DomainNameRecord
     */
    label: DomainNameRecordLabelEnum;
    /**
     *
     * @type {boolean}
     * @memberof DomainNameRecord
     */
    required: boolean;
    /**
     * Domain Name Server Record Types
     * @type {string}
     * @memberof DomainNameRecord
     */
    recordType: DomainNameRecordRecordTypeEnum;
    /**
     *
     * @type {string}
     * @memberof DomainNameRecord
     */
    name: string;
    /**
     *
     * @type {Array<string>}
     * @memberof DomainNameRecord
     */
    recordEntries: Array<string>;
    /**
     *
     * @type {number}
     * @memberof DomainNameRecord
     */
    ttl: number;
    /**
     *
     * @type {Array<string | null>}
     * @memberof DomainNameRecord
     */
    alternativeRecordEntries?: Array<string | null> | null;
}
/**
 * @export
 */
export declare const DomainNameRecordLabelEnum: {
    readonly VERIFICATION: "VERIFICATION";
    readonly MX: "MX";
    readonly SPF: "SPF";
    readonly DKIM: "DKIM";
    readonly DMARC: "DMARC";
};
export type DomainNameRecordLabelEnum = typeof DomainNameRecordLabelEnum[keyof typeof DomainNameRecordLabelEnum];
/**
 * @export
 */
export declare const DomainNameRecordRecordTypeEnum: {
    readonly A: "A";
    readonly NS: "NS";
    readonly MD: "MD";
    readonly MF: "MF";
    readonly CNAME: "CNAME";
    readonly SOA: "SOA";
    readonly MB: "MB";
    readonly MG: "MG";
    readonly MR: "MR";
    readonly NULL: "NULL";
    readonly WKS: "WKS";
    readonly PTR: "PTR";
    readonly HINFO: "HINFO";
    readonly MINFO: "MINFO";
    readonly MX: "MX";
    readonly TXT: "TXT";
    readonly RP: "RP";
    readonly AFSDB: "AFSDB";
    readonly X25: "X25";
    readonly ISDN: "ISDN";
    readonly RT: "RT";
    readonly NSAP: "NSAP";
    readonly NSAP_PTR: "NSAP_PTR";
    readonly SIG: "SIG";
    readonly KEY: "KEY";
    readonly PX: "PX";
    readonly GPOS: "GPOS";
    readonly AAAA: "AAAA";
    readonly LOC: "LOC";
    readonly NXT: "NXT";
    readonly EID: "EID";
    readonly NIMLOC: "NIMLOC";
    readonly SRV: "SRV";
    readonly ATMA: "ATMA";
    readonly NAPTR: "NAPTR";
    readonly KX: "KX";
    readonly CERT: "CERT";
    readonly A6: "A6";
    readonly DNAME: "DNAME";
    readonly SINK: "SINK";
    readonly OPT: "OPT";
    readonly APL: "APL";
    readonly DS: "DS";
    readonly SSHFP: "SSHFP";
    readonly IPSECKEY: "IPSECKEY";
    readonly RRSIG: "RRSIG";
    readonly NSEC: "NSEC";
    readonly DNSKEY: "DNSKEY";
    readonly DHCID: "DHCID";
    readonly NSEC3: "NSEC3";
    readonly NSEC3PARAM: "NSEC3PARAM";
    readonly TLSA: "TLSA";
    readonly SMIMEA: "SMIMEA";
    readonly HIP: "HIP";
    readonly NINFO: "NINFO";
    readonly RKEY: "RKEY";
    readonly TALINK: "TALINK";
    readonly CDS: "CDS";
    readonly CDNSKEY: "CDNSKEY";
    readonly OPENPGPKEY: "OPENPGPKEY";
    readonly CSYNC: "CSYNC";
    readonly ZONEMD: "ZONEMD";
    readonly SVCB: "SVCB";
    readonly HTTPS: "HTTPS";
    readonly SPF: "SPF";
    readonly UINFO: "UINFO";
    readonly UID: "UID";
    readonly GID: "GID";
    readonly UNSPEC: "UNSPEC";
    readonly NID: "NID";
    readonly L32: "L32";
    readonly L64: "L64";
    readonly LP: "LP";
    readonly EUI48: "EUI48";
    readonly EUI64: "EUI64";
    readonly TKEY: "TKEY";
    readonly TSIG: "TSIG";
    readonly IXFR: "IXFR";
    readonly AXFR: "AXFR";
    readonly MAILB: "MAILB";
    readonly MAILA: "MAILA";
    readonly ANY: "ANY";
    readonly URI: "URI";
    readonly CAA: "CAA";
    readonly AVC: "AVC";
    readonly DOA: "DOA";
    readonly AMTRELAY: "AMTRELAY";
    readonly TA: "TA";
    readonly DLV: "DLV";
};
export type DomainNameRecordRecordTypeEnum = typeof DomainNameRecordRecordTypeEnum[keyof typeof DomainNameRecordRecordTypeEnum];
/**
 * Check if a given object implements the DomainNameRecord interface.
 */
export declare function instanceOfDomainNameRecord(value: object): value is DomainNameRecord;
export declare function DomainNameRecordFromJSON(json: any): DomainNameRecord;
export declare function DomainNameRecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainNameRecord;
export declare function DomainNameRecordToJSON(json: any): DomainNameRecord;
export declare function DomainNameRecordToJSONTyped(value?: DomainNameRecord | null, ignoreDiscriminator?: boolean): any;
