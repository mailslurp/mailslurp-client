"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InboxPreviewFunctionsAsEnum = exports.InboxPreviewInboxTypeEnum = void 0;
exports.instanceOfInboxPreview = instanceOfInboxPreview;
exports.InboxPreviewFromJSON = InboxPreviewFromJSON;
exports.InboxPreviewFromJSONTyped = InboxPreviewFromJSONTyped;
exports.InboxPreviewToJSON = InboxPreviewToJSON;
exports.InboxPreviewToJSONTyped = InboxPreviewToJSONTyped;
/**
 * @export
 */
exports.InboxPreviewInboxTypeEnum = {
    HTTP_INBOX: 'HTTP_INBOX',
    SMTP_INBOX: 'SMTP_INBOX'
};
/**
 * @export
 */
exports.InboxPreviewFunctionsAsEnum = {
    ALIAS: 'ALIAS',
    THREAD: 'THREAD',
    CATCH_ALL: 'CATCH_ALL',
    CONNECTOR: 'CONNECTOR',
    ACCOUNT: 'ACCOUNT',
    GUEST: 'GUEST'
};
/**
 * Check if a given object implements the InboxPreview interface.
 */
function instanceOfInboxPreview(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('emailAddress' in value) || value['emailAddress'] === undefined)
        return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined)
        return false;
    if (!('favourite' in value) || value['favourite'] === undefined)
        return false;
    if (!('teamAccess' in value) || value['teamAccess'] === undefined)
        return false;
    if (!('virtualInbox' in value) || value['virtualInbox'] === undefined)
        return false;
    if (!('userId' in value) || value['userId'] === undefined)
        return false;
    return true;
}
function InboxPreviewFromJSON(json) {
    return InboxPreviewFromJSONTyped(json, false);
}
function InboxPreviewFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'domainId': json['domainId'] == null ? undefined : json['domainId'],
        'emailAddress': json['emailAddress'],
        'createdAt': (new Date(json['createdAt'])),
        'favourite': json['favourite'],
        'name': json['name'] == null ? undefined : json['name'],
        'tags': json['tags'] == null ? undefined : json['tags'],
        'teamAccess': json['teamAccess'],
        'inboxType': json['inboxType'] == null ? undefined : json['inboxType'],
        'virtualInbox': json['virtualInbox'],
        'expiresAt': json['expiresAt'] == null ? undefined : (new Date(json['expiresAt'])),
        'functionsAs': json['functionsAs'] == null ? undefined : json['functionsAs'],
        'userId': json['userId'],
        'description': json['description'] == null ? undefined : json['description'],
    };
}
function InboxPreviewToJSON(json) {
    return InboxPreviewToJSONTyped(json, false);
}
function InboxPreviewToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'id': value['id'],
        'domainId': value['domainId'],
        'emailAddress': value['emailAddress'],
        'createdAt': ((value['createdAt']).toISOString()),
        'favourite': value['favourite'],
        'name': value['name'],
        'tags': value['tags'],
        'teamAccess': value['teamAccess'],
        'inboxType': value['inboxType'],
        'virtualInbox': value['virtualInbox'],
        'expiresAt': value['expiresAt'] == null ? undefined : (value['expiresAt'].toISOString()),
        'functionsAs': value['functionsAs'],
        'userId': value['userId'],
        'description': value['description'],
    };
}
