"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainNameRecordToJSON = exports.DomainNameRecordFromJSONTyped = exports.DomainNameRecordFromJSON = exports.DomainNameRecordRecordTypeEnum = void 0;
/**
 * @export
 * @enum {string}
 */
var DomainNameRecordRecordTypeEnum;
(function (DomainNameRecordRecordTypeEnum) {
    DomainNameRecordRecordTypeEnum["A"] = "A";
    DomainNameRecordRecordTypeEnum["NS"] = "NS";
    DomainNameRecordRecordTypeEnum["MD"] = "MD";
    DomainNameRecordRecordTypeEnum["MF"] = "MF";
    DomainNameRecordRecordTypeEnum["CNAME"] = "CNAME";
    DomainNameRecordRecordTypeEnum["SOA"] = "SOA";
    DomainNameRecordRecordTypeEnum["MB"] = "MB";
    DomainNameRecordRecordTypeEnum["MG"] = "MG";
    DomainNameRecordRecordTypeEnum["MR"] = "MR";
    DomainNameRecordRecordTypeEnum["NULL"] = "NULL";
    DomainNameRecordRecordTypeEnum["WKS"] = "WKS";
    DomainNameRecordRecordTypeEnum["PTR"] = "PTR";
    DomainNameRecordRecordTypeEnum["HINFO"] = "HINFO";
    DomainNameRecordRecordTypeEnum["MINFO"] = "MINFO";
    DomainNameRecordRecordTypeEnum["MX"] = "MX";
    DomainNameRecordRecordTypeEnum["TXT"] = "TXT";
    DomainNameRecordRecordTypeEnum["RP"] = "RP";
    DomainNameRecordRecordTypeEnum["AFSDB"] = "AFSDB";
    DomainNameRecordRecordTypeEnum["X25"] = "X25";
    DomainNameRecordRecordTypeEnum["ISDN"] = "ISDN";
    DomainNameRecordRecordTypeEnum["RT"] = "RT";
    DomainNameRecordRecordTypeEnum["NSAP"] = "NSAP";
    DomainNameRecordRecordTypeEnum["NSAP_PTR"] = "NSAP_PTR";
    DomainNameRecordRecordTypeEnum["SIG"] = "SIG";
    DomainNameRecordRecordTypeEnum["KEY"] = "KEY";
    DomainNameRecordRecordTypeEnum["PX"] = "PX";
    DomainNameRecordRecordTypeEnum["GPOS"] = "GPOS";
    DomainNameRecordRecordTypeEnum["AAAA"] = "AAAA";
    DomainNameRecordRecordTypeEnum["LOC"] = "LOC";
    DomainNameRecordRecordTypeEnum["NXT"] = "NXT";
    DomainNameRecordRecordTypeEnum["EID"] = "EID";
    DomainNameRecordRecordTypeEnum["NIMLOC"] = "NIMLOC";
    DomainNameRecordRecordTypeEnum["SRV"] = "SRV";
    DomainNameRecordRecordTypeEnum["ATMA"] = "ATMA";
    DomainNameRecordRecordTypeEnum["NAPTR"] = "NAPTR";
    DomainNameRecordRecordTypeEnum["KX"] = "KX";
    DomainNameRecordRecordTypeEnum["CERT"] = "CERT";
    DomainNameRecordRecordTypeEnum["A6"] = "A6";
    DomainNameRecordRecordTypeEnum["DNAME"] = "DNAME";
    DomainNameRecordRecordTypeEnum["SINK"] = "SINK";
    DomainNameRecordRecordTypeEnum["OPT"] = "OPT";
    DomainNameRecordRecordTypeEnum["APL"] = "APL";
    DomainNameRecordRecordTypeEnum["DS"] = "DS";
    DomainNameRecordRecordTypeEnum["SSHFP"] = "SSHFP";
    DomainNameRecordRecordTypeEnum["IPSECKEY"] = "IPSECKEY";
    DomainNameRecordRecordTypeEnum["RRSIG"] = "RRSIG";
    DomainNameRecordRecordTypeEnum["NSEC"] = "NSEC";
    DomainNameRecordRecordTypeEnum["DNSKEY"] = "DNSKEY";
    DomainNameRecordRecordTypeEnum["DHCID"] = "DHCID";
    DomainNameRecordRecordTypeEnum["NSEC3"] = "NSEC3";
    DomainNameRecordRecordTypeEnum["NSEC3PARAM"] = "NSEC3PARAM";
    DomainNameRecordRecordTypeEnum["TLSA"] = "TLSA";
    DomainNameRecordRecordTypeEnum["SMIMEA"] = "SMIMEA";
    DomainNameRecordRecordTypeEnum["HIP"] = "HIP";
    DomainNameRecordRecordTypeEnum["NINFO"] = "NINFO";
    DomainNameRecordRecordTypeEnum["RKEY"] = "RKEY";
    DomainNameRecordRecordTypeEnum["TALINK"] = "TALINK";
    DomainNameRecordRecordTypeEnum["CDS"] = "CDS";
    DomainNameRecordRecordTypeEnum["CDNSKEY"] = "CDNSKEY";
    DomainNameRecordRecordTypeEnum["OPENPGPKEY"] = "OPENPGPKEY";
    DomainNameRecordRecordTypeEnum["CSYNC"] = "CSYNC";
    DomainNameRecordRecordTypeEnum["ZONEMD"] = "ZONEMD";
    DomainNameRecordRecordTypeEnum["SVCB"] = "SVCB";
    DomainNameRecordRecordTypeEnum["HTTPS"] = "HTTPS";
    DomainNameRecordRecordTypeEnum["SPF"] = "SPF";
    DomainNameRecordRecordTypeEnum["UINFO"] = "UINFO";
    DomainNameRecordRecordTypeEnum["UID"] = "UID";
    DomainNameRecordRecordTypeEnum["GID"] = "GID";
    DomainNameRecordRecordTypeEnum["UNSPEC"] = "UNSPEC";
    DomainNameRecordRecordTypeEnum["NID"] = "NID";
    DomainNameRecordRecordTypeEnum["L32"] = "L32";
    DomainNameRecordRecordTypeEnum["L64"] = "L64";
    DomainNameRecordRecordTypeEnum["LP"] = "LP";
    DomainNameRecordRecordTypeEnum["EUI48"] = "EUI48";
    DomainNameRecordRecordTypeEnum["EUI64"] = "EUI64";
    DomainNameRecordRecordTypeEnum["TKEY"] = "TKEY";
    DomainNameRecordRecordTypeEnum["TSIG"] = "TSIG";
    DomainNameRecordRecordTypeEnum["IXFR"] = "IXFR";
    DomainNameRecordRecordTypeEnum["AXFR"] = "AXFR";
    DomainNameRecordRecordTypeEnum["MAILB"] = "MAILB";
    DomainNameRecordRecordTypeEnum["MAILA"] = "MAILA";
    DomainNameRecordRecordTypeEnum["ANY"] = "ANY";
    DomainNameRecordRecordTypeEnum["URI"] = "URI";
    DomainNameRecordRecordTypeEnum["CAA"] = "CAA";
    DomainNameRecordRecordTypeEnum["AVC"] = "AVC";
    DomainNameRecordRecordTypeEnum["DOA"] = "DOA";
    DomainNameRecordRecordTypeEnum["AMTRELAY"] = "AMTRELAY";
    DomainNameRecordRecordTypeEnum["TA"] = "TA";
    DomainNameRecordRecordTypeEnum["DLV"] = "DLV";
})(DomainNameRecordRecordTypeEnum = exports.DomainNameRecordRecordTypeEnum || (exports.DomainNameRecordRecordTypeEnum = {}));
function DomainNameRecordFromJSON(json) {
    return DomainNameRecordFromJSONTyped(json, false);
}
exports.DomainNameRecordFromJSON = DomainNameRecordFromJSON;
function DomainNameRecordFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
        return json;
    }
    return {
        recordType: json['recordType'],
        name: json['name'],
        recordEntries: json['recordEntries'],
        ttl: json['ttl'],
    };
}
exports.DomainNameRecordFromJSONTyped = DomainNameRecordFromJSONTyped;
function DomainNameRecordToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        recordType: value.recordType,
        name: value.name,
        recordEntries: value.recordEntries,
        ttl: value.ttl,
    };
}
exports.DomainNameRecordToJSON = DomainNameRecordToJSON;
