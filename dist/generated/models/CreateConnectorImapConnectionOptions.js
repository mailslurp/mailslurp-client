"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfCreateConnectorImapConnectionOptions = instanceOfCreateConnectorImapConnectionOptions;
exports.CreateConnectorImapConnectionOptionsFromJSON = CreateConnectorImapConnectionOptionsFromJSON;
exports.CreateConnectorImapConnectionOptionsFromJSONTyped = CreateConnectorImapConnectionOptionsFromJSONTyped;
exports.CreateConnectorImapConnectionOptionsToJSON = CreateConnectorImapConnectionOptionsToJSON;
exports.CreateConnectorImapConnectionOptionsToJSONTyped = CreateConnectorImapConnectionOptionsToJSONTyped;
/**
 * Check if a given object implements the CreateConnectorImapConnectionOptions interface.
 */
function instanceOfCreateConnectorImapConnectionOptions(value) {
    if (!('imapHost' in value) || value['imapHost'] === undefined)
        return false;
    return true;
}
function CreateConnectorImapConnectionOptionsFromJSON(json) {
    return CreateConnectorImapConnectionOptionsFromJSONTyped(json, false);
}
function CreateConnectorImapConnectionOptionsFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'imapSsl': json['imapSsl'] == null ? undefined : json['imapSsl'],
        'imapUsername': json['imapUsername'] == null ? undefined : json['imapUsername'],
        'imapPassword': json['imapPassword'] == null ? undefined : json['imapPassword'],
        'selectFolder': json['selectFolder'] == null ? undefined : json['selectFolder'],
        'searchTerms': json['searchTerms'] == null ? undefined : json['searchTerms'],
        'imapPort': json['imapPort'] == null ? undefined : json['imapPort'],
        'imapHost': json['imapHost'],
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'startTls': json['startTls'] == null ? undefined : json['startTls'],
        'proxyEnabled': json['proxyEnabled'] == null ? undefined : json['proxyEnabled'],
        'proxyPort': json['proxyPort'] == null ? undefined : json['proxyPort'],
        'proxyHost': json['proxyHost'] == null ? undefined : json['proxyHost'],
        'localHostName': json['localHostName'] == null ? undefined : json['localHostName'],
        'mechanisms': json['mechanisms'] == null ? undefined : json['mechanisms'],
        'sslTrust': json['sslTrust'] == null ? undefined : json['sslTrust'],
        'sslProtocols': json['sslProtocols'] == null ? undefined : json['sslProtocols'],
    };
}
function CreateConnectorImapConnectionOptionsToJSON(json) {
    return CreateConnectorImapConnectionOptionsToJSONTyped(json, false);
}
function CreateConnectorImapConnectionOptionsToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'imapSsl': value['imapSsl'],
        'imapUsername': value['imapUsername'],
        'imapPassword': value['imapPassword'],
        'selectFolder': value['selectFolder'],
        'searchTerms': value['searchTerms'],
        'imapPort': value['imapPort'],
        'imapHost': value['imapHost'],
        'enabled': value['enabled'],
        'startTls': value['startTls'],
        'proxyEnabled': value['proxyEnabled'],
        'proxyPort': value['proxyPort'],
        'proxyHost': value['proxyHost'],
        'localHostName': value['localHostName'],
        'mechanisms': value['mechanisms'],
        'sslTrust': value['sslTrust'],
        'sslProtocols': value['sslProtocols'],
    };
}
