/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AttachmentMetaData } from './';
/**
 * NEW_EMAIL webhook payload. Sent to your webhook url endpoint via HTTP POST when an email is received by the inbox that your webhook is attached to. Use the email ID to fetch the full email body or attachments.
 * @export
 * @interface WebhookNewEmailPayload
 */
export interface WebhookNewEmailPayload {
    /**
     * Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
     * @type {string}
     * @memberof WebhookNewEmailPayload
     */
    messageId: string;
    /**
     * ID of webhook entity being triggered
     * @type {string}
     * @memberof WebhookNewEmailPayload
     */
    webhookId: string;
    /**
     * Name of the event type webhook is being triggered for.
     * @type {string}
     * @memberof WebhookNewEmailPayload
     */
    eventName: WebhookNewEmailPayloadEventNameEnum;
    /**
     * Name of the webhook being triggered
     * @type {string}
     * @memberof WebhookNewEmailPayload
     */
    webhookName?: string | null;
    /**
     * Id of the inbox
     * @type {string}
     * @memberof WebhookNewEmailPayload
     */
    inboxId: string;
    /**
     * Id of the domain that received an email
     * @type {string}
     * @memberof WebhookNewEmailPayload
     */
    domainId?: string | null;
    /**
     * ID of the email that was received. Use this ID for fetching the email with the `EmailController`.
     * @type {string}
     * @memberof WebhookNewEmailPayload
     */
    emailId: string;
    /**
     * Date time of event creation
     * @type {Date}
     * @memberof WebhookNewEmailPayload
     */
    createdAt: Date;
    /**
     * List of `To` recipient email addresses that the email was addressed to. See recipients object for names.
     * @type {Array<string>}
     * @memberof WebhookNewEmailPayload
     */
    to: Array<string>;
    /**
     * Who the email was sent from. An email address - see fromName for the sender name.
     * @type {string}
     * @memberof WebhookNewEmailPayload
     */
    from: string;
    /**
     * List of `CC` recipients email addresses that the email was addressed to. See recipients object for names.
     * @type {Array<string>}
     * @memberof WebhookNewEmailPayload
     */
    cc: Array<string>;
    /**
     * List of `BCC` recipients email addresses that the email was addressed to. See recipients object for names.
     * @type {Array<string>}
     * @memberof WebhookNewEmailPayload
     */
    bcc: Array<string>;
    /**
     * The subject line of the email message as specified by SMTP subject header
     * @type {string}
     * @memberof WebhookNewEmailPayload
     */
    subject?: string | null;
    /**
     * List of attachment meta data objects if attachments present
     * @type {Array<AttachmentMetaData>}
     * @memberof WebhookNewEmailPayload
     */
    attachmentMetaDatas: Array<AttachmentMetaData>;
}
/**
 * @export
 * @enum {string}
 */
export declare enum WebhookNewEmailPayloadEventNameEnum {
    EMAIL_RECEIVED = "EMAIL_RECEIVED",
    NEW_EMAIL = "NEW_EMAIL",
    NEW_CONTACT = "NEW_CONTACT",
    NEW_ATTACHMENT = "NEW_ATTACHMENT",
    EMAIL_OPENED = "EMAIL_OPENED",
    EMAIL_READ = "EMAIL_READ",
    DELIVERY_STATUS = "DELIVERY_STATUS",
    BOUNCE = "BOUNCE",
    BOUNCE_RECIPIENT = "BOUNCE_RECIPIENT",
    NEW_SMS = "NEW_SMS"
}
export declare function WebhookNewEmailPayloadFromJSON(json: any): WebhookNewEmailPayload;
export declare function WebhookNewEmailPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookNewEmailPayload;
export declare function WebhookNewEmailPayloadToJSON(value?: WebhookNewEmailPayload | null): any;
