"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomainDtoDomainTypeEnum = void 0;
exports.instanceOfDomainDto = instanceOfDomainDto;
exports.DomainDtoFromJSON = DomainDtoFromJSON;
exports.DomainDtoFromJSONTyped = DomainDtoFromJSONTyped;
exports.DomainDtoToJSON = DomainDtoToJSON;
exports.DomainDtoToJSONTyped = DomainDtoToJSONTyped;
var DomainNameRecord_1 = require("./DomainNameRecord");
/**
 * @export
 */
exports.DomainDtoDomainTypeEnum = {
    HTTP_INBOX: 'HTTP_INBOX',
    SMTP_DOMAIN: 'SMTP_DOMAIN'
};
/**
 * Check if a given object implements the DomainDto interface.
 */
function instanceOfDomainDto(value) {
    if (!('id' in value) || value['id'] === undefined)
        return false;
    if (!('userId' in value) || value['userId'] === undefined)
        return false;
    if (!('domain' in value) || value['domain'] === undefined)
        return false;
    if (!('verificationToken' in value) || value['verificationToken'] === undefined)
        return false;
    if (!('dkimTokens' in value) || value['dkimTokens'] === undefined)
        return false;
    if (!('hasMissingRecords' in value) || value['hasMissingRecords'] === undefined)
        return false;
    if (!('isVerified' in value) || value['isVerified'] === undefined)
        return false;
    if (!('domainNameRecords' in value) || value['domainNameRecords'] === undefined)
        return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined)
        return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined)
        return false;
    if (!('domainType' in value) || value['domainType'] === undefined)
        return false;
    return true;
}
function DomainDtoFromJSON(json) {
    return DomainDtoFromJSONTyped(json, false);
}
function DomainDtoFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'],
        'userId': json['userId'],
        'domain': json['domain'],
        'verificationToken': json['verificationToken'],
        'dkimTokens': json['dkimTokens'],
        'missingRecordsMessage': json['missingRecordsMessage'] == null ? undefined : json['missingRecordsMessage'],
        'hasMissingRecords': json['hasMissingRecords'],
        'isVerified': json['isVerified'],
        'domainNameRecords': (json['domainNameRecords'].map(DomainNameRecord_1.DomainNameRecordFromJSON)),
        'catchAllInboxId': json['catchAllInboxId'] == null ? undefined : json['catchAllInboxId'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'domainType': json['domainType'],
    };
}
function DomainDtoToJSON(json) {
    return DomainDtoToJSONTyped(json, false);
}
function DomainDtoToJSONTyped(value, ignoreDiscriminator) {
    if (ignoreDiscriminator === void 0) { ignoreDiscriminator = false; }
    if (value == null) {
        return value;
    }
    return {
        'id': value['id'],
        'userId': value['userId'],
        'domain': value['domain'],
        'verificationToken': value['verificationToken'],
        'dkimTokens': value['dkimTokens'],
        'missingRecordsMessage': value['missingRecordsMessage'],
        'hasMissingRecords': value['hasMissingRecords'],
        'isVerified': value['isVerified'],
        'domainNameRecords': (value['domainNameRecords'].map(DomainNameRecord_1.DomainNameRecordToJSON)),
        'catchAllInboxId': value['catchAllInboxId'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
        'domainType': value['domainType'],
    };
}
