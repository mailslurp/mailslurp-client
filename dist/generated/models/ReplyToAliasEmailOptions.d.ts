/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Options for replying to an alias email using the alias inbox
 * @export
 * @interface ReplyToAliasEmailOptions
 */
export interface ReplyToAliasEmailOptions {
    /**
     * Body of the reply email you want to send
     * @type {string}
     * @memberof ReplyToAliasEmailOptions
     */
    body: string;
    /**
     * Is the reply HTML
     * @type {boolean}
     * @memberof ReplyToAliasEmailOptions
     */
    isHTML: boolean;
    /**
     * The charset that your message should be sent with. Optional. Default is UTF-8
     * @type {string}
     * @memberof ReplyToAliasEmailOptions
     */
    charset?: string | null;
    /**
     * List of uploaded attachments to send with the reply. Optional.
     * @type {Array<string | null>}
     * @memberof ReplyToAliasEmailOptions
     */
    attachments?: Array<string | null> | null;
    /**
     * Template variables if using a template
     * @type {{ [key: string]: object | null; }}
     * @memberof ReplyToAliasEmailOptions
     */
    templateVariables?: {
        [key: string]: object | null;
    } | null;
    /**
     * Template ID to use instead of body. Will use template variable map to fill defined variable slots.
     * @type {string}
     * @memberof ReplyToAliasEmailOptions
     */
    template?: string | null;
    /**
     * How an email should be sent based on its recipients
     * @type {string}
     * @memberof ReplyToAliasEmailOptions
     */
    sendStrategy?: ReplyToAliasEmailOptionsSendStrategyEnum | null;
    /**
     * Optional custom headers
     * @type {{ [key: string]: string | null; }}
     * @memberof ReplyToAliasEmailOptions
     */
    customHeaders?: {
        [key: string]: string | null;
    } | null;
    /**
     * Optionally use inbox name as display name for sender email address
     * @type {boolean}
     * @memberof ReplyToAliasEmailOptions
     */
    useInboxName?: boolean | null;
    /**
     *
     * @type {boolean}
     * @memberof ReplyToAliasEmailOptions
     */
    html?: boolean;
}
/**
 * @export
 */
export declare const ReplyToAliasEmailOptionsSendStrategyEnum: {
    readonly SINGLE_MESSAGE: "SINGLE_MESSAGE";
};
export type ReplyToAliasEmailOptionsSendStrategyEnum = typeof ReplyToAliasEmailOptionsSendStrategyEnum[keyof typeof ReplyToAliasEmailOptionsSendStrategyEnum];
/**
 * Check if a given object implements the ReplyToAliasEmailOptions interface.
 */
export declare function instanceOfReplyToAliasEmailOptions(value: object): value is ReplyToAliasEmailOptions;
export declare function ReplyToAliasEmailOptionsFromJSON(json: any): ReplyToAliasEmailOptions;
export declare function ReplyToAliasEmailOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReplyToAliasEmailOptions;
export declare function ReplyToAliasEmailOptionsToJSON(json: any): ReplyToAliasEmailOptions;
export declare function ReplyToAliasEmailOptionsToJSONTyped(value?: ReplyToAliasEmailOptions | null, ignoreDiscriminator?: boolean): any;
