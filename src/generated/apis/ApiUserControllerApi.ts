/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import { UserInfoDto, UserInfoDtoFromJSON, UserInfoDtoToJSON } from '../models';

/**
 *
 */
export class ApiUserControllerApi extends runtime.BaseAPI {
  /**
   */
  async getSmtpPasswordRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['x-api-key'] = this.configuration.apiKey('x-api-key'); // API_KEY authentication
    }

    const response = await this.request(
      {
        path: `/user/smtp/password`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   */
  async getSmtpPassword(initOverrides?: RequestInit): Promise<string> {
    const response = await this.getSmtpPasswordRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getSmtpUsernameRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<string>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['x-api-key'] = this.configuration.apiKey('x-api-key'); // API_KEY authentication
    }

    const response = await this.request(
      {
        path: `/user/smtp/username`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   */
  async getSmtpUsername(initOverrides?: RequestInit): Promise<string> {
    const response = await this.getSmtpUsernameRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async getUserInfoRaw(
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<UserInfoDto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['x-api-key'] = this.configuration.apiKey('x-api-key'); // API_KEY authentication
    }

    const response = await this.request(
      {
        path: `/user/info`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserInfoDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async getUserInfo(initOverrides?: RequestInit): Promise<UserInfoDto> {
    const response = await this.getUserInfoRaw(initOverrides);
    return await response.value();
  }
}
