/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MissedEmailDto,
  PageMissedEmailProjection,
  PageUnknownMissedEmailProjection,
} from '../models/index';
import {
    MissedEmailDtoFromJSON,
    MissedEmailDtoToJSON,
    PageMissedEmailProjectionFromJSON,
    PageMissedEmailProjectionToJSON,
    PageUnknownMissedEmailProjectionFromJSON,
    PageUnknownMissedEmailProjectionToJSON,
} from '../models/index';

export interface GetAllMissedEmailsRequest {
    page?: number;
    size?: number;
    sort?: GetAllMissedEmailsSortEnum;
    searchFilter?: string;
    since?: Date;
    before?: Date;
    inboxId?: string;
}

export interface GetAllUnknownMissedEmailsRequest {
    page?: number;
    size?: number;
    sort?: GetAllUnknownMissedEmailsSortEnum;
    searchFilter?: string;
    since?: Date;
    before?: Date;
    inboxId?: string;
}

export interface GetMissedEmailRequest {
    missedEmailId: string;
}

export interface WaitForNthMissedEmailRequest {
    index: number;
    inboxId?: string;
    timeout?: number;
    since?: Date;
    before?: Date;
}

/**
 * 
 */
export class MissedEmailControllerApi extends runtime.BaseAPI {

    /**
     * Get all MissedEmails in paginated format
     */
    async getAllMissedEmailsRaw(requestParameters: GetAllMissedEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageMissedEmailProjection>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['searchFilter'] != null) {
            queryParameters['searchFilter'] = requestParameters['searchFilter'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = (requestParameters['since'] as any).toISOString();
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = (requestParameters['before'] as any).toISOString();
        }

        if (requestParameters['inboxId'] != null) {
            queryParameters['inboxId'] = requestParameters['inboxId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/missed-emails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageMissedEmailProjectionFromJSON(jsonValue));
    }

    /**
     * Get all MissedEmails in paginated format
     */
    async getAllMissedEmails(requestParameters: GetAllMissedEmailsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageMissedEmailProjection> {
        const response = await this.getAllMissedEmailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Unknown missed emails are emails that were sent to MailSlurp but could not be assigned to an existing inbox.
     * Get all unknown missed emails in paginated format
     */
    async getAllUnknownMissedEmailsRaw(requestParameters: GetAllUnknownMissedEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageUnknownMissedEmailProjection>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['searchFilter'] != null) {
            queryParameters['searchFilter'] = requestParameters['searchFilter'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = (requestParameters['since'] as any).toISOString();
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = (requestParameters['before'] as any).toISOString();
        }

        if (requestParameters['inboxId'] != null) {
            queryParameters['inboxId'] = requestParameters['inboxId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/missed-emails/unknown`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageUnknownMissedEmailProjectionFromJSON(jsonValue));
    }

    /**
     * Unknown missed emails are emails that were sent to MailSlurp but could not be assigned to an existing inbox.
     * Get all unknown missed emails in paginated format
     */
    async getAllUnknownMissedEmails(requestParameters: GetAllUnknownMissedEmailsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageUnknownMissedEmailProjection> {
        const response = await this.getAllUnknownMissedEmailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List emails that were missed due to plan limits.
     * Get MissedEmail
     */
    async getMissedEmailRaw(requestParameters: GetMissedEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MissedEmailDto>> {
        if (requestParameters['missedEmailId'] == null) {
            throw new runtime.RequiredError(
                'missedEmailId',
                'Required parameter "missedEmailId" was null or undefined when calling getMissedEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/missed-emails/{missedEmailId}`.replace(`{${"missedEmailId"}}`, encodeURIComponent(String(requestParameters['missedEmailId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MissedEmailDtoFromJSON(jsonValue));
    }

    /**
     * List emails that were missed due to plan limits.
     * Get MissedEmail
     */
    async getMissedEmail(requestParameters: GetMissedEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MissedEmailDto> {
        const response = await this.getMissedEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * If emails were missed due to a plan limit they are saved as missed emails. If support team enables the canRestore flag these emails can be reload into your account using this method.
     * Restore missed emails
     */
    async restoreMissedEmailsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/missed-emails/restore`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * If emails were missed due to a plan limit they are saved as missed emails. If support team enables the canRestore flag these emails can be reload into your account using this method.
     * Restore missed emails
     */
    async restoreMissedEmails(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.restoreMissedEmailsRaw(initOverrides);
    }

    /**
     * Wait for 0 based index missed email
     * Wait for Nth missed email
     */
    async waitForNthMissedEmailRaw(requestParameters: WaitForNthMissedEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MissedEmailDto>> {
        if (requestParameters['index'] == null) {
            throw new runtime.RequiredError(
                'index',
                'Required parameter "index" was null or undefined when calling waitForNthMissedEmail().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['inboxId'] != null) {
            queryParameters['inboxId'] = requestParameters['inboxId'];
        }

        if (requestParameters['timeout'] != null) {
            queryParameters['timeout'] = requestParameters['timeout'];
        }

        if (requestParameters['index'] != null) {
            queryParameters['index'] = requestParameters['index'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = (requestParameters['since'] as any).toISOString();
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = (requestParameters['before'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/missed-emails/waitForNthMissedEmail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MissedEmailDtoFromJSON(jsonValue));
    }

    /**
     * Wait for 0 based index missed email
     * Wait for Nth missed email
     */
    async waitForNthMissedEmail(requestParameters: WaitForNthMissedEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MissedEmailDto> {
        const response = await this.waitForNthMissedEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAllMissedEmailsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
} as const;
export type GetAllMissedEmailsSortEnum = typeof GetAllMissedEmailsSortEnum[keyof typeof GetAllMissedEmailsSortEnum];
/**
 * @export
 */
export const GetAllUnknownMissedEmailsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
} as const;
export type GetAllUnknownMissedEmailsSortEnum = typeof GetAllUnknownMissedEmailsSortEnum[keyof typeof GetAllUnknownMissedEmailsSortEnum];
