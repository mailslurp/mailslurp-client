/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDomainOptions,
  DomainDto,
  DomainGroupsDto,
  DomainIssuesDto,
  DomainPreview,
  InboxDto,
  UpdateDomainOptions,
} from '../models/index';
import {
    CreateDomainOptionsFromJSON,
    CreateDomainOptionsToJSON,
    DomainDtoFromJSON,
    DomainDtoToJSON,
    DomainGroupsDtoFromJSON,
    DomainGroupsDtoToJSON,
    DomainIssuesDtoFromJSON,
    DomainIssuesDtoToJSON,
    DomainPreviewFromJSON,
    DomainPreviewToJSON,
    InboxDtoFromJSON,
    InboxDtoToJSON,
    UpdateDomainOptionsFromJSON,
    UpdateDomainOptionsToJSON,
} from '../models/index';

export interface AddDomainWildcardCatchAllRequest {
    id: string;
}

export interface CreateDomainRequest {
    createDomainOptions: CreateDomainOptions;
}

export interface DeleteDomainRequest {
    id: string;
}

export interface GetAvailableDomainsRequest {
    inboxType?: GetAvailableDomainsInboxTypeEnum;
}

export interface GetDomainRequest {
    id: string;
    checkForErrors?: boolean;
}

export interface GetDomainWildcardCatchAllInboxRequest {
    id: string;
}

export interface GetMailSlurpDomainsRequest {
    inboxType?: GetMailSlurpDomainsInboxTypeEnum;
}

export interface UpdateDomainRequest {
    id: string;
    updateDomainOptions: UpdateDomainOptions;
}

/**
 * 
 */
export class DomainControllerApi extends runtime.BaseAPI {

    /**
     * Add a catch all inbox to a domain so that any emails sent to it that cannot be matched will be sent to the catch all inbox generated
     * Add catch all wild card inbox to domain
     */
    async addDomainWildcardCatchAllRaw(requestParameters: AddDomainWildcardCatchAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addDomainWildcardCatchAll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/domains/{id}/wildcard`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainDtoFromJSON(jsonValue));
    }

    /**
     * Add a catch all inbox to a domain so that any emails sent to it that cannot be matched will be sent to the catch all inbox generated
     * Add catch all wild card inbox to domain
     */
    async addDomainWildcardCatchAll(requestParameters: AddDomainWildcardCatchAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainDto> {
        const response = await this.addDomainWildcardCatchAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Link a domain that you own with MailSlurp so you can create email addresses using it. Endpoint returns DNS records used for validation. You must add these verification records to your host provider\'s DNS setup to verify the domain.
     * Create Domain
     */
    async createDomainRaw(requestParameters: CreateDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainDto>> {
        if (requestParameters['createDomainOptions'] == null) {
            throw new runtime.RequiredError(
                'createDomainOptions',
                'Required parameter "createDomainOptions" was null or undefined when calling createDomain().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/domains`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDomainOptionsToJSON(requestParameters['createDomainOptions']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainDtoFromJSON(jsonValue));
    }

    /**
     * Link a domain that you own with MailSlurp so you can create email addresses using it. Endpoint returns DNS records used for validation. You must add these verification records to your host provider\'s DNS setup to verify the domain.
     * Create Domain
     */
    async createDomain(requestParameters: CreateDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainDto> {
        const response = await this.createDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a domain. This will disable any existing inboxes that use this domain.
     * Delete a domain
     */
    async deleteDomainRaw(requestParameters: DeleteDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteDomain().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/domains/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a domain. This will disable any existing inboxes that use this domain.
     * Delete a domain
     */
    async deleteDomain(requestParameters: DeleteDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.deleteDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all domains available for use with email address creation
     * Get all usable domains
     */
    async getAvailableDomainsRaw(requestParameters: GetAvailableDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainGroupsDto>> {
        const queryParameters: any = {};

        if (requestParameters['inboxType'] != null) {
            queryParameters['inboxType'] = requestParameters['inboxType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/domains/available-domains`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainGroupsDtoFromJSON(jsonValue));
    }

    /**
     * List all domains available for use with email address creation
     * Get all usable domains
     */
    async getAvailableDomains(requestParameters: GetAvailableDomainsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainGroupsDto> {
        const response = await this.getAvailableDomainsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns domain verification status and tokens for a given domain
     * Get a domain
     */
    async getDomainRaw(requestParameters: GetDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDomain().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['checkForErrors'] != null) {
            queryParameters['checkForErrors'] = requestParameters['checkForErrors'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/domains/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainDtoFromJSON(jsonValue));
    }

    /**
     * Returns domain verification status and tokens for a given domain
     * Get a domain
     */
    async getDomain(requestParameters: GetDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainDto> {
        const response = await this.getDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List domain issues for domains you have created
     * Get domain issues
     */
    async getDomainIssuesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainIssuesDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/domains/issues`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainIssuesDtoFromJSON(jsonValue));
    }

    /**
     * List domain issues for domains you have created
     * Get domain issues
     */
    async getDomainIssues(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainIssuesDto> {
        const response = await this.getDomainIssuesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the catch all inbox for a domain for missed emails
     * Get catch all wild card inbox for domain
     */
    async getDomainWildcardCatchAllInboxRaw(requestParameters: GetDomainWildcardCatchAllInboxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InboxDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getDomainWildcardCatchAllInbox().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/domains/{id}/wildcard`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InboxDtoFromJSON(jsonValue));
    }

    /**
     * Get the catch all inbox for a domain for missed emails
     * Get catch all wild card inbox for domain
     */
    async getDomainWildcardCatchAllInbox(requestParameters: GetDomainWildcardCatchAllInboxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InboxDto> {
        const response = await this.getDomainWildcardCatchAllInboxRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all custom domains you have created
     * Get domains
     */
    async getDomainsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DomainPreview>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/domains`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainPreviewFromJSON));
    }

    /**
     * List all custom domains you have created
     * Get domains
     */
    async getDomains(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DomainPreview>> {
        const response = await this.getDomainsRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all MailSlurp domains used with non-custom email addresses
     * Get MailSlurp domains
     */
    async getMailSlurpDomainsRaw(requestParameters: GetMailSlurpDomainsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainGroupsDto>> {
        const queryParameters: any = {};

        if (requestParameters['inboxType'] != null) {
            queryParameters['inboxType'] = requestParameters['inboxType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/domains/mailslurp-domains`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainGroupsDtoFromJSON(jsonValue));
    }

    /**
     * List all MailSlurp domains used with non-custom email addresses
     * Get MailSlurp domains
     */
    async getMailSlurpDomains(requestParameters: GetMailSlurpDomainsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainGroupsDto> {
        const response = await this.getMailSlurpDomainsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update values on a domain. Note you cannot change the domain name as it is immutable. Recreate the domain if you need to alter this.
     * Update a domain
     */
    async updateDomainRaw(requestParameters: UpdateDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateDomain().'
            );
        }

        if (requestParameters['updateDomainOptions'] == null) {
            throw new runtime.RequiredError(
                'updateDomainOptions',
                'Required parameter "updateDomainOptions" was null or undefined when calling updateDomain().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/domains/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDomainOptionsToJSON(requestParameters['updateDomainOptions']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainDtoFromJSON(jsonValue));
    }

    /**
     * Update values on a domain. Note you cannot change the domain name as it is immutable. Recreate the domain if you need to alter this.
     * Update a domain
     */
    async updateDomain(requestParameters: UpdateDomainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainDto> {
        const response = await this.updateDomainRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAvailableDomainsInboxTypeEnum = {
    HTTP_INBOX: 'HTTP_INBOX',
    SMTP_INBOX: 'SMTP_INBOX'
} as const;
export type GetAvailableDomainsInboxTypeEnum = typeof GetAvailableDomainsInboxTypeEnum[keyof typeof GetAvailableDomainsInboxTypeEnum];
/**
 * @export
 */
export const GetMailSlurpDomainsInboxTypeEnum = {
    HTTP_INBOX: 'HTTP_INBOX',
    SMTP_INBOX: 'SMTP_INBOX'
} as const;
export type GetMailSlurpDomainsInboxTypeEnum = typeof GetMailSlurpDomainsInboxTypeEnum[keyof typeof GetMailSlurpDomainsInboxTypeEnum];
