/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  GenerateStructuredContentAttachmentOptions,
  GenerateStructuredContentAttachmentOptionsFromJSON,
  GenerateStructuredContentAttachmentOptionsToJSON,
  GenerateStructuredContentEmailOptions,
  GenerateStructuredContentEmailOptionsFromJSON,
  GenerateStructuredContentEmailOptionsToJSON,
  StructuredContentResult,
  StructuredContentResultFromJSON,
  StructuredContentResultToJSON,
  StructuredOutputSchema,
  StructuredOutputSchemaFromJSON,
  StructuredOutputSchemaToJSON,
  StructuredOutputSchemaValidation,
  StructuredOutputSchemaValidationFromJSON,
  StructuredOutputSchemaValidationToJSON,
} from '../models';

export interface GenerateStructuredContentFromAttachmentRequest {
  generateStructuredContentAttachmentOptions: GenerateStructuredContentAttachmentOptions;
}

export interface GenerateStructuredContentFromEmailRequest {
  generateStructuredContentEmailOptions: GenerateStructuredContentEmailOptions;
}

export interface ValidateStructuredOutputSchemaRequest {
  structuredOutputSchema: StructuredOutputSchema;
}

/**
 *
 */
export class AIControllerApi extends runtime.BaseAPI {
  /**
   * Use output schemas to extract data from an attachment using AI
   * Generate structured content for an attachment
   */
  async generateStructuredContentFromAttachmentRaw(
    requestParameters: GenerateStructuredContentFromAttachmentRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<StructuredContentResult>> {
    if (
      requestParameters.generateStructuredContentAttachmentOptions === null ||
      requestParameters.generateStructuredContentAttachmentOptions === undefined
    ) {
      throw new runtime.RequiredError(
        'generateStructuredContentAttachmentOptions',
        'Required parameter requestParameters.generateStructuredContentAttachmentOptions was null or undefined when calling generateStructuredContentFromAttachment.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['x-api-key'] = this.configuration.apiKey('x-api-key'); // API_KEY authentication
    }

    const response = await this.request(
      {
        path: `/ai/structured-content/attachment`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: GenerateStructuredContentAttachmentOptionsToJSON(
          requestParameters.generateStructuredContentAttachmentOptions
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StructuredContentResultFromJSON(jsonValue)
    );
  }

  /**
   * Use output schemas to extract data from an attachment using AI
   * Generate structured content for an attachment
   */
  async generateStructuredContentFromAttachment(
    requestParameters: GenerateStructuredContentFromAttachmentRequest,
    initOverrides?: RequestInit
  ): Promise<StructuredContentResult> {
    const response = await this.generateStructuredContentFromAttachmentRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Use output schemas to extract data from an email using AI
   * Generate structured content for an email
   */
  async generateStructuredContentFromEmailRaw(
    requestParameters: GenerateStructuredContentFromEmailRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<StructuredContentResult>> {
    if (
      requestParameters.generateStructuredContentEmailOptions === null ||
      requestParameters.generateStructuredContentEmailOptions === undefined
    ) {
      throw new runtime.RequiredError(
        'generateStructuredContentEmailOptions',
        'Required parameter requestParameters.generateStructuredContentEmailOptions was null or undefined when calling generateStructuredContentFromEmail.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['x-api-key'] = this.configuration.apiKey('x-api-key'); // API_KEY authentication
    }

    const response = await this.request(
      {
        path: `/ai/structured-content/email`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: GenerateStructuredContentEmailOptionsToJSON(
          requestParameters.generateStructuredContentEmailOptions
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StructuredContentResultFromJSON(jsonValue)
    );
  }

  /**
   * Use output schemas to extract data from an email using AI
   * Generate structured content for an email
   */
  async generateStructuredContentFromEmail(
    requestParameters: GenerateStructuredContentFromEmailRequest,
    initOverrides?: RequestInit
  ): Promise<StructuredContentResult> {
    const response = await this.generateStructuredContentFromEmailRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Check if a schema is valid and can be used to extract data using AI
   * Validate structured content schema
   */
  async validateStructuredOutputSchemaRaw(
    requestParameters: ValidateStructuredOutputSchemaRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<StructuredOutputSchemaValidation>> {
    if (
      requestParameters.structuredOutputSchema === null ||
      requestParameters.structuredOutputSchema === undefined
    ) {
      throw new runtime.RequiredError(
        'structuredOutputSchema',
        'Required parameter requestParameters.structuredOutputSchema was null or undefined when calling validateStructuredOutputSchema.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['x-api-key'] = this.configuration.apiKey('x-api-key'); // API_KEY authentication
    }

    const response = await this.request(
      {
        path: `/ai/structured-content/validate`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: StructuredOutputSchemaToJSON(
          requestParameters.structuredOutputSchema
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      StructuredOutputSchemaValidationFromJSON(jsonValue)
    );
  }

  /**
   * Check if a schema is valid and can be used to extract data using AI
   * Validate structured content schema
   */
  async validateStructuredOutputSchema(
    requestParameters: ValidateStructuredOutputSchemaRequest,
    initOverrides?: RequestInit
  ): Promise<StructuredOutputSchemaValidation> {
    const response = await this.validateStructuredOutputSchemaRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
