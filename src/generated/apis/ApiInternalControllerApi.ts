/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  GetOrCreateSamlUserOptions,
  GetOrCreateSamlUserOptionsFromJSON,
  GetOrCreateSamlUserOptionsToJSON,
  UserDto,
  UserDtoFromJSON,
  UserDtoToJSON,
} from '../models';

export interface GetSamlUserOrCreateRequest {
  key: string;
  getOrCreateSamlUserOptions: GetOrCreateSamlUserOptions;
}

/**
 *
 */
export class ApiInternalControllerApi extends runtime.BaseAPI {
  /**
   */
  async getSamlUserOrCreateRaw(
    requestParameters: GetSamlUserOrCreateRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<UserDto>> {
    if (requestParameters.key === null || requestParameters.key === undefined) {
      throw new runtime.RequiredError(
        'key',
        'Required parameter requestParameters.key was null or undefined when calling getSamlUserOrCreate.'
      );
    }

    if (
      requestParameters.getOrCreateSamlUserOptions === null ||
      requestParameters.getOrCreateSamlUserOptions === undefined
    ) {
      throw new runtime.RequiredError(
        'getOrCreateSamlUserOptions',
        'Required parameter requestParameters.getOrCreateSamlUserOptions was null or undefined when calling getSamlUserOrCreate.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.key !== undefined) {
      queryParameters['key'] = requestParameters.key;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['x-api-key'] = this.configuration.apiKey('x-api-key'); // API_KEY authentication
    }

    const response = await this.request(
      {
        path: `/internal/saml/user`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: GetOrCreateSamlUserOptionsToJSON(
          requestParameters.getOrCreateSamlUserOptions
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserDtoFromJSON(jsonValue)
    );
  }

  /**
   */
  async getSamlUserOrCreate(
    requestParameters: GetSamlUserOrCreateRequest,
    initOverrides?: RequestInit
  ): Promise<UserDto> {
    const response = await this.getSamlUserOrCreateRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
