/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InboxDto,
  SimpleSendEmailOptions,
} from '../models/index';
import {
    InboxDtoFromJSON,
    InboxDtoToJSON,
    SimpleSendEmailOptionsFromJSON,
    SimpleSendEmailOptionsToJSON,
} from '../models/index';

export interface CreateNewEmailAddressRequest {
    allowTeamAccess?: boolean;
    useDomainPool?: boolean;
    expiresAt?: Date;
    expiresIn?: number;
    emailAddress?: string;
    inboxType?: CreateNewEmailAddressInboxTypeEnum;
    description?: string;
    name?: string;
    tags?: Array<string>;
    favourite?: boolean;
    virtualInbox?: boolean;
    useShortAddress?: boolean;
    domainName?: string;
    domainId?: string;
    prefix?: string;
}

export interface CreateRandomInboxRequest {
    allowTeamAccess?: boolean;
    useDomainPool?: boolean;
    expiresAt?: Date;
    expiresIn?: number;
    emailAddress?: string;
    inboxType?: CreateRandomInboxInboxTypeEnum;
    description?: string;
    name?: string;
    tags?: Array<string>;
    favourite?: boolean;
    virtualInbox?: boolean;
    useShortAddress?: boolean;
    domainName?: string;
    domainId?: string;
    prefix?: string;
}

export interface DeleteEmailAddressRequest {
    inboxId: string;
}

export interface EmptyInboxRequest {
    inboxId: string;
}

export interface SendEmailQueryRequest {
    to: string;
    senderId?: string;
    body?: string;
    subject?: string;
}

export interface SendEmailSimpleRequest {
    simpleSendEmailOptions: SimpleSendEmailOptions;
}

/**
 * 
 */
export class CommonActionsControllerApi extends runtime.BaseAPI {

    /**
     * Returns an Inbox with an `id` and an `emailAddress`
     * Create new random inbox
     */
    async createNewEmailAddressRaw(requestParameters: CreateNewEmailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InboxDto>> {
        const queryParameters: any = {};

        if (requestParameters['allowTeamAccess'] != null) {
            queryParameters['allowTeamAccess'] = requestParameters['allowTeamAccess'];
        }

        if (requestParameters['useDomainPool'] != null) {
            queryParameters['useDomainPool'] = requestParameters['useDomainPool'];
        }

        if (requestParameters['expiresAt'] != null) {
            queryParameters['expiresAt'] = (requestParameters['expiresAt'] as any).toISOString();
        }

        if (requestParameters['expiresIn'] != null) {
            queryParameters['expiresIn'] = requestParameters['expiresIn'];
        }

        if (requestParameters['emailAddress'] != null) {
            queryParameters['emailAddress'] = requestParameters['emailAddress'];
        }

        if (requestParameters['inboxType'] != null) {
            queryParameters['inboxType'] = requestParameters['inboxType'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['favourite'] != null) {
            queryParameters['favourite'] = requestParameters['favourite'];
        }

        if (requestParameters['virtualInbox'] != null) {
            queryParameters['virtualInbox'] = requestParameters['virtualInbox'];
        }

        if (requestParameters['useShortAddress'] != null) {
            queryParameters['useShortAddress'] = requestParameters['useShortAddress'];
        }

        if (requestParameters['domainName'] != null) {
            queryParameters['domainName'] = requestParameters['domainName'];
        }

        if (requestParameters['domainId'] != null) {
            queryParameters['domainId'] = requestParameters['domainId'];
        }

        if (requestParameters['prefix'] != null) {
            queryParameters['prefix'] = requestParameters['prefix'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/newEmailAddress`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InboxDtoFromJSON(jsonValue));
    }

    /**
     * Returns an Inbox with an `id` and an `emailAddress`
     * Create new random inbox
     */
    async createNewEmailAddress(requestParameters: CreateNewEmailAddressRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InboxDto> {
        const response = await this.createNewEmailAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns an Inbox with an `id` and an `emailAddress`
     * Create new random inbox
     */
    async createRandomInboxRaw(requestParameters: CreateRandomInboxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InboxDto>> {
        const queryParameters: any = {};

        if (requestParameters['allowTeamAccess'] != null) {
            queryParameters['allowTeamAccess'] = requestParameters['allowTeamAccess'];
        }

        if (requestParameters['useDomainPool'] != null) {
            queryParameters['useDomainPool'] = requestParameters['useDomainPool'];
        }

        if (requestParameters['expiresAt'] != null) {
            queryParameters['expiresAt'] = (requestParameters['expiresAt'] as any).toISOString();
        }

        if (requestParameters['expiresIn'] != null) {
            queryParameters['expiresIn'] = requestParameters['expiresIn'];
        }

        if (requestParameters['emailAddress'] != null) {
            queryParameters['emailAddress'] = requestParameters['emailAddress'];
        }

        if (requestParameters['inboxType'] != null) {
            queryParameters['inboxType'] = requestParameters['inboxType'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['favourite'] != null) {
            queryParameters['favourite'] = requestParameters['favourite'];
        }

        if (requestParameters['virtualInbox'] != null) {
            queryParameters['virtualInbox'] = requestParameters['virtualInbox'];
        }

        if (requestParameters['useShortAddress'] != null) {
            queryParameters['useShortAddress'] = requestParameters['useShortAddress'];
        }

        if (requestParameters['domainName'] != null) {
            queryParameters['domainName'] = requestParameters['domainName'];
        }

        if (requestParameters['domainId'] != null) {
            queryParameters['domainId'] = requestParameters['domainId'];
        }

        if (requestParameters['prefix'] != null) {
            queryParameters['prefix'] = requestParameters['prefix'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/createInbox`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InboxDtoFromJSON(jsonValue));
    }

    /**
     * Returns an Inbox with an `id` and an `emailAddress`
     * Create new random inbox
     */
    async createRandomInbox(requestParameters: CreateRandomInboxRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InboxDto> {
        const response = await this.createRandomInboxRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes inbox email address
     * Delete inbox email address by inbox id
     */
    async deleteEmailAddressRaw(requestParameters: DeleteEmailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['inboxId'] == null) {
            throw new runtime.RequiredError(
                'inboxId',
                'Required parameter "inboxId" was null or undefined when calling deleteEmailAddress().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['inboxId'] != null) {
            queryParameters['inboxId'] = requestParameters['inboxId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/deleteEmailAddress`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes inbox email address
     * Delete inbox email address by inbox id
     */
    async deleteEmailAddress(requestParameters: DeleteEmailAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEmailAddressRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes all emails
     * Delete all emails in an inbox
     */
    async emptyInboxRaw(requestParameters: EmptyInboxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['inboxId'] == null) {
            throw new runtime.RequiredError(
                'inboxId',
                'Required parameter "inboxId" was null or undefined when calling emptyInbox().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['inboxId'] != null) {
            queryParameters['inboxId'] = requestParameters['inboxId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/emptyInbox`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes all emails
     * Delete all emails in an inbox
     */
    async emptyInbox(requestParameters: EmptyInboxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.emptyInboxRaw(requestParameters, initOverrides);
    }

    /**
     * If no senderId or inboxId provided a random email address will be used to send from. Ensure your parameters are URL encoded.
     * Send an email using query parameters
     */
    async sendEmailQueryRaw(requestParameters: SendEmailQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling sendEmailQuery().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['senderId'] != null) {
            queryParameters['senderId'] = requestParameters['senderId'];
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = requestParameters['to'];
        }

        if (requestParameters['body'] != null) {
            queryParameters['body'] = requestParameters['body'];
        }

        if (requestParameters['subject'] != null) {
            queryParameters['subject'] = requestParameters['subject'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/sendEmailQuery`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * If no senderId or inboxId provided a random email address will be used to send from. Ensure your parameters are URL encoded.
     * Send an email using query parameters
     */
    async sendEmailQuery(requestParameters: SendEmailQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendEmailQueryRaw(requestParameters, initOverrides);
    }

    /**
     * If no senderId or inboxId provided a random email address will be used to send from.
     * Send an email
     */
    async sendEmailSimpleRaw(requestParameters: SendEmailSimpleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['simpleSendEmailOptions'] == null) {
            throw new runtime.RequiredError(
                'simpleSendEmailOptions',
                'Required parameter "simpleSendEmailOptions" was null or undefined when calling sendEmailSimple().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/sendEmail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SimpleSendEmailOptionsToJSON(requestParameters['simpleSendEmailOptions']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * If no senderId or inboxId provided a random email address will be used to send from.
     * Send an email
     */
    async sendEmailSimple(requestParameters: SendEmailSimpleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendEmailSimpleRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const CreateNewEmailAddressInboxTypeEnum = {
    HTTP_INBOX: 'HTTP_INBOX',
    SMTP_INBOX: 'SMTP_INBOX'
} as const;
export type CreateNewEmailAddressInboxTypeEnum = typeof CreateNewEmailAddressInboxTypeEnum[keyof typeof CreateNewEmailAddressInboxTypeEnum];
/**
 * @export
 */
export const CreateRandomInboxInboxTypeEnum = {
    HTTP_INBOX: 'HTTP_INBOX',
    SMTP_INBOX: 'SMTP_INBOX'
} as const;
export type CreateRandomInboxInboxTypeEnum = typeof CreateRandomInboxInboxTypeEnum[keyof typeof CreateRandomInboxInboxTypeEnum];
