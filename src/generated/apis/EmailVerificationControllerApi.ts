/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  PageEmailValidationRequest,
  PageEmailValidationRequestFromJSON,
  PageEmailValidationRequestToJSON,
  ValidateEmailAddressListOptions,
  ValidateEmailAddressListOptionsFromJSON,
  ValidateEmailAddressListOptionsToJSON,
  ValidateEmailAddressListResult,
  ValidateEmailAddressListResultFromJSON,
  ValidateEmailAddressListResultToJSON,
} from '../models';

export interface GetValidationRequestsRequest {
  page?: number;
  size?: number;
  sort?: GetValidationRequestsSortEnum;
  searchFilter?: string;
  since?: Date;
  before?: Date;
  isValid?: boolean;
}

export interface ValidateEmailAddressListRequest {
  validateEmailAddressListOptions: ValidateEmailAddressListOptions;
}

/**
 *
 */
export class EmailVerificationControllerApi extends runtime.BaseAPI {
  /**
   * Validate a list of email addresses. Per unit billing. See your plan for pricing.
   */
  async getValidationRequestsRaw(
    requestParameters: GetValidationRequestsRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<PageEmailValidationRequest>> {
    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters['page'] = requestParameters.page;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    if (requestParameters.sort !== undefined) {
      queryParameters['sort'] = requestParameters.sort;
    }

    if (requestParameters.searchFilter !== undefined) {
      queryParameters['searchFilter'] = requestParameters.searchFilter;
    }

    if (requestParameters.since !== undefined) {
      queryParameters['since'] = (requestParameters.since as any).toISOString();
    }

    if (requestParameters.before !== undefined) {
      queryParameters['before'] = (
        requestParameters.before as any
      ).toISOString();
    }

    if (requestParameters.isValid !== undefined) {
      queryParameters['isValid'] = requestParameters.isValid;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['x-api-key'] = this.configuration.apiKey('x-api-key'); // API_KEY authentication
    }

    const response = await this.request(
      {
        path: `/email-verification/validation-requests`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PageEmailValidationRequestFromJSON(jsonValue)
    );
  }

  /**
   * Validate a list of email addresses. Per unit billing. See your plan for pricing.
   */
  async getValidationRequests(
    requestParameters: GetValidationRequestsRequest,
    initOverrides?: RequestInit
  ): Promise<PageEmailValidationRequest> {
    const response = await this.getValidationRequestsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Validate a list of email addresses. Per unit billing. See your plan for pricing.
   */
  async validateEmailAddressListRaw(
    requestParameters: ValidateEmailAddressListRequest,
    initOverrides?: RequestInit
  ): Promise<runtime.ApiResponse<ValidateEmailAddressListResult>> {
    if (
      requestParameters.validateEmailAddressListOptions === null ||
      requestParameters.validateEmailAddressListOptions === undefined
    ) {
      throw new runtime.RequiredError(
        'validateEmailAddressListOptions',
        'Required parameter requestParameters.validateEmailAddressListOptions was null or undefined when calling validateEmailAddressList.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['x-api-key'] = this.configuration.apiKey('x-api-key'); // API_KEY authentication
    }

    const response = await this.request(
      {
        path: `/email-verification/email-address-list`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ValidateEmailAddressListOptionsToJSON(
          requestParameters.validateEmailAddressListOptions
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ValidateEmailAddressListResultFromJSON(jsonValue)
    );
  }

  /**
   * Validate a list of email addresses. Per unit billing. See your plan for pricing.
   */
  async validateEmailAddressList(
    requestParameters: ValidateEmailAddressListRequest,
    initOverrides?: RequestInit
  ): Promise<ValidateEmailAddressListResult> {
    const response = await this.validateEmailAddressListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}

/**
 * @export
 * @enum {string}
 */
export enum GetValidationRequestsSortEnum {
  ASC = 'ASC',
  DESC = 'DESC',
}
