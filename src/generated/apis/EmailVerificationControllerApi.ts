/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PageEmailValidationRequest,
  ValidateEmailAddressListOptions,
  ValidateEmailAddressListResult,
} from '../models/index';
import {
    PageEmailValidationRequestFromJSON,
    PageEmailValidationRequestToJSON,
    ValidateEmailAddressListOptionsFromJSON,
    ValidateEmailAddressListOptionsToJSON,
    ValidateEmailAddressListResultFromJSON,
    ValidateEmailAddressListResultToJSON,
} from '../models/index';

export interface DeleteValidationRequestRequest {
    id: string;
}

export interface GetValidationRequestsRequest {
    page?: number;
    size?: number;
    sort?: GetValidationRequestsSortEnum;
    searchFilter?: string;
    since?: Date;
    before?: Date;
    isValid?: boolean;
}

export interface ValidateEmailAddressListRequest {
    validateEmailAddressListOptions: ValidateEmailAddressListOptions;
}

/**
 * 
 */
export class EmailVerificationControllerApi extends runtime.BaseAPI {

    /**
     * Delete all validation requests
     */
    async deleteAllValidationRequestsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/email-verification`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete all validation requests
     */
    async deleteAllValidationRequests(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAllValidationRequestsRaw(initOverrides);
    }

    /**
     * Delete a validation record
     */
    async deleteValidationRequestRaw(requestParameters: DeleteValidationRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteValidationRequest().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/email-verification/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a validation record
     */
    async deleteValidationRequest(requestParameters: DeleteValidationRequestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteValidationRequestRaw(requestParameters, initOverrides);
    }

    /**
     * Validate a list of email addresses. Per unit billing. See your plan for pricing.
     */
    async getValidationRequestsRaw(requestParameters: GetValidationRequestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageEmailValidationRequest>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['searchFilter'] != null) {
            queryParameters['searchFilter'] = requestParameters['searchFilter'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = (requestParameters['since'] as any).toISOString();
        }

        if (requestParameters['before'] != null) {
            queryParameters['before'] = (requestParameters['before'] as any).toISOString();
        }

        if (requestParameters['isValid'] != null) {
            queryParameters['isValid'] = requestParameters['isValid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/email-verification/validation-requests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageEmailValidationRequestFromJSON(jsonValue));
    }

    /**
     * Validate a list of email addresses. Per unit billing. See your plan for pricing.
     */
    async getValidationRequests(requestParameters: GetValidationRequestsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageEmailValidationRequest> {
        const response = await this.getValidationRequestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate a list of email addresses. Per unit billing. See your plan for pricing.
     */
    async validateEmailAddressListRaw(requestParameters: ValidateEmailAddressListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidateEmailAddressListResult>> {
        if (requestParameters['validateEmailAddressListOptions'] == null) {
            throw new runtime.RequiredError(
                'validateEmailAddressListOptions',
                'Required parameter "validateEmailAddressListOptions" was null or undefined when calling validateEmailAddressList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // API_KEY authentication
        }

        const response = await this.request({
            path: `/email-verification/email-address-list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ValidateEmailAddressListOptionsToJSON(requestParameters['validateEmailAddressListOptions']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidateEmailAddressListResultFromJSON(jsonValue));
    }

    /**
     * Validate a list of email addresses. Per unit billing. See your plan for pricing.
     */
    async validateEmailAddressList(requestParameters: ValidateEmailAddressListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidateEmailAddressListResult> {
        const response = await this.validateEmailAddressListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetValidationRequestsSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
} as const;
export type GetValidationRequestsSortEnum = typeof GetValidationRequestsSortEnum[keyof typeof GetValidationRequestsSortEnum];
