/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Email validation request
 * @export
 * @interface EmailValidationRequest
 */
export interface EmailValidationRequest {
  /**
   *
   * @type {string}
   * @memberof EmailValidationRequest
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof EmailValidationRequest
   */
  userId: string;
  /**
   *
   * @type {string}
   * @memberof EmailValidationRequest
   */
  emailAddress: string;
  /**
   *
   * @type {boolean}
   * @memberof EmailValidationRequest
   */
  isValid: boolean;
  /**
   *
   * @type {Date}
   * @memberof EmailValidationRequest
   */
  createdAt: Date;
  /**
   *
   * @type {Date}
   * @memberof EmailValidationRequest
   */
  updatedAt: Date;
}

export function EmailValidationRequestFromJSON(
  json: any
): EmailValidationRequest {
  return EmailValidationRequestFromJSONTyped(json, false);
}

export function EmailValidationRequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): EmailValidationRequest {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    userId: json['userId'],
    emailAddress: json['emailAddress'],
    isValid: json['isValid'],
    createdAt: new Date(json['createdAt']),
    updatedAt: new Date(json['updatedAt']),
  };
}

export function EmailValidationRequestToJSON(
  value?: EmailValidationRequest | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    userId: value.userId,
    emailAddress: value.emailAddress,
    isValid: value.isValid,
    createdAt: value.createdAt.toISOString(),
    updatedAt: value.updatedAt.toISOString(),
  };
}
