/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SmsMatchOption } from './SmsMatchOption';
import {
    SmsMatchOptionFromJSON,
    SmsMatchOptionFromJSONTyped,
    SmsMatchOptionToJSON,
    SmsMatchOptionToJSONTyped,
} from './SmsMatchOption';

/**
 * Conditions to apply to emails that you are waiting for
 * @export
 * @interface WaitForSmsConditions
 */
export interface WaitForSmsConditions {
    /**
     * ID of phone number to search within and apply conditions to. Essentially filtering the SMS found to give a count.
     * @type {string}
     * @memberof WaitForSmsConditions
     */
    phoneNumberId: string;
    /**
     * Limit results
     * @type {number}
     * @memberof WaitForSmsConditions
     */
    limit?: number | null;
    /**
     * Number of results that should match conditions. Either exactly or at least this amount based on the `countType`. If count condition is not met and the timeout has not been reached the `waitFor` method will retry the operation.
     * @type {number}
     * @memberof WaitForSmsConditions
     */
    count: number;
    /**
     * Max time in milliseconds to wait between retries if a `timeout` is specified.
     * @type {number}
     * @memberof WaitForSmsConditions
     */
    delayTimeout?: number | null;
    /**
     * Max time in milliseconds to retry the `waitFor` operation until conditions are met.
     * @type {number}
     * @memberof WaitForSmsConditions
     */
    timeout: number;
    /**
     * Apply conditions only to **unread** SMS. All SMS messages begin with `read=false`. An SMS is marked `read=true` when an `SMS` has been returned to the user at least once. For example you have called `getSms` or `waitForSms` etc., or you have viewed the SMS in the dashboard.
     * @type {boolean}
     * @memberof WaitForSmsConditions
     */
    unreadOnly?: boolean | null;
    /**
     * How result size should be compared with the expected size. Exactly or at-least matching result?
     * @type {string}
     * @memberof WaitForSmsConditions
     */
    countType?: WaitForSmsConditionsCountTypeEnum | null;
    /**
     * Conditions that should be matched for an SMS to qualify for results. Each condition will be applied in order to each SMS within a phone number to filter a result list of matching SMSs you are waiting for.
     * @type {Array<SmsMatchOption>}
     * @memberof WaitForSmsConditions
     */
    matches?: Array<SmsMatchOption> | null;
    /**
     * Direction to sort matching SMSs by created time
     * @type {string}
     * @memberof WaitForSmsConditions
     */
    sortDirection?: WaitForSmsConditionsSortDirectionEnum | null;
    /**
     * ISO Date Time earliest time of SMS to consider. Filter for matching SMSs that were received after this date
     * @type {Date}
     * @memberof WaitForSmsConditions
     */
    since?: Date | null;
    /**
     * ISO Date Time latest time of SMS to consider. Filter for matching SMSs that were received before this date
     * @type {Date}
     * @memberof WaitForSmsConditions
     */
    before?: Date | null;
}


/**
 * @export
 */
export const WaitForSmsConditionsCountTypeEnum = {
    EXACTLY: 'EXACTLY',
    ATLEAST: 'ATLEAST'
} as const;
export type WaitForSmsConditionsCountTypeEnum = typeof WaitForSmsConditionsCountTypeEnum[keyof typeof WaitForSmsConditionsCountTypeEnum];

/**
 * @export
 */
export const WaitForSmsConditionsSortDirectionEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
} as const;
export type WaitForSmsConditionsSortDirectionEnum = typeof WaitForSmsConditionsSortDirectionEnum[keyof typeof WaitForSmsConditionsSortDirectionEnum];


/**
 * Check if a given object implements the WaitForSmsConditions interface.
 */
export function instanceOfWaitForSmsConditions(value: object): value is WaitForSmsConditions {
    if (!('phoneNumberId' in value) || value['phoneNumberId'] === undefined) return false;
    if (!('count' in value) || value['count'] === undefined) return false;
    if (!('timeout' in value) || value['timeout'] === undefined) return false;
    return true;
}

export function WaitForSmsConditionsFromJSON(json: any): WaitForSmsConditions {
    return WaitForSmsConditionsFromJSONTyped(json, false);
}

export function WaitForSmsConditionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): WaitForSmsConditions {
    if (json == null) {
        return json;
    }
    return {
        
        'phoneNumberId': json['phoneNumberId'],
        'limit': json['limit'] == null ? undefined : json['limit'],
        'count': json['count'],
        'delayTimeout': json['delayTimeout'] == null ? undefined : json['delayTimeout'],
        'timeout': json['timeout'],
        'unreadOnly': json['unreadOnly'] == null ? undefined : json['unreadOnly'],
        'countType': json['countType'] == null ? undefined : json['countType'],
        'matches': json['matches'] == null ? undefined : ((json['matches'] as Array<any>).map(SmsMatchOptionFromJSON)),
        'sortDirection': json['sortDirection'] == null ? undefined : json['sortDirection'],
        'since': json['since'] == null ? undefined : (new Date(json['since'])),
        'before': json['before'] == null ? undefined : (new Date(json['before'])),
    };
}

export function WaitForSmsConditionsToJSON(json: any): WaitForSmsConditions {
    return WaitForSmsConditionsToJSONTyped(json, false);
}

export function WaitForSmsConditionsToJSONTyped(value?: WaitForSmsConditions | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'phoneNumberId': value['phoneNumberId'],
        'limit': value['limit'],
        'count': value['count'],
        'delayTimeout': value['delayTimeout'],
        'timeout': value['timeout'],
        'unreadOnly': value['unreadOnly'],
        'countType': value['countType'],
        'matches': value['matches'] == null ? undefined : ((value['matches'] as Array<any>).map(SmsMatchOptionToJSON)),
        'sortDirection': value['sortDirection'],
        'since': value['since'] == null ? undefined : ((value['since'] as any).toISOString()),
        'before': value['before'] == null ? undefined : ((value['before'] as any).toISOString()),
    };
}

