/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface WaitForSingleSmsOptions
 */
export interface WaitForSingleSmsOptions {
    /**
     * 
     * @type {string}
     * @memberof WaitForSingleSmsOptions
     */
    phoneNumberId: string;
    /**
     * 
     * @type {number}
     * @memberof WaitForSingleSmsOptions
     */
    timeout: number;
    /**
     * 
     * @type {boolean}
     * @memberof WaitForSingleSmsOptions
     */
    unreadOnly?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof WaitForSingleSmsOptions
     */
    before?: Date;
    /**
     * 
     * @type {Date}
     * @memberof WaitForSingleSmsOptions
     */
    since?: Date;
    /**
     * 
     * @type {string}
     * @memberof WaitForSingleSmsOptions
     */
    sortDirection?: WaitForSingleSmsOptionsSortDirectionEnum;
    /**
     * 
     * @type {number}
     * @memberof WaitForSingleSmsOptions
     */
    delay?: number;
}


/**
 * @export
 */
export const WaitForSingleSmsOptionsSortDirectionEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
} as const;
export type WaitForSingleSmsOptionsSortDirectionEnum = typeof WaitForSingleSmsOptionsSortDirectionEnum[keyof typeof WaitForSingleSmsOptionsSortDirectionEnum];


/**
 * Check if a given object implements the WaitForSingleSmsOptions interface.
 */
export function instanceOfWaitForSingleSmsOptions(value: object): value is WaitForSingleSmsOptions {
    if (!('phoneNumberId' in value) || value['phoneNumberId'] === undefined) return false;
    if (!('timeout' in value) || value['timeout'] === undefined) return false;
    return true;
}

export function WaitForSingleSmsOptionsFromJSON(json: any): WaitForSingleSmsOptions {
    return WaitForSingleSmsOptionsFromJSONTyped(json, false);
}

export function WaitForSingleSmsOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): WaitForSingleSmsOptions {
    if (json == null) {
        return json;
    }
    return {
        
        'phoneNumberId': json['phoneNumberId'],
        'timeout': json['timeout'],
        'unreadOnly': json['unreadOnly'] == null ? undefined : json['unreadOnly'],
        'before': json['before'] == null ? undefined : (new Date(json['before'])),
        'since': json['since'] == null ? undefined : (new Date(json['since'])),
        'sortDirection': json['sortDirection'] == null ? undefined : json['sortDirection'],
        'delay': json['delay'] == null ? undefined : json['delay'],
    };
}

export function WaitForSingleSmsOptionsToJSON(json: any): WaitForSingleSmsOptions {
    return WaitForSingleSmsOptionsToJSONTyped(json, false);
}

export function WaitForSingleSmsOptionsToJSONTyped(value?: WaitForSingleSmsOptions | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'phoneNumberId': value['phoneNumberId'],
        'timeout': value['timeout'],
        'unreadOnly': value['unreadOnly'],
        'before': value['before'] == null ? undefined : ((value['before']).toISOString()),
        'since': value['since'] == null ? undefined : ((value['since']).toISOString()),
        'sortDirection': value['sortDirection'],
        'delay': value['delay'],
    };
}

