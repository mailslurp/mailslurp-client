/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Result of webhook test request
 * @export
 * @interface WebhookTestRequest
 */
export interface WebhookTestRequest {
    /**
     * 
     * @type {string}
     * @memberof WebhookTestRequest
     */
    url: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookTestRequest
     */
    method: WebhookTestRequestMethodEnum;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof WebhookTestRequest
     */
    headers: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof WebhookTestRequest
     */
    payload?: string | null;
}


/**
 * @export
 */
export const WebhookTestRequestMethodEnum = {
    POST: 'POST',
    DELETE: 'DELETE',
    GET: 'GET',
    PUT: 'PUT',
    PATCH: 'PATCH',
    HEAD: 'HEAD',
    OPTIONS: 'OPTIONS',
    TRACE: 'TRACE'
} as const;
export type WebhookTestRequestMethodEnum = typeof WebhookTestRequestMethodEnum[keyof typeof WebhookTestRequestMethodEnum];


/**
 * Check if a given object implements the WebhookTestRequest interface.
 */
export function instanceOfWebhookTestRequest(value: object): value is WebhookTestRequest {
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('method' in value) || value['method'] === undefined) return false;
    if (!('headers' in value) || value['headers'] === undefined) return false;
    return true;
}

export function WebhookTestRequestFromJSON(json: any): WebhookTestRequest {
    return WebhookTestRequestFromJSONTyped(json, false);
}

export function WebhookTestRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookTestRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'url': json['url'],
        'method': json['method'],
        'headers': json['headers'],
        'payload': json['payload'] == null ? undefined : json['payload'],
    };
}

export function WebhookTestRequestToJSON(json: any): WebhookTestRequest {
    return WebhookTestRequestToJSONTyped(json, false);
}

export function WebhookTestRequestToJSONTyped(value?: WebhookTestRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'url': value['url'],
        'method': value['method'],
        'headers': value['headers'],
        'payload': value['payload'],
    };
}

