/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DNSLookupResult } from './DNSLookupResult';
import {
    DNSLookupResultFromJSON,
    DNSLookupResultFromJSONTyped,
    DNSLookupResultToJSON,
    DNSLookupResultToJSONTyped,
} from './DNSLookupResult';
import type { DNSLookupOptions } from './DNSLookupOptions';
import {
    DNSLookupOptionsFromJSON,
    DNSLookupOptionsFromJSONTyped,
    DNSLookupOptionsToJSON,
    DNSLookupOptionsToJSONTyped,
} from './DNSLookupOptions';

/**
 * 
 * @export
 * @interface LookupBimiDomainResults
 */
export interface LookupBimiDomainResults {
    /**
     * 
     * @type {boolean}
     * @memberof LookupBimiDomainResults
     */
    valid: boolean;
    /**
     * 
     * @type {DNSLookupOptions}
     * @memberof LookupBimiDomainResults
     */
    query: DNSLookupOptions;
    /**
     * 
     * @type {Array<DNSLookupResult>}
     * @memberof LookupBimiDomainResults
     */
    records: Array<DNSLookupResult>;
    /**
     * 
     * @type {Array<string>}
     * @memberof LookupBimiDomainResults
     */
    errors: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof LookupBimiDomainResults
     */
    warnings: Array<string>;
}

/**
 * Check if a given object implements the LookupBimiDomainResults interface.
 */
export function instanceOfLookupBimiDomainResults(value: object): value is LookupBimiDomainResults {
    if (!('valid' in value) || value['valid'] === undefined) return false;
    if (!('query' in value) || value['query'] === undefined) return false;
    if (!('records' in value) || value['records'] === undefined) return false;
    if (!('errors' in value) || value['errors'] === undefined) return false;
    if (!('warnings' in value) || value['warnings'] === undefined) return false;
    return true;
}

export function LookupBimiDomainResultsFromJSON(json: any): LookupBimiDomainResults {
    return LookupBimiDomainResultsFromJSONTyped(json, false);
}

export function LookupBimiDomainResultsFromJSONTyped(json: any, ignoreDiscriminator: boolean): LookupBimiDomainResults {
    if (json == null) {
        return json;
    }
    return {
        
        'valid': json['valid'],
        'query': DNSLookupOptionsFromJSON(json['query']),
        'records': ((json['records'] as Array<any>).map(DNSLookupResultFromJSON)),
        'errors': json['errors'],
        'warnings': json['warnings'],
    };
}

export function LookupBimiDomainResultsToJSON(json: any): LookupBimiDomainResults {
    return LookupBimiDomainResultsToJSONTyped(json, false);
}

export function LookupBimiDomainResultsToJSONTyped(value?: LookupBimiDomainResults | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'valid': value['valid'],
        'query': DNSLookupOptionsToJSON(value['query']),
        'records': ((value['records'] as Array<any>).map(DNSLookupResultToJSON)),
        'errors': value['errors'],
        'warnings': value['warnings'],
    };
}

