/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ContactDto } from './ContactDto';
import {
    ContactDtoFromJSON,
    ContactDtoFromJSONTyped,
    ContactDtoToJSON,
    ContactDtoToJSONTyped,
} from './ContactDto';
import type { GroupDto } from './GroupDto';
import {
    GroupDtoFromJSON,
    GroupDtoFromJSONTyped,
    GroupDtoToJSON,
    GroupDtoToJSONTyped,
} from './GroupDto';

/**
 * Describes contacts attached to a contact group
 * @export
 * @interface GroupContactsDto
 */
export interface GroupContactsDto {
    /**
     * 
     * @type {GroupDto}
     * @memberof GroupContactsDto
     */
    group: GroupDto;
    /**
     * 
     * @type {Array<ContactDto>}
     * @memberof GroupContactsDto
     */
    contacts: Array<ContactDto>;
}

/**
 * Check if a given object implements the GroupContactsDto interface.
 */
export function instanceOfGroupContactsDto(value: object): value is GroupContactsDto {
    if (!('group' in value) || value['group'] === undefined) return false;
    if (!('contacts' in value) || value['contacts'] === undefined) return false;
    return true;
}

export function GroupContactsDtoFromJSON(json: any): GroupContactsDto {
    return GroupContactsDtoFromJSONTyped(json, false);
}

export function GroupContactsDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupContactsDto {
    if (json == null) {
        return json;
    }
    return {
        
        'group': GroupDtoFromJSON(json['group']),
        'contacts': ((json['contacts'] as Array<any>).map(ContactDtoFromJSON)),
    };
}

export function GroupContactsDtoToJSON(json: any): GroupContactsDto {
    return GroupContactsDtoToJSONTyped(json, false);
}

export function GroupContactsDtoToJSONTyped(value?: GroupContactsDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'group': GroupDtoToJSON(value['group']),
        'contacts': ((value['contacts'] as Array<any>).map(ContactDtoToJSON)),
    };
}

