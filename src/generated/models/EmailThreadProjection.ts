/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmailRecipientsProjection } from './EmailRecipientsProjection';
import {
    EmailRecipientsProjectionFromJSON,
    EmailRecipientsProjectionFromJSONTyped,
    EmailRecipientsProjectionToJSON,
    EmailRecipientsProjectionToJSONTyped,
} from './EmailRecipientsProjection';
import type { SenderProjection } from './SenderProjection';
import {
    SenderProjectionFromJSON,
    SenderProjectionFromJSONTyped,
    SenderProjectionToJSON,
    SenderProjectionToJSONTyped,
} from './SenderProjection';

/**
 * An email thread is a message thread created for a email based on Message-ID, In-Reply-To, and References headers
 * @export
 * @interface EmailThreadProjection
 */
export interface EmailThreadProjection {
    /**
     * Thread topic subject
     * @type {string}
     * @memberof EmailThreadProjection
     */
    subject?: string;
    /**
     * Created at DateTime
     * @type {Date}
     * @memberof EmailThreadProjection
     */
    createdAt: Date;
    /**
     * Updated at DateTime
     * @type {Date}
     * @memberof EmailThreadProjection
     */
    updatedAt: Date;
    /**
     * 
     * @type {SenderProjection}
     * @memberof EmailThreadProjection
     */
    sender?: SenderProjection;
    /**
     * 
     * @type {EmailRecipientsProjection}
     * @memberof EmailThreadProjection
     */
    recipients?: EmailRecipientsProjection;
    /**
     * Inbox ID
     * @type {string}
     * @memberof EmailThreadProjection
     */
    inboxId?: string;
    /**
     * User ID
     * @type {string}
     * @memberof EmailThreadProjection
     */
    userId: string;
    /**
     * To recipients
     * @type {Array<string>}
     * @memberof EmailThreadProjection
     */
    to: Array<string>;
    /**
     * CC recipients
     * @type {Array<string>}
     * @memberof EmailThreadProjection
     */
    cc?: Array<string>;
    /**
     * BCC recipients
     * @type {Array<string>}
     * @memberof EmailThreadProjection
     */
    bcc?: Array<string>;
    /**
     * Has attachments
     * @type {boolean}
     * @memberof EmailThreadProjection
     */
    hasAttachments: boolean;
    /**
     * Has unread
     * @type {boolean}
     * @memberof EmailThreadProjection
     */
    unread: boolean;
    /**
     * Number of messages in the thread
     * @type {number}
     * @memberof EmailThreadProjection
     */
    messageCount: number;
    /**
     * Last body excerpt
     * @type {string}
     * @memberof EmailThreadProjection
     */
    lastBodyExcerpt?: string;
    /**
     * Last text excerpt
     * @type {string}
     * @memberof EmailThreadProjection
     */
    lastTextExcerpt?: string;
    /**
     * Last email created time
     * @type {Date}
     * @memberof EmailThreadProjection
     */
    lastCreatedAt?: Date;
    /**
     * Last sender
     * @type {string}
     * @memberof EmailThreadProjection
     */
    lastFrom?: string;
    /**
     * 
     * @type {SenderProjection}
     * @memberof EmailThreadProjection
     */
    lastSender?: SenderProjection;
    /**
     * ID of email thread
     * @type {string}
     * @memberof EmailThreadProjection
     */
    id: string;
    /**
     * From sender
     * @type {string}
     * @memberof EmailThreadProjection
     */
    from?: string;
}

/**
 * Check if a given object implements the EmailThreadProjection interface.
 */
export function instanceOfEmailThreadProjection(value: object): value is EmailThreadProjection {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('to' in value) || value['to'] === undefined) return false;
    if (!('hasAttachments' in value) || value['hasAttachments'] === undefined) return false;
    if (!('unread' in value) || value['unread'] === undefined) return false;
    if (!('messageCount' in value) || value['messageCount'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function EmailThreadProjectionFromJSON(json: any): EmailThreadProjection {
    return EmailThreadProjectionFromJSONTyped(json, false);
}

export function EmailThreadProjectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmailThreadProjection {
    if (json == null) {
        return json;
    }
    return {
        
        'subject': json['subject'] == null ? undefined : json['subject'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'sender': json['sender'] == null ? undefined : SenderProjectionFromJSON(json['sender']),
        'recipients': json['recipients'] == null ? undefined : EmailRecipientsProjectionFromJSON(json['recipients']),
        'inboxId': json['inboxId'] == null ? undefined : json['inboxId'],
        'userId': json['userId'],
        'to': json['to'],
        'cc': json['cc'] == null ? undefined : json['cc'],
        'bcc': json['bcc'] == null ? undefined : json['bcc'],
        'hasAttachments': json['hasAttachments'],
        'unread': json['unread'],
        'messageCount': json['messageCount'],
        'lastBodyExcerpt': json['lastBodyExcerpt'] == null ? undefined : json['lastBodyExcerpt'],
        'lastTextExcerpt': json['lastTextExcerpt'] == null ? undefined : json['lastTextExcerpt'],
        'lastCreatedAt': json['lastCreatedAt'] == null ? undefined : (new Date(json['lastCreatedAt'])),
        'lastFrom': json['lastFrom'] == null ? undefined : json['lastFrom'],
        'lastSender': json['lastSender'] == null ? undefined : SenderProjectionFromJSON(json['lastSender']),
        'id': json['id'],
        'from': json['from'] == null ? undefined : json['from'],
    };
}

export function EmailThreadProjectionToJSON(json: any): EmailThreadProjection {
    return EmailThreadProjectionToJSONTyped(json, false);
}

export function EmailThreadProjectionToJSONTyped(value?: EmailThreadProjection | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'subject': value['subject'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
        'sender': SenderProjectionToJSON(value['sender']),
        'recipients': EmailRecipientsProjectionToJSON(value['recipients']),
        'inboxId': value['inboxId'],
        'userId': value['userId'],
        'to': value['to'],
        'cc': value['cc'],
        'bcc': value['bcc'],
        'hasAttachments': value['hasAttachments'],
        'unread': value['unread'],
        'messageCount': value['messageCount'],
        'lastBodyExcerpt': value['lastBodyExcerpt'],
        'lastTextExcerpt': value['lastTextExcerpt'],
        'lastCreatedAt': value['lastCreatedAt'] == null ? undefined : ((value['lastCreatedAt']).toISOString()),
        'lastFrom': value['lastFrom'],
        'lastSender': SenderProjectionToJSON(value['lastSender']),
        'id': value['id'],
        'from': value['from'],
    };
}

