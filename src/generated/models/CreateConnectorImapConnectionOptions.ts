/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Options for IMAP connection to external email inbox. Allows syncing emails iva IMAP.
 * @export
 * @interface CreateConnectorImapConnectionOptions
 */
export interface CreateConnectorImapConnectionOptions {
  /**
   *
   * @type {boolean}
   * @memberof CreateConnectorImapConnectionOptions
   */
  imapSsl?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof CreateConnectorImapConnectionOptions
   */
  imapUsername?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateConnectorImapConnectionOptions
   */
  imapPassword?: string | null;
  /**
   * Optional folder to select during IMAP connection
   * @type {string}
   * @memberof CreateConnectorImapConnectionOptions
   */
  selectFolder?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateConnectorImapConnectionOptions
   */
  searchTerms?: string | null;
  /**
   * IMAP server port
   * @type {number}
   * @memberof CreateConnectorImapConnectionOptions
   */
  imapPort?: number | null;
  /**
   * IMAP server host
   * @type {string}
   * @memberof CreateConnectorImapConnectionOptions
   */
  imapHost: string;
  /**
   * IMAP server enabled
   * @type {boolean}
   * @memberof CreateConnectorImapConnectionOptions
   */
  enabled?: boolean | null;
}

export function CreateConnectorImapConnectionOptionsFromJSON(
  json: any
): CreateConnectorImapConnectionOptions {
  return CreateConnectorImapConnectionOptionsFromJSONTyped(json, false);
}

export function CreateConnectorImapConnectionOptionsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): CreateConnectorImapConnectionOptions {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    imapSsl: !exists(json, 'imapSsl') ? undefined : json['imapSsl'],
    imapUsername: !exists(json, 'imapUsername')
      ? undefined
      : json['imapUsername'],
    imapPassword: !exists(json, 'imapPassword')
      ? undefined
      : json['imapPassword'],
    selectFolder: !exists(json, 'selectFolder')
      ? undefined
      : json['selectFolder'],
    searchTerms: !exists(json, 'searchTerms') ? undefined : json['searchTerms'],
    imapPort: !exists(json, 'imapPort') ? undefined : json['imapPort'],
    imapHost: json['imapHost'],
    enabled: !exists(json, 'enabled') ? undefined : json['enabled'],
  };
}

export function CreateConnectorImapConnectionOptionsToJSON(
  value?: CreateConnectorImapConnectionOptions | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    imapSsl: value.imapSsl,
    imapUsername: value.imapUsername,
    imapPassword: value.imapPassword,
    selectFolder: value.selectFolder,
    searchTerms: value.searchTerms,
    imapPort: value.imapPort,
    imapHost: value.imapHost,
    enabled: value.enabled,
  };
}
