/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Expiration defaults for your account
 * @export
 * @interface ExpirationDefaults
 */
export interface ExpirationDefaults {
    /**
     * 
     * @type {number}
     * @memberof ExpirationDefaults
     */
    defaultExpirationMillis?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ExpirationDefaults
     */
    maxExpirationMillis?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof ExpirationDefaults
     */
    defaultExpiresAt?: Date | null;
    /**
     * 
     * @type {boolean}
     * @memberof ExpirationDefaults
     */
    canPermanentInbox: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ExpirationDefaults
     */
    nextInboxAllowsPermanent: boolean;
}

/**
 * Check if a given object implements the ExpirationDefaults interface.
 */
export function instanceOfExpirationDefaults(value: object): value is ExpirationDefaults {
    if (!('canPermanentInbox' in value) || value['canPermanentInbox'] === undefined) return false;
    if (!('nextInboxAllowsPermanent' in value) || value['nextInboxAllowsPermanent'] === undefined) return false;
    return true;
}

export function ExpirationDefaultsFromJSON(json: any): ExpirationDefaults {
    return ExpirationDefaultsFromJSONTyped(json, false);
}

export function ExpirationDefaultsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExpirationDefaults {
    if (json == null) {
        return json;
    }
    return {
        
        'defaultExpirationMillis': json['defaultExpirationMillis'] == null ? undefined : json['defaultExpirationMillis'],
        'maxExpirationMillis': json['maxExpirationMillis'] == null ? undefined : json['maxExpirationMillis'],
        'defaultExpiresAt': json['defaultExpiresAt'] == null ? undefined : (new Date(json['defaultExpiresAt'])),
        'canPermanentInbox': json['canPermanentInbox'],
        'nextInboxAllowsPermanent': json['nextInboxAllowsPermanent'],
    };
}

export function ExpirationDefaultsToJSON(json: any): ExpirationDefaults {
    return ExpirationDefaultsToJSONTyped(json, false);
}

export function ExpirationDefaultsToJSONTyped(value?: ExpirationDefaults | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'defaultExpirationMillis': value['defaultExpirationMillis'],
        'maxExpirationMillis': value['maxExpirationMillis'],
        'defaultExpiresAt': value['defaultExpiresAt'] == null ? undefined : ((value['defaultExpiresAt'] as any).toISOString()),
        'canPermanentInbox': value['canPermanentInbox'],
        'nextInboxAllowsPermanent': value['nextInboxAllowsPermanent'],
    };
}

