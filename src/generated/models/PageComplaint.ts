/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  Complaint,
  ComplaintFromJSON,
  ComplaintFromJSONTyped,
  ComplaintToJSON,
  PageableObject,
  PageableObjectFromJSON,
  PageableObjectFromJSONTyped,
  PageableObjectToJSON,
  Sort,
  SortFromJSON,
  SortFromJSONTyped,
  SortToJSON,
} from './';

/**
 * Paginated complaint email. Page index starts at zero. Projection results may omit larger entity fields. For fetching a full entity use the projection ID with individual method calls.
 * @export
 * @interface PageComplaint
 */
export interface PageComplaint {
  /**
   *
   * @type {Array<Complaint>}
   * @memberof PageComplaint
   */
  content?: Array<Complaint>;
  /**
   *
   * @type {PageableObject}
   * @memberof PageComplaint
   */
  pageable?: PageableObject;
  /**
   *
   * @type {number}
   * @memberof PageComplaint
   */
  total?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageComplaint
   */
  last?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageComplaint
   */
  totalElements?: number;
  /**
   *
   * @type {number}
   * @memberof PageComplaint
   */
  totalPages?: number;
  /**
   *
   * @type {number}
   * @memberof PageComplaint
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof PageComplaint
   */
  number?: number;
  /**
   *
   * @type {Sort}
   * @memberof PageComplaint
   */
  sort?: Sort;
  /**
   *
   * @type {boolean}
   * @memberof PageComplaint
   */
  first?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageComplaint
   */
  numberOfElements?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageComplaint
   */
  empty?: boolean;
}

export function PageComplaintFromJSON(json: any): PageComplaint {
  return PageComplaintFromJSONTyped(json, false);
}

export function PageComplaintFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): PageComplaint {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    content: !exists(json, 'content')
      ? undefined
      : (json['content'] as Array<any>).map(ComplaintFromJSON),
    pageable: !exists(json, 'pageable')
      ? undefined
      : PageableObjectFromJSON(json['pageable']),
    total: !exists(json, 'total') ? undefined : json['total'],
    last: !exists(json, 'last') ? undefined : json['last'],
    totalElements: !exists(json, 'totalElements')
      ? undefined
      : json['totalElements'],
    totalPages: !exists(json, 'totalPages') ? undefined : json['totalPages'],
    size: !exists(json, 'size') ? undefined : json['size'],
    number: !exists(json, 'number') ? undefined : json['number'],
    sort: !exists(json, 'sort') ? undefined : SortFromJSON(json['sort']),
    first: !exists(json, 'first') ? undefined : json['first'],
    numberOfElements: !exists(json, 'numberOfElements')
      ? undefined
      : json['numberOfElements'],
    empty: !exists(json, 'empty') ? undefined : json['empty'],
  };
}

export function PageComplaintToJSON(value?: PageComplaint | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    content:
      value.content === undefined
        ? undefined
        : (value.content as Array<any>).map(ComplaintToJSON),
    pageable: PageableObjectToJSON(value.pageable),
    total: value.total,
    last: value.last,
    totalElements: value.totalElements,
    totalPages: value.totalPages,
    size: value.size,
    number: value.number,
    sort: SortToJSON(value.sort),
    first: value.first,
    numberOfElements: value.numberOfElements,
    empty: value.empty,
  };
}
