/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  DNSLookupOptions,
  DNSLookupOptionsFromJSON,
  DNSLookupOptionsFromJSONTyped,
  DNSLookupOptionsToJSON,
  DNSLookupResult,
  DNSLookupResultFromJSON,
  DNSLookupResultFromJSONTyped,
  DNSLookupResultToJSON,
} from './';

/**
 *
 * @export
 * @interface LookupDmarcDomainResults
 */
export interface LookupDmarcDomainResults {
  /**
   *
   * @type {boolean}
   * @memberof LookupDmarcDomainResults
   */
  valid: boolean;
  /**
   *
   * @type {DNSLookupOptions}
   * @memberof LookupDmarcDomainResults
   */
  query: DNSLookupOptions;
  /**
   *
   * @type {Array<DNSLookupResult>}
   * @memberof LookupDmarcDomainResults
   */
  records: Array<DNSLookupResult>;
  /**
   *
   * @type {Array<string>}
   * @memberof LookupDmarcDomainResults
   */
  errors: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof LookupDmarcDomainResults
   */
  warnings: Array<string>;
}

export function LookupDmarcDomainResultsFromJSON(
  json: any
): LookupDmarcDomainResults {
  return LookupDmarcDomainResultsFromJSONTyped(json, false);
}

export function LookupDmarcDomainResultsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): LookupDmarcDomainResults {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    valid: json['valid'],
    query: DNSLookupOptionsFromJSON(json['query']),
    records: (json['records'] as Array<any>).map(DNSLookupResultFromJSON),
    errors: json['errors'],
    warnings: json['warnings'],
  };
}

export function LookupDmarcDomainResultsToJSON(
  value?: LookupDmarcDomainResults | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    valid: value.valid,
    query: DNSLookupOptionsToJSON(value.query),
    records: (value.records as Array<any>).map(DNSLookupResultToJSON),
    errors: value.errors,
    warnings: value.warnings,
  };
}
