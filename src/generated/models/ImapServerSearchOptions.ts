/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * IMAP server search options
 * @export
 * @interface ImapServerSearchOptions
 */
export interface ImapServerSearchOptions {
    /**
     * 
     * @type {string}
     * @memberof ImapServerSearchOptions
     */
    seqNum?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ImapServerSearchOptions
     */
    uid?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof ImapServerSearchOptions
     */
    since?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof ImapServerSearchOptions
     */
    before?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof ImapServerSearchOptions
     */
    sentSince?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof ImapServerSearchOptions
     */
    sentBefore?: Date | null;
    /**
     * 
     * @type {{ [key: string]: Array<string | null> | null; }}
     * @memberof ImapServerSearchOptions
     */
    header?: { [key: string]: Array<string | null> | null; } | null;
    /**
     * 
     * @type {Array<string | null>}
     * @memberof ImapServerSearchOptions
     */
    body?: Array<string | null> | null;
    /**
     * 
     * @type {Array<string | null>}
     * @memberof ImapServerSearchOptions
     */
    text?: Array<string | null> | null;
    /**
     * 
     * @type {Array<string | null>}
     * @memberof ImapServerSearchOptions
     */
    withFlags?: Array<string | null> | null;
    /**
     * 
     * @type {Array<string | null>}
     * @memberof ImapServerSearchOptions
     */
    withoutFlags?: Array<string | null> | null;
}

/**
 * Check if a given object implements the ImapServerSearchOptions interface.
 */
export function instanceOfImapServerSearchOptions(value: object): value is ImapServerSearchOptions {
    return true;
}

export function ImapServerSearchOptionsFromJSON(json: any): ImapServerSearchOptions {
    return ImapServerSearchOptionsFromJSONTyped(json, false);
}

export function ImapServerSearchOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImapServerSearchOptions {
    if (json == null) {
        return json;
    }
    return {
        
        'seqNum': json['seqNum'] == null ? undefined : json['seqNum'],
        'uid': json['uid'] == null ? undefined : json['uid'],
        'since': json['since'] == null ? undefined : (new Date(json['since'])),
        'before': json['before'] == null ? undefined : (new Date(json['before'])),
        'sentSince': json['sentSince'] == null ? undefined : (new Date(json['sentSince'])),
        'sentBefore': json['sentBefore'] == null ? undefined : (new Date(json['sentBefore'])),
        'header': json['header'] == null ? undefined : json['header'],
        'body': json['body'] == null ? undefined : json['body'],
        'text': json['text'] == null ? undefined : json['text'],
        'withFlags': json['withFlags'] == null ? undefined : json['withFlags'],
        'withoutFlags': json['withoutFlags'] == null ? undefined : json['withoutFlags'],
    };
}

export function ImapServerSearchOptionsToJSON(json: any): ImapServerSearchOptions {
    return ImapServerSearchOptionsToJSONTyped(json, false);
}

export function ImapServerSearchOptionsToJSONTyped(value?: ImapServerSearchOptions | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'seqNum': value['seqNum'],
        'uid': value['uid'],
        'since': value['since'] == null ? undefined : ((value['since'] as any).toISOString()),
        'before': value['before'] == null ? undefined : ((value['before'] as any).toISOString()),
        'sentSince': value['sentSince'] == null ? undefined : ((value['sentSince'] as any).toISOString()),
        'sentBefore': value['sentBefore'] == null ? undefined : ((value['sentBefore'] as any).toISOString()),
        'header': value['header'],
        'body': value['body'],
        'text': value['text'],
        'withFlags': value['withFlags'],
        'withoutFlags': value['withoutFlags'],
    };
}

