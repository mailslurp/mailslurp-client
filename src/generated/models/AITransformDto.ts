/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  StructuredOutputSchema,
  StructuredOutputSchemaFromJSON,
  StructuredOutputSchemaFromJSONTyped,
  StructuredOutputSchemaToJSON,
} from './';

/**
 *
 * @export
 * @interface AITransformDto
 */
export interface AITransformDto {
  /**
   *
   * @type {string}
   * @memberof AITransformDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof AITransformDto
   */
  name?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof AITransformDto
   */
  conditions?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof AITransformDto
   */
  instructions?: Array<string>;
  /**
   *
   * @type {StructuredOutputSchema}
   * @memberof AITransformDto
   */
  outputSchema?: StructuredOutputSchema;
}

export function AITransformDtoFromJSON(json: any): AITransformDto {
  return AITransformDtoFromJSONTyped(json, false);
}

export function AITransformDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): AITransformDto {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    conditions: !exists(json, 'conditions') ? undefined : json['conditions'],
    instructions: !exists(json, 'instructions')
      ? undefined
      : json['instructions'],
    outputSchema: !exists(json, 'outputSchema')
      ? undefined
      : StructuredOutputSchemaFromJSON(json['outputSchema']),
  };
}

export function AITransformDtoToJSON(value?: AITransformDto | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    conditions: value.conditions,
    instructions: value.instructions,
    outputSchema: StructuredOutputSchemaToJSON(value.outputSchema),
  };
}
