/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Connector
 * @export
 * @interface ConnectorProjection
 */
export interface ConnectorProjection {
  /**
   *
   * @type {boolean}
   * @memberof ConnectorProjection
   */
  enabled?: boolean;
  /**
   *
   * @type {string}
   * @memberof ConnectorProjection
   */
  userId: string;
  /**
   *
   * @type {string}
   * @memberof ConnectorProjection
   */
  emailAddress?: string;
  /**
   *
   * @type {string}
   * @memberof ConnectorProjection
   */
  inboxId: string;
  /**
   *
   * @type {boolean}
   * @memberof ConnectorProjection
   */
  syncEnabled?: boolean;
  /**
   *
   * @type {string}
   * @memberof ConnectorProjection
   */
  syncScheduleType: ConnectorProjectionSyncScheduleTypeEnum;
  /**
   *
   * @type {number}
   * @memberof ConnectorProjection
   */
  syncInterval?: number;
  /**
   *
   * @type {Date}
   * @memberof ConnectorProjection
   */
  createdAt: Date;
  /**
   *
   * @type {string}
   * @memberof ConnectorProjection
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof ConnectorProjection
   */
  id?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum ConnectorProjectionSyncScheduleTypeEnum {
  INTERVAL = 'INTERVAL',
}

export function ConnectorProjectionFromJSON(json: any): ConnectorProjection {
  return ConnectorProjectionFromJSONTyped(json, false);
}

export function ConnectorProjectionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ConnectorProjection {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    enabled: !exists(json, 'enabled') ? undefined : json['enabled'],
    userId: json['userId'],
    emailAddress: !exists(json, 'emailAddress')
      ? undefined
      : json['emailAddress'],
    inboxId: json['inboxId'],
    syncEnabled: !exists(json, 'syncEnabled') ? undefined : json['syncEnabled'],
    syncScheduleType: json['syncScheduleType'],
    syncInterval: !exists(json, 'syncInterval')
      ? undefined
      : json['syncInterval'],
    createdAt: new Date(json['createdAt']),
    name: !exists(json, 'name') ? undefined : json['name'],
    id: !exists(json, 'id') ? undefined : json['id'],
  };
}

export function ConnectorProjectionToJSON(
  value?: ConnectorProjection | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    enabled: value.enabled,
    userId: value.userId,
    emailAddress: value.emailAddress,
    inboxId: value.inboxId,
    syncEnabled: value.syncEnabled,
    syncScheduleType: value.syncScheduleType,
    syncInterval: value.syncInterval,
    createdAt: value.createdAt.toISOString(),
    name: value.name,
    id: value.id,
  };
}
