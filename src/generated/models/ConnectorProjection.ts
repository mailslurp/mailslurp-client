/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Connector
 * @export
 * @interface ConnectorProjection
 */
export interface ConnectorProjection {
    /**
     * 
     * @type {Date}
     * @memberof ConnectorProjection
     */
    createdAt: Date;
    /**
     * 
     * @type {boolean}
     * @memberof ConnectorProjection
     */
    enabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ConnectorProjection
     */
    inboxId: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectorProjection
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectorProjection
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectorProjection
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectorProjection
     */
    id: string;
}

/**
 * Check if a given object implements the ConnectorProjection interface.
 */
export function instanceOfConnectorProjection(value: object): value is ConnectorProjection {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('inboxId' in value) || value['inboxId'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function ConnectorProjectionFromJSON(json: any): ConnectorProjection {
    return ConnectorProjectionFromJSONTyped(json, false);
}

export function ConnectorProjectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectorProjection {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': (new Date(json['createdAt'])),
        'enabled': json['enabled'] == null ? undefined : json['enabled'],
        'inboxId': json['inboxId'],
        'userId': json['userId'],
        'emailAddress': json['emailAddress'] == null ? undefined : json['emailAddress'],
        'name': json['name'] == null ? undefined : json['name'],
        'id': json['id'],
    };
}

export function ConnectorProjectionToJSON(json: any): ConnectorProjection {
    return ConnectorProjectionToJSONTyped(json, false);
}

export function ConnectorProjectionToJSONTyped(value?: ConnectorProjection | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'createdAt': ((value['createdAt']).toISOString()),
        'enabled': value['enabled'],
        'inboxId': value['inboxId'],
        'userId': value['userId'],
        'emailAddress': value['emailAddress'],
        'name': value['name'],
        'id': value['id'],
    };
}

