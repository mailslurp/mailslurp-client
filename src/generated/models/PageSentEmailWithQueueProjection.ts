/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  PageableObject,
  PageableObjectFromJSON,
  PageableObjectFromJSONTyped,
  PageableObjectToJSON,
  SendWithQueueResult,
  SendWithQueueResultFromJSON,
  SendWithQueueResultFromJSONTyped,
  SendWithQueueResultToJSON,
  SortObject,
  SortObjectFromJSON,
  SortObjectFromJSONTyped,
  SortObjectToJSON,
} from './';

/**
 * Paginated sent email results for emails sent with queue. Page index starts at zero. Projection results may omit larger entity fields. For fetching a full sent email entity use the projection ID with individual method calls.
 * @export
 * @interface PageSentEmailWithQueueProjection
 */
export interface PageSentEmailWithQueueProjection {
  /**
   *
   * @type {Array<SendWithQueueResult>}
   * @memberof PageSentEmailWithQueueProjection
   */
  content?: Array<SendWithQueueResult>;
  /**
   *
   * @type {PageableObject}
   * @memberof PageSentEmailWithQueueProjection
   */
  pageable?: PageableObject;
  /**
   *
   * @type {number}
   * @memberof PageSentEmailWithQueueProjection
   */
  totalPages: number;
  /**
   *
   * @type {number}
   * @memberof PageSentEmailWithQueueProjection
   */
  totalElements: number;
  /**
   *
   * @type {boolean}
   * @memberof PageSentEmailWithQueueProjection
   */
  last?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageSentEmailWithQueueProjection
   */
  numberOfElements?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageSentEmailWithQueueProjection
   */
  first?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageSentEmailWithQueueProjection
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof PageSentEmailWithQueueProjection
   */
  number?: number;
  /**
   *
   * @type {SortObject}
   * @memberof PageSentEmailWithQueueProjection
   */
  sort?: SortObject;
  /**
   *
   * @type {boolean}
   * @memberof PageSentEmailWithQueueProjection
   */
  empty?: boolean;
}

export function PageSentEmailWithQueueProjectionFromJSON(
  json: any
): PageSentEmailWithQueueProjection {
  return PageSentEmailWithQueueProjectionFromJSONTyped(json, false);
}

export function PageSentEmailWithQueueProjectionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): PageSentEmailWithQueueProjection {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    content: !exists(json, 'content')
      ? undefined
      : (json['content'] as Array<any>).map(SendWithQueueResultFromJSON),
    pageable: !exists(json, 'pageable')
      ? undefined
      : PageableObjectFromJSON(json['pageable']),
    totalPages: json['totalPages'],
    totalElements: json['totalElements'],
    last: !exists(json, 'last') ? undefined : json['last'],
    numberOfElements: !exists(json, 'numberOfElements')
      ? undefined
      : json['numberOfElements'],
    first: !exists(json, 'first') ? undefined : json['first'],
    size: !exists(json, 'size') ? undefined : json['size'],
    number: !exists(json, 'number') ? undefined : json['number'],
    sort: !exists(json, 'sort') ? undefined : SortObjectFromJSON(json['sort']),
    empty: !exists(json, 'empty') ? undefined : json['empty'],
  };
}

export function PageSentEmailWithQueueProjectionToJSON(
  value?: PageSentEmailWithQueueProjection | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    content:
      value.content === undefined
        ? undefined
        : (value.content as Array<any>).map(SendWithQueueResultToJSON),
    pageable: PageableObjectToJSON(value.pageable),
    totalPages: value.totalPages,
    totalElements: value.totalElements,
    last: value.last,
    numberOfElements: value.numberOfElements,
    first: value.first,
    size: value.size,
    number: value.number,
    sort: SortObjectToJSON(value.sort),
    empty: value.empty,
  };
}
