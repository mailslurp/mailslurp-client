/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * NEW_CONTACT webhook payload. Sent to your webhook url endpoint via HTTP POST when an email is received by the inbox that your webhook is attached to that contains a recipient that has not been saved as a contact.
 * @export
 * @interface WebhookNewContactPayload
 */
export interface WebhookNewContactPayload {
    /**
     * Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
     * @type {string}
     * @memberof WebhookNewContactPayload
     */
    messageId: string;
    /**
     * ID of webhook entity being triggered
     * @type {string}
     * @memberof WebhookNewContactPayload
     */
    webhookId: string;
    /**
     * Name of the webhook being triggered
     * @type {string}
     * @memberof WebhookNewContactPayload
     */
    webhookName?: string | null;
    /**
     * Name of the event type webhook is being triggered for.
     * @type {string}
     * @memberof WebhookNewContactPayload
     */
    eventName: WebhookNewContactPayloadEventNameEnum;
    /**
     * Contact ID
     * @type {string}
     * @memberof WebhookNewContactPayload
     */
    contactId: string;
    /**
     * Contact group ID
     * @type {string}
     * @memberof WebhookNewContactPayload
     */
    groupId?: string | null;
    /**
     * Contact first name
     * @type {string}
     * @memberof WebhookNewContactPayload
     */
    firstName?: string | null;
    /**
     * Contact last name
     * @type {string}
     * @memberof WebhookNewContactPayload
     */
    lastName?: string | null;
    /**
     * Contact company name
     * @type {string}
     * @memberof WebhookNewContactPayload
     */
    company?: string | null;
    /**
     * Primary email address for contact
     * @type {string}
     * @memberof WebhookNewContactPayload
     */
    primaryEmailAddress?: string | null;
    /**
     * Email addresses for contact
     * @type {Array<string>}
     * @memberof WebhookNewContactPayload
     */
    emailAddresses: Array<string>;
    /**
     * Tags for contact
     * @type {Array<string>}
     * @memberof WebhookNewContactPayload
     */
    tags: Array<string>;
    /**
     * 
     * @type {object}
     * @memberof WebhookNewContactPayload
     */
    metaData?: object | null;
    /**
     * Has contact opted out of emails
     * @type {boolean}
     * @memberof WebhookNewContactPayload
     */
    optOut: boolean;
    /**
     * Date time of event creation
     * @type {Date}
     * @memberof WebhookNewContactPayload
     */
    createdAt: Date;
}


/**
 * @export
 */
export const WebhookNewContactPayloadEventNameEnum = {
    EMAIL_RECEIVED: 'EMAIL_RECEIVED',
    NEW_EMAIL: 'NEW_EMAIL',
    NEW_CONTACT: 'NEW_CONTACT',
    NEW_ATTACHMENT: 'NEW_ATTACHMENT',
    EMAIL_OPENED: 'EMAIL_OPENED',
    EMAIL_READ: 'EMAIL_READ',
    DELIVERY_STATUS: 'DELIVERY_STATUS',
    BOUNCE: 'BOUNCE',
    BOUNCE_RECIPIENT: 'BOUNCE_RECIPIENT',
    NEW_SMS: 'NEW_SMS',
    NEW_GUEST_USER: 'NEW_GUEST_USER'
} as const;
export type WebhookNewContactPayloadEventNameEnum = typeof WebhookNewContactPayloadEventNameEnum[keyof typeof WebhookNewContactPayloadEventNameEnum];


/**
 * Check if a given object implements the WebhookNewContactPayload interface.
 */
export function instanceOfWebhookNewContactPayload(value: object): value is WebhookNewContactPayload {
    if (!('messageId' in value) || value['messageId'] === undefined) return false;
    if (!('webhookId' in value) || value['webhookId'] === undefined) return false;
    if (!('eventName' in value) || value['eventName'] === undefined) return false;
    if (!('contactId' in value) || value['contactId'] === undefined) return false;
    if (!('emailAddresses' in value) || value['emailAddresses'] === undefined) return false;
    if (!('tags' in value) || value['tags'] === undefined) return false;
    if (!('optOut' in value) || value['optOut'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function WebhookNewContactPayloadFromJSON(json: any): WebhookNewContactPayload {
    return WebhookNewContactPayloadFromJSONTyped(json, false);
}

export function WebhookNewContactPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookNewContactPayload {
    if (json == null) {
        return json;
    }
    return {
        
        'messageId': json['messageId'],
        'webhookId': json['webhookId'],
        'webhookName': json['webhookName'] == null ? undefined : json['webhookName'],
        'eventName': json['eventName'],
        'contactId': json['contactId'],
        'groupId': json['groupId'] == null ? undefined : json['groupId'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'company': json['company'] == null ? undefined : json['company'],
        'primaryEmailAddress': json['primaryEmailAddress'] == null ? undefined : json['primaryEmailAddress'],
        'emailAddresses': json['emailAddresses'],
        'tags': json['tags'],
        'metaData': json['metaData'] == null ? undefined : json['metaData'],
        'optOut': json['optOut'],
        'createdAt': (new Date(json['createdAt'])),
    };
}

export function WebhookNewContactPayloadToJSON(json: any): WebhookNewContactPayload {
    return WebhookNewContactPayloadToJSONTyped(json, false);
}

export function WebhookNewContactPayloadToJSONTyped(value?: WebhookNewContactPayload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'messageId': value['messageId'],
        'webhookId': value['webhookId'],
        'webhookName': value['webhookName'],
        'eventName': value['eventName'],
        'contactId': value['contactId'],
        'groupId': value['groupId'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'company': value['company'],
        'primaryEmailAddress': value['primaryEmailAddress'],
        'emailAddresses': value['emailAddresses'],
        'tags': value['tags'],
        'metaData': value['metaData'],
        'optOut': value['optOut'],
        'createdAt': ((value['createdAt']).toISOString()),
    };
}

