/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Create contact group options
 * @export
 * @interface CreateGroupOptions
 */
export interface CreateGroupOptions {
    /**
     * 
     * @type {string}
     * @memberof CreateGroupOptions
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupOptions
     */
    description?: string | null;
}

/**
 * Check if a given object implements the CreateGroupOptions interface.
 */
export function instanceOfCreateGroupOptions(value: object): value is CreateGroupOptions {
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function CreateGroupOptionsFromJSON(json: any): CreateGroupOptions {
    return CreateGroupOptionsFromJSONTyped(json, false);
}

export function CreateGroupOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateGroupOptions {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
    };
}

export function CreateGroupOptionsToJSON(json: any): CreateGroupOptions {
    return CreateGroupOptionsToJSONTyped(json, false);
}

export function CreateGroupOptionsToJSONTyped(value?: CreateGroupOptions | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'description': value['description'],
    };
}

