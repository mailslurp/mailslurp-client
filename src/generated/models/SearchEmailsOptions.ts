/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SearchEmailsOptions
 */
export interface SearchEmailsOptions {
    /**
     * Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account.
     * @type {Array<string>}
     * @memberof SearchEmailsOptions
     */
    inboxIds?: Array<string>;
    /**
     * Optional page index in email list pagination
     * @type {number}
     * @memberof SearchEmailsOptions
     */
    pageIndex?: number;
    /**
     * Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results
     * @type {number}
     * @memberof SearchEmailsOptions
     */
    pageSize?: number;
    /**
     * Optional createdAt sort direction ASC or DESC
     * @type {string}
     * @memberof SearchEmailsOptions
     */
    sortDirection?: SearchEmailsOptionsSortDirectionEnum;
    /**
     * Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly
     * @type {boolean}
     * @memberof SearchEmailsOptions
     */
    unreadOnly?: boolean;
    /**
     * Optional search filter. Searches email recipients, sender, subject, email address and ID. Does not search email body
     * @type {string}
     * @memberof SearchEmailsOptions
     */
    searchFilter?: string;
    /**
     * Optional filter emails received after given date time
     * @type {Date}
     * @memberof SearchEmailsOptions
     */
    since?: Date;
    /**
     * Optional filter emails received before given date time
     * @type {Date}
     * @memberof SearchEmailsOptions
     */
    before?: Date;
}


/**
 * @export
 */
export const SearchEmailsOptionsSortDirectionEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
} as const;
export type SearchEmailsOptionsSortDirectionEnum = typeof SearchEmailsOptionsSortDirectionEnum[keyof typeof SearchEmailsOptionsSortDirectionEnum];


/**
 * Check if a given object implements the SearchEmailsOptions interface.
 */
export function instanceOfSearchEmailsOptions(value: object): value is SearchEmailsOptions {
    return true;
}

export function SearchEmailsOptionsFromJSON(json: any): SearchEmailsOptions {
    return SearchEmailsOptionsFromJSONTyped(json, false);
}

export function SearchEmailsOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchEmailsOptions {
    if (json == null) {
        return json;
    }
    return {
        
        'inboxIds': json['inboxIds'] == null ? undefined : json['inboxIds'],
        'pageIndex': json['pageIndex'] == null ? undefined : json['pageIndex'],
        'pageSize': json['pageSize'] == null ? undefined : json['pageSize'],
        'sortDirection': json['sortDirection'] == null ? undefined : json['sortDirection'],
        'unreadOnly': json['unreadOnly'] == null ? undefined : json['unreadOnly'],
        'searchFilter': json['searchFilter'] == null ? undefined : json['searchFilter'],
        'since': json['since'] == null ? undefined : (new Date(json['since'])),
        'before': json['before'] == null ? undefined : (new Date(json['before'])),
    };
}

export function SearchEmailsOptionsToJSON(json: any): SearchEmailsOptions {
    return SearchEmailsOptionsToJSONTyped(json, false);
}

export function SearchEmailsOptionsToJSONTyped(value?: SearchEmailsOptions | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'inboxIds': value['inboxIds'],
        'pageIndex': value['pageIndex'],
        'pageSize': value['pageSize'],
        'sortDirection': value['sortDirection'],
        'unreadOnly': value['unreadOnly'],
        'searchFilter': value['searchFilter'],
        'since': value['since'] == null ? undefined : ((value['since']).toISOString()),
        'before': value['before'] == null ? undefined : ((value['before']).toISOString()),
    };
}

