/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Name Server Record
 * @export
 * @interface NameServerRecord
 */
export interface NameServerRecord {
    /**
     * 
     * @type {string}
     * @memberof NameServerRecord
     */
    raw: string;
    /**
     * 
     * @type {string}
     * @memberof NameServerRecord
     */
    recordType: string;
    /**
     * 
     * @type {string}
     * @memberof NameServerRecord
     */
    priority: string;
    /**
     * 
     * @type {string}
     * @memberof NameServerRecord
     */
    value: string;
}

/**
 * Check if a given object implements the NameServerRecord interface.
 */
export function instanceOfNameServerRecord(value: object): value is NameServerRecord {
    if (!('raw' in value) || value['raw'] === undefined) return false;
    if (!('recordType' in value) || value['recordType'] === undefined) return false;
    if (!('priority' in value) || value['priority'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    return true;
}

export function NameServerRecordFromJSON(json: any): NameServerRecord {
    return NameServerRecordFromJSONTyped(json, false);
}

export function NameServerRecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): NameServerRecord {
    if (json == null) {
        return json;
    }
    return {
        
        'raw': json['raw'],
        'recordType': json['recordType'],
        'priority': json['priority'],
        'value': json['value'],
    };
}

export function NameServerRecordToJSON(json: any): NameServerRecord {
    return NameServerRecordToJSONTyped(json, false);
}

export function NameServerRecordToJSONTyped(value?: NameServerRecord | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'raw': value['raw'],
        'recordType': value['recordType'],
        'priority': value['priority'],
        'value': value['value'],
    };
}

