/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Options for creating an inbox connection with an external mail provider
 * @export
 * @interface CreateConnectorOptions
 */
export interface CreateConnectorOptions {
  /**
   * Name of connector
   * @type {string}
   * @memberof CreateConnectorOptions
   */
  name?: string | null;
  /**
   * Email address of external inbox
   * @type {string}
   * @memberof CreateConnectorOptions
   */
  emailAddress?: string | null;
  /**
   * Is connector enabled
   * @type {boolean}
   * @memberof CreateConnectorOptions
   */
  enabled?: boolean | null;
}

export function CreateConnectorOptionsFromJSON(
  json: any
): CreateConnectorOptions {
  return CreateConnectorOptionsFromJSONTyped(json, false);
}

export function CreateConnectorOptionsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): CreateConnectorOptions {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: !exists(json, 'name') ? undefined : json['name'],
    emailAddress: !exists(json, 'emailAddress')
      ? undefined
      : json['emailAddress'],
    enabled: !exists(json, 'enabled') ? undefined : json['enabled'],
  };
}

export function CreateConnectorOptionsToJSON(
  value?: CreateConnectorOptions | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    emailAddress: value.emailAddress,
    enabled: value.enabled,
  };
}
