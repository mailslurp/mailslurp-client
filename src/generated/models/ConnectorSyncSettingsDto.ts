/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ConnectorSyncSettingsDto
 */
export interface ConnectorSyncSettingsDto {
    /**
     * 
     * @type {string}
     * @memberof ConnectorSyncSettingsDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectorSyncSettingsDto
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectorSyncSettingsDto
     */
    connectorId: string;
    /**
     * 
     * @type {boolean}
     * @memberof ConnectorSyncSettingsDto
     */
    syncEnabled: boolean;
    /**
     * 
     * @type {string}
     * @memberof ConnectorSyncSettingsDto
     */
    syncScheduleType?: ConnectorSyncSettingsDtoSyncScheduleTypeEnum | null;
    /**
     * 
     * @type {number}
     * @memberof ConnectorSyncSettingsDto
     */
    syncInterval?: number | null;
}


/**
 * @export
 */
export const ConnectorSyncSettingsDtoSyncScheduleTypeEnum = {
    INTERVAL: 'INTERVAL'
} as const;
export type ConnectorSyncSettingsDtoSyncScheduleTypeEnum = typeof ConnectorSyncSettingsDtoSyncScheduleTypeEnum[keyof typeof ConnectorSyncSettingsDtoSyncScheduleTypeEnum];


/**
 * Check if a given object implements the ConnectorSyncSettingsDto interface.
 */
export function instanceOfConnectorSyncSettingsDto(value: object): value is ConnectorSyncSettingsDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('connectorId' in value) || value['connectorId'] === undefined) return false;
    if (!('syncEnabled' in value) || value['syncEnabled'] === undefined) return false;
    return true;
}

export function ConnectorSyncSettingsDtoFromJSON(json: any): ConnectorSyncSettingsDto {
    return ConnectorSyncSettingsDtoFromJSONTyped(json, false);
}

export function ConnectorSyncSettingsDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectorSyncSettingsDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userId': json['userId'],
        'connectorId': json['connectorId'],
        'syncEnabled': json['syncEnabled'],
        'syncScheduleType': json['syncScheduleType'] == null ? undefined : json['syncScheduleType'],
        'syncInterval': json['syncInterval'] == null ? undefined : json['syncInterval'],
    };
}

export function ConnectorSyncSettingsDtoToJSON(json: any): ConnectorSyncSettingsDto {
    return ConnectorSyncSettingsDtoToJSONTyped(json, false);
}

export function ConnectorSyncSettingsDtoToJSONTyped(value?: ConnectorSyncSettingsDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'userId': value['userId'],
        'connectorId': value['connectorId'],
        'syncEnabled': value['syncEnabled'],
        'syncScheduleType': value['syncScheduleType'],
        'syncInterval': value['syncInterval'],
    };
}

