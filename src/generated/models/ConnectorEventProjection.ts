/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * ConnectorEventProjection
 * @export
 * @interface ConnectorEventProjection
 */
export interface ConnectorEventProjection {
    /**
     * 
     * @type {Date}
     * @memberof ConnectorEventProjection
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof ConnectorEventProjection
     */
    eventType: ConnectorEventProjectionEventTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ConnectorEventProjection
     */
    connectorId: string;
    /**
     * 
     * @type {boolean}
     * @memberof ConnectorEventProjection
     */
    seen?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ConnectorEventProjection
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectorEventProjection
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof ConnectorEventProjection
     */
    size: number;
    /**
     * 
     * @type {string}
     * @memberof ConnectorEventProjection
     */
    status: ConnectorEventProjectionStatusEnum;
}


/**
 * @export
 */
export const ConnectorEventProjectionEventTypeEnum = {
    SEND: 'SEND',
    SYNC: 'SYNC'
} as const;
export type ConnectorEventProjectionEventTypeEnum = typeof ConnectorEventProjectionEventTypeEnum[keyof typeof ConnectorEventProjectionEventTypeEnum];

/**
 * @export
 */
export const ConnectorEventProjectionStatusEnum = {
    SUCCESS: 'SUCCESS',
    INTERNAL_ERROR: 'INTERNAL_ERROR',
    SUBSCRIPTION_ERROR: 'SUBSCRIPTION_ERROR',
    CONNECTION_ERROR: 'CONNECTION_ERROR',
    NOT_FOUND: 'NOT_FOUND'
} as const;
export type ConnectorEventProjectionStatusEnum = typeof ConnectorEventProjectionStatusEnum[keyof typeof ConnectorEventProjectionStatusEnum];


/**
 * Check if a given object implements the ConnectorEventProjection interface.
 */
export function instanceOfConnectorEventProjection(value: object): value is ConnectorEventProjection {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('eventType' in value) || value['eventType'] === undefined) return false;
    if (!('connectorId' in value) || value['connectorId'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function ConnectorEventProjectionFromJSON(json: any): ConnectorEventProjection {
    return ConnectorEventProjectionFromJSONTyped(json, false);
}

export function ConnectorEventProjectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectorEventProjection {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': (new Date(json['createdAt'])),
        'eventType': json['eventType'],
        'connectorId': json['connectorId'],
        'seen': json['seen'] == null ? undefined : json['seen'],
        'message': json['message'] == null ? undefined : json['message'],
        'id': json['id'] == null ? undefined : json['id'],
        'size': json['size'],
        'status': json['status'],
    };
}

export function ConnectorEventProjectionToJSON(json: any): ConnectorEventProjection {
    return ConnectorEventProjectionToJSONTyped(json, false);
}

export function ConnectorEventProjectionToJSONTyped(value?: ConnectorEventProjection | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'createdAt': ((value['createdAt']).toISOString()),
        'eventType': value['eventType'],
        'connectorId': value['connectorId'],
        'seen': value['seen'],
        'message': value['message'],
        'id': value['id'],
        'size': value['size'],
        'status': value['status'],
    };
}

