/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * IMAP fetch content in raw format
 * @export
 * @interface ImapServerFetchItem
 */
export interface ImapServerFetchItem {
    /**
     * Content of the email
     * @type {string}
     * @memberof ImapServerFetchItem
     */
    content: string;
    /**
     * ID of the email
     * @type {string}
     * @memberof ImapServerFetchItem
     */
    id: string;
    /**
     * UID of the email
     * @type {number}
     * @memberof ImapServerFetchItem
     */
    uid: number;
    /**
     * Sequence number of the email
     * @type {number}
     * @memberof ImapServerFetchItem
     */
    seqNum: number;
    /**
     * Read status of the email
     * @type {boolean}
     * @memberof ImapServerFetchItem
     */
    read: boolean;
}

/**
 * Check if a given object implements the ImapServerFetchItem interface.
 */
export function instanceOfImapServerFetchItem(value: object): value is ImapServerFetchItem {
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('uid' in value) || value['uid'] === undefined) return false;
    if (!('seqNum' in value) || value['seqNum'] === undefined) return false;
    if (!('read' in value) || value['read'] === undefined) return false;
    return true;
}

export function ImapServerFetchItemFromJSON(json: any): ImapServerFetchItem {
    return ImapServerFetchItemFromJSONTyped(json, false);
}

export function ImapServerFetchItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImapServerFetchItem {
    if (json == null) {
        return json;
    }
    return {
        
        'content': json['content'],
        'id': json['id'],
        'uid': json['uid'],
        'seqNum': json['seqNum'],
        'read': json['read'],
    };
}

export function ImapServerFetchItemToJSON(json: any): ImapServerFetchItem {
    return ImapServerFetchItemToJSONTyped(json, false);
}

export function ImapServerFetchItemToJSONTyped(value?: ImapServerFetchItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'content': value['content'],
        'id': value['id'],
        'uid': value['uid'],
        'seqNum': value['seqNum'],
        'read': value['read'],
    };
}

