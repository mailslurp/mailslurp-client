/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Options for testing an inbox forwarder against a value
 * @export
 * @interface InboxForwarderTestOptions
 */
export interface InboxForwarderTestOptions {
    /**
     * 
     * @type {string}
     * @memberof InboxForwarderTestOptions
     */
    testValue: string;
}

/**
 * Check if a given object implements the InboxForwarderTestOptions interface.
 */
export function instanceOfInboxForwarderTestOptions(value: object): value is InboxForwarderTestOptions {
    if (!('testValue' in value) || value['testValue'] === undefined) return false;
    return true;
}

export function InboxForwarderTestOptionsFromJSON(json: any): InboxForwarderTestOptions {
    return InboxForwarderTestOptionsFromJSONTyped(json, false);
}

export function InboxForwarderTestOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): InboxForwarderTestOptions {
    if (json == null) {
        return json;
    }
    return {
        
        'testValue': json['testValue'],
    };
}

export function InboxForwarderTestOptionsToJSON(json: any): InboxForwarderTestOptions {
    return InboxForwarderTestOptionsToJSONTyped(json, false);
}

export function InboxForwarderTestOptionsToJSONTyped(value?: InboxForwarderTestOptions | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'testValue': value['testValue'],
    };
}

