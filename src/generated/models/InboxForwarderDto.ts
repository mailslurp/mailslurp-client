/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Inbox forwarder. Describes how an inbox will forward matching emails to designated recipients.
 * @export
 * @interface InboxForwarderDto
 */
export interface InboxForwarderDto {
    /**
     * 
     * @type {string}
     * @memberof InboxForwarderDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InboxForwarderDto
     */
    inboxId?: string | null;
    /**
     * Name of inbox forwarder
     * @type {string}
     * @memberof InboxForwarderDto
     */
    name?: string | null;
    /**
     * Which field to match against
     * @type {string}
     * @memberof InboxForwarderDto
     */
    field: InboxForwarderDtoFieldEnum;
    /**
     * Wild-card type pattern to apply to field
     * @type {string}
     * @memberof InboxForwarderDto
     */
    match: string;
    /**
     * Who to send forwarded email to
     * @type {Array<string>}
     * @memberof InboxForwarderDto
     */
    forwardToRecipients: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof InboxForwarderDto
     */
    createdAt: Date;
}


/**
 * @export
 */
export const InboxForwarderDtoFieldEnum = {
    RECIPIENTS: 'RECIPIENTS',
    SENDER: 'SENDER',
    SUBJECT: 'SUBJECT',
    ATTACHMENTS: 'ATTACHMENTS'
} as const;
export type InboxForwarderDtoFieldEnum = typeof InboxForwarderDtoFieldEnum[keyof typeof InboxForwarderDtoFieldEnum];


/**
 * Check if a given object implements the InboxForwarderDto interface.
 */
export function instanceOfInboxForwarderDto(value: object): value is InboxForwarderDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('field' in value) || value['field'] === undefined) return false;
    if (!('match' in value) || value['match'] === undefined) return false;
    if (!('forwardToRecipients' in value) || value['forwardToRecipients'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function InboxForwarderDtoFromJSON(json: any): InboxForwarderDto {
    return InboxForwarderDtoFromJSONTyped(json, false);
}

export function InboxForwarderDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): InboxForwarderDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'inboxId': json['inboxId'] == null ? undefined : json['inboxId'],
        'name': json['name'] == null ? undefined : json['name'],
        'field': json['field'],
        'match': json['match'],
        'forwardToRecipients': json['forwardToRecipients'],
        'createdAt': (new Date(json['createdAt'])),
    };
}

export function InboxForwarderDtoToJSON(json: any): InboxForwarderDto {
    return InboxForwarderDtoToJSONTyped(json, false);
}

export function InboxForwarderDtoToJSONTyped(value?: InboxForwarderDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'inboxId': value['inboxId'],
        'name': value['name'],
        'field': value['field'],
        'match': value['match'],
        'forwardToRecipients': value['forwardToRecipients'],
        'createdAt': ((value['createdAt']).toISOString()),
    };
}

