/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmailRecipientsProjection } from './EmailRecipientsProjection';
import {
    EmailRecipientsProjectionFromJSON,
    EmailRecipientsProjectionFromJSONTyped,
    EmailRecipientsProjectionToJSON,
    EmailRecipientsProjectionToJSONTyped,
} from './EmailRecipientsProjection';
import type { SenderProjection } from './SenderProjection';
import {
    SenderProjectionFromJSON,
    SenderProjectionFromJSONTyped,
    SenderProjectionToJSON,
    SenderProjectionToJSONTyped,
} from './SenderProjection';

/**
 * 
 * @export
 * @interface EmailThreadItemProjection
 */
export interface EmailThreadItemProjection {
    /**
     * 
     * @type {string}
     * @memberof EmailThreadItemProjection
     */
    subject?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof EmailThreadItemProjection
     */
    createdAt: Date;
    /**
     * 
     * @type {SenderProjection}
     * @memberof EmailThreadItemProjection
     */
    sender?: SenderProjection;
    /**
     * 
     * @type {EmailRecipientsProjection}
     * @memberof EmailThreadItemProjection
     */
    recipients?: EmailRecipientsProjection;
    /**
     * 
     * @type {Array<string | null>}
     * @memberof EmailThreadItemProjection
     */
    attachments?: Array<string | null> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof EmailThreadItemProjection
     */
    to: Array<string>;
    /**
     * 
     * @type {Array<string | null>}
     * @memberof EmailThreadItemProjection
     */
    cc?: Array<string | null> | null;
    /**
     * 
     * @type {Array<string | null>}
     * @memberof EmailThreadItemProjection
     */
    bcc?: Array<string | null> | null;
    /**
     * 
     * @type {string}
     * @memberof EmailThreadItemProjection
     */
    messageId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmailThreadItemProjection
     */
    itemType: EmailThreadItemProjectionItemTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof EmailThreadItemProjection
     */
    inReplyTo?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof EmailThreadItemProjection
     */
    read: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmailThreadItemProjection
     */
    bodyExcerpt?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmailThreadItemProjection
     */
    textExcerpt?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmailThreadItemProjection
     */
    entityId: string;
    /**
     * 
     * @type {string}
     * @memberof EmailThreadItemProjection
     */
    threadId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EmailThreadItemProjection
     */
    from?: string | null;
}


/**
 * @export
 */
export const EmailThreadItemProjectionItemTypeEnum = {
    RECEIVED_EMAIL: 'RECEIVED_EMAIL',
    SENT_EMAIL: 'SENT_EMAIL'
} as const;
export type EmailThreadItemProjectionItemTypeEnum = typeof EmailThreadItemProjectionItemTypeEnum[keyof typeof EmailThreadItemProjectionItemTypeEnum];


/**
 * Check if a given object implements the EmailThreadItemProjection interface.
 */
export function instanceOfEmailThreadItemProjection(value: object): value is EmailThreadItemProjection {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('to' in value) || value['to'] === undefined) return false;
    if (!('itemType' in value) || value['itemType'] === undefined) return false;
    if (!('read' in value) || value['read'] === undefined) return false;
    if (!('entityId' in value) || value['entityId'] === undefined) return false;
    return true;
}

export function EmailThreadItemProjectionFromJSON(json: any): EmailThreadItemProjection {
    return EmailThreadItemProjectionFromJSONTyped(json, false);
}

export function EmailThreadItemProjectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmailThreadItemProjection {
    if (json == null) {
        return json;
    }
    return {
        
        'subject': json['subject'] == null ? undefined : json['subject'],
        'createdAt': (new Date(json['createdAt'])),
        'sender': json['sender'] == null ? undefined : SenderProjectionFromJSON(json['sender']),
        'recipients': json['recipients'] == null ? undefined : EmailRecipientsProjectionFromJSON(json['recipients']),
        'attachments': json['attachments'] == null ? undefined : json['attachments'],
        'to': json['to'],
        'cc': json['cc'] == null ? undefined : json['cc'],
        'bcc': json['bcc'] == null ? undefined : json['bcc'],
        'messageId': json['messageId'] == null ? undefined : json['messageId'],
        'itemType': json['itemType'],
        'inReplyTo': json['inReplyTo'] == null ? undefined : json['inReplyTo'],
        'read': json['read'],
        'bodyExcerpt': json['bodyExcerpt'] == null ? undefined : json['bodyExcerpt'],
        'textExcerpt': json['textExcerpt'] == null ? undefined : json['textExcerpt'],
        'entityId': json['entityId'],
        'threadId': json['threadId'] == null ? undefined : json['threadId'],
        'from': json['from'] == null ? undefined : json['from'],
    };
}

export function EmailThreadItemProjectionToJSON(json: any): EmailThreadItemProjection {
    return EmailThreadItemProjectionToJSONTyped(json, false);
}

export function EmailThreadItemProjectionToJSONTyped(value?: EmailThreadItemProjection | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'subject': value['subject'],
        'createdAt': ((value['createdAt']).toISOString()),
        'sender': SenderProjectionToJSON(value['sender']),
        'recipients': EmailRecipientsProjectionToJSON(value['recipients']),
        'attachments': value['attachments'],
        'to': value['to'],
        'cc': value['cc'],
        'bcc': value['bcc'],
        'messageId': value['messageId'],
        'itemType': value['itemType'],
        'inReplyTo': value['inReplyTo'],
        'read': value['read'],
        'bodyExcerpt': value['bodyExcerpt'],
        'textExcerpt': value['textExcerpt'],
        'entityId': value['entityId'],
        'threadId': value['threadId'],
        'from': value['from'],
    };
}

