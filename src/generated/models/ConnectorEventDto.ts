/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ConnectorEventDto
 */
export interface ConnectorEventDto {
    /**
     * 
     * @type {string}
     * @memberof ConnectorEventDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectorEventDto
     */
    connectorId: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectorEventDto
     */
    status: ConnectorEventDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ConnectorEventDto
     */
    eventType: ConnectorEventDtoEventTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof ConnectorEventDto
     */
    size: number;
    /**
     * 
     * @type {string}
     * @memberof ConnectorEventDto
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof ConnectorEventDto
     */
    logs?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ConnectorEventDto
     */
    seen?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof ConnectorEventDto
     */
    createdAt: Date;
}


/**
 * @export
 */
export const ConnectorEventDtoStatusEnum = {
    SUCCESS: 'SUCCESS',
    INTERNAL_ERROR: 'INTERNAL_ERROR',
    SUBSCRIPTION_ERROR: 'SUBSCRIPTION_ERROR',
    CONNECTION_ERROR: 'CONNECTION_ERROR',
    NOT_FOUND: 'NOT_FOUND'
} as const;
export type ConnectorEventDtoStatusEnum = typeof ConnectorEventDtoStatusEnum[keyof typeof ConnectorEventDtoStatusEnum];

/**
 * @export
 */
export const ConnectorEventDtoEventTypeEnum = {
    SEND: 'SEND',
    SYNC: 'SYNC'
} as const;
export type ConnectorEventDtoEventTypeEnum = typeof ConnectorEventDtoEventTypeEnum[keyof typeof ConnectorEventDtoEventTypeEnum];


/**
 * Check if a given object implements the ConnectorEventDto interface.
 */
export function instanceOfConnectorEventDto(value: object): value is ConnectorEventDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('connectorId' in value) || value['connectorId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('eventType' in value) || value['eventType'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function ConnectorEventDtoFromJSON(json: any): ConnectorEventDto {
    return ConnectorEventDtoFromJSONTyped(json, false);
}

export function ConnectorEventDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectorEventDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'connectorId': json['connectorId'],
        'status': json['status'],
        'eventType': json['eventType'],
        'size': json['size'],
        'message': json['message'] == null ? undefined : json['message'],
        'logs': json['logs'] == null ? undefined : json['logs'],
        'seen': json['seen'] == null ? undefined : json['seen'],
        'createdAt': (new Date(json['createdAt'])),
    };
}

export function ConnectorEventDtoToJSON(json: any): ConnectorEventDto {
    return ConnectorEventDtoToJSONTyped(json, false);
}

export function ConnectorEventDtoToJSONTyped(value?: ConnectorEventDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'connectorId': value['connectorId'],
        'status': value['status'],
        'eventType': value['eventType'],
        'size': value['size'],
        'message': value['message'],
        'logs': value['logs'],
        'seen': value['seen'],
        'createdAt': ((value['createdAt']).toISOString()),
    };
}

