/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Inbox replier. Will automatically reply to inbound emails that match given field for an inbox.
 * @export
 * @interface InboxReplierDto
 */
export interface InboxReplierDto {
    /**
     * 
     * @type {string}
     * @memberof InboxReplierDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof InboxReplierDto
     */
    inboxId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InboxReplierDto
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InboxReplierDto
     */
    field: InboxReplierDtoFieldEnum;
    /**
     * 
     * @type {string}
     * @memberof InboxReplierDto
     */
    match: string;
    /**
     * 
     * @type {string}
     * @memberof InboxReplierDto
     */
    replyTo?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InboxReplierDto
     */
    subject?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InboxReplierDto
     */
    from?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InboxReplierDto
     */
    charset?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof InboxReplierDto
     */
    isHTML: boolean;
    /**
     * 
     * @type {string}
     * @memberof InboxReplierDto
     */
    templateId?: string | null;
    /**
     * 
     * @type {{ [key: string]: object | null; }}
     * @memberof InboxReplierDto
     */
    templateVariables?: { [key: string]: object | null; } | null;
    /**
     * 
     * @type {boolean}
     * @memberof InboxReplierDto
     */
    ignoreReplyTo: boolean;
    /**
     * 
     * @type {Date}
     * @memberof InboxReplierDto
     */
    createdAt: Date;
}


/**
 * @export
 */
export const InboxReplierDtoFieldEnum = {
    RECIPIENTS: 'RECIPIENTS',
    SENDER: 'SENDER',
    SUBJECT: 'SUBJECT',
    ATTACHMENTS: 'ATTACHMENTS'
} as const;
export type InboxReplierDtoFieldEnum = typeof InboxReplierDtoFieldEnum[keyof typeof InboxReplierDtoFieldEnum];


/**
 * Check if a given object implements the InboxReplierDto interface.
 */
export function instanceOfInboxReplierDto(value: object): value is InboxReplierDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('field' in value) || value['field'] === undefined) return false;
    if (!('match' in value) || value['match'] === undefined) return false;
    if (!('isHTML' in value) || value['isHTML'] === undefined) return false;
    if (!('ignoreReplyTo' in value) || value['ignoreReplyTo'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function InboxReplierDtoFromJSON(json: any): InboxReplierDto {
    return InboxReplierDtoFromJSONTyped(json, false);
}

export function InboxReplierDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): InboxReplierDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'inboxId': json['inboxId'] == null ? undefined : json['inboxId'],
        'name': json['name'] == null ? undefined : json['name'],
        'field': json['field'],
        'match': json['match'],
        'replyTo': json['replyTo'] == null ? undefined : json['replyTo'],
        'subject': json['subject'] == null ? undefined : json['subject'],
        'from': json['from'] == null ? undefined : json['from'],
        'charset': json['charset'] == null ? undefined : json['charset'],
        'isHTML': json['isHTML'],
        'templateId': json['templateId'] == null ? undefined : json['templateId'],
        'templateVariables': json['templateVariables'] == null ? undefined : json['templateVariables'],
        'ignoreReplyTo': json['ignoreReplyTo'],
        'createdAt': (new Date(json['createdAt'])),
    };
}

export function InboxReplierDtoToJSON(json: any): InboxReplierDto {
    return InboxReplierDtoToJSONTyped(json, false);
}

export function InboxReplierDtoToJSONTyped(value?: InboxReplierDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'inboxId': value['inboxId'],
        'name': value['name'],
        'field': value['field'],
        'match': value['match'],
        'replyTo': value['replyTo'],
        'subject': value['subject'],
        'from': value['from'],
        'charset': value['charset'],
        'isHTML': value['isHTML'],
        'templateId': value['templateId'],
        'templateVariables': value['templateVariables'],
        'ignoreReplyTo': value['ignoreReplyTo'],
        'createdAt': ((value['createdAt']).toISOString()),
    };
}

