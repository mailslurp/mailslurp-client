/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface AITransformMappingProjection
 */
export interface AITransformMappingProjection {
  /**
   *
   * @type {string}
   * @memberof AITransformMappingProjection
   */
  userId: string;
  /**
   *
   * @type {string}
   * @memberof AITransformMappingProjection
   */
  aiTransformId: string;
  /**
   *
   * @type {string}
   * @memberof AITransformMappingProjection
   */
  entityId: string;
  /**
   *
   * @type {string}
   * @memberof AITransformMappingProjection
   */
  entityType: AITransformMappingProjectionEntityTypeEnum;
  /**
   *
   * @type {string}
   * @memberof AITransformMappingProjection
   */
  contentSelector?: AITransformMappingProjectionContentSelectorEnum;
  /**
   *
   * @type {string}
   * @memberof AITransformMappingProjection
   */
  triggerSelector?: AITransformMappingProjectionTriggerSelectorEnum;
  /**
   *
   * @type {string}
   * @memberof AITransformMappingProjection
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof AITransformMappingProjection
   */
  id: string;
}

/**
 * @export
 * @enum {string}
 */
export enum AITransformMappingProjectionEntityTypeEnum {
  INBOX = 'INBOX',
  PHONE = 'PHONE',
}
/**
 * @export
 * @enum {string}
 */
export enum AITransformMappingProjectionContentSelectorEnum {
  RAW = 'RAW',
  BODY = 'BODY',
  BODY_ATTACHMENTS = 'BODY_ATTACHMENTS',
}
/**
 * @export
 * @enum {string}
 */
export enum AITransformMappingProjectionTriggerSelectorEnum {
  MESSAGE = 'PER_MESSAGE',
  ATTACHMENT = 'PER_ATTACHMENT',
}

export function AITransformMappingProjectionFromJSON(
  json: any
): AITransformMappingProjection {
  return AITransformMappingProjectionFromJSONTyped(json, false);
}

export function AITransformMappingProjectionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): AITransformMappingProjection {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    userId: json['userId'],
    aiTransformId: json['aiTransformId'],
    entityId: json['entityId'],
    entityType: json['entityType'],
    contentSelector: !exists(json, 'contentSelector')
      ? undefined
      : json['contentSelector'],
    triggerSelector: !exists(json, 'triggerSelector')
      ? undefined
      : json['triggerSelector'],
    name: !exists(json, 'name') ? undefined : json['name'],
    id: json['id'],
  };
}

export function AITransformMappingProjectionToJSON(
  value?: AITransformMappingProjection | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    userId: value.userId,
    aiTransformId: value.aiTransformId,
    entityId: value.entityId,
    entityType: value.entityType,
    contentSelector: value.contentSelector,
    triggerSelector: value.triggerSelector,
    name: value.name,
    id: value.id,
  };
}
