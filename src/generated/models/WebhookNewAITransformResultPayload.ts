/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * NEW_AI_TRANSFORM_RESULT webhook payload. Sent to your webhook url endpoint via HTTP POST when a structured data result is generated by the AI Transformer that your webhook is attached to. Use the AI Transform Result ID to fetch the full details.
 * @export
 * @interface WebhookNewAITransformResultPayload
 */
export interface WebhookNewAITransformResultPayload {
  /**
   * Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
   * @type {string}
   * @memberof WebhookNewAITransformResultPayload
   */
  messageId: string;
  /**
   * ID of webhook entity being triggered
   * @type {string}
   * @memberof WebhookNewAITransformResultPayload
   */
  webhookId: string;
  /**
   * Name of the event type webhook is being triggered for.
   * @type {string}
   * @memberof WebhookNewAITransformResultPayload
   */
  eventName: WebhookNewAITransformResultPayloadEventNameEnum;
  /**
   * Name of the webhook being triggered
   * @type {string}
   * @memberof WebhookNewAITransformResultPayload
   */
  webhookName?: string | null;
  /**
   * AI Transform ID of event
   * @type {string}
   * @memberof WebhookNewAITransformResultPayload
   */
  aiTransformResultId: string;
  /**
   * User ID of event
   * @type {string}
   * @memberof WebhookNewAITransformResultPayload
   */
  userId: string;
  /**
   * ID of AI Transform
   * @type {string}
   * @memberof WebhookNewAITransformResultPayload
   */
  aiTransformId: string;
  /**
   * ID of AI Transform mapping
   * @type {string}
   * @memberof WebhookNewAITransformResultPayload
   */
  aiTransformMappingId?: string | null;
  /**
   * ID of entity that triggered the transformation
   * @type {string}
   * @memberof WebhookNewAITransformResultPayload
   */
  entityId?: string | null;
  /**
   * Entity type that triggered the transformation
   * @type {string}
   * @memberof WebhookNewAITransformResultPayload
   */
  entityType?: WebhookNewAITransformResultPayloadEntityTypeEnum;
  /**
   * JSON string result of the AI transformation
   * @type {string}
   * @memberof WebhookNewAITransformResultPayload
   */
  result?: string | null;
}

/**
 * @export
 * @enum {string}
 */
export enum WebhookNewAITransformResultPayloadEventNameEnum {
  EMAIL_RECEIVED = 'EMAIL_RECEIVED',
  NEW_AI_TRANSFORM_RESULT = 'NEW_AI_TRANSFORM_RESULT',
  NEW_EMAIL = 'NEW_EMAIL',
  NEW_CONTACT = 'NEW_CONTACT',
  NEW_ATTACHMENT = 'NEW_ATTACHMENT',
  EMAIL_OPENED = 'EMAIL_OPENED',
  EMAIL_READ = 'EMAIL_READ',
  DELIVERY_STATUS = 'DELIVERY_STATUS',
  BOUNCE = 'BOUNCE',
  BOUNCE_RECIPIENT = 'BOUNCE_RECIPIENT',
  NEW_SMS = 'NEW_SMS',
  NEW_GUEST_USER = 'NEW_GUEST_USER',
}
/**
 * @export
 * @enum {string}
 */
export enum WebhookNewAITransformResultPayloadEntityTypeEnum {
  INBOX = 'INBOX',
  PHONE = 'PHONE',
}

export function WebhookNewAITransformResultPayloadFromJSON(
  json: any
): WebhookNewAITransformResultPayload {
  return WebhookNewAITransformResultPayloadFromJSONTyped(json, false);
}

export function WebhookNewAITransformResultPayloadFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): WebhookNewAITransformResultPayload {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    messageId: json['messageId'],
    webhookId: json['webhookId'],
    eventName: json['eventName'],
    webhookName: !exists(json, 'webhookName') ? undefined : json['webhookName'],
    aiTransformResultId: json['aiTransformResultId'],
    userId: json['userId'],
    aiTransformId: json['aiTransformId'],
    aiTransformMappingId: !exists(json, 'aiTransformMappingId')
      ? undefined
      : json['aiTransformMappingId'],
    entityId: !exists(json, 'entityId') ? undefined : json['entityId'],
    entityType: !exists(json, 'entityType') ? undefined : json['entityType'],
    result: !exists(json, 'result') ? undefined : json['result'],
  };
}

export function WebhookNewAITransformResultPayloadToJSON(
  value?: WebhookNewAITransformResultPayload | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    messageId: value.messageId,
    webhookId: value.webhookId,
    eventName: value.eventName,
    webhookName: value.webhookName,
    aiTransformResultId: value.aiTransformResultId,
    userId: value.userId,
    aiTransformId: value.aiTransformId,
    aiTransformMappingId: value.aiTransformMappingId,
    entityId: value.entityId,
    entityType: value.entityType,
    result: value.result,
  };
}
