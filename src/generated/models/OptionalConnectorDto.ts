/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ConnectorDto } from './ConnectorDto';
import {
    ConnectorDtoFromJSON,
    ConnectorDtoFromJSONTyped,
    ConnectorDtoToJSON,
    ConnectorDtoToJSONTyped,
} from './ConnectorDto';

/**
 * 
 * @export
 * @interface OptionalConnectorDto
 */
export interface OptionalConnectorDto {
    /**
     * 
     * @type {boolean}
     * @memberof OptionalConnectorDto
     */
    present: boolean;
    /**
     * 
     * @type {ConnectorDto}
     * @memberof OptionalConnectorDto
     */
    result?: ConnectorDto;
}

/**
 * Check if a given object implements the OptionalConnectorDto interface.
 */
export function instanceOfOptionalConnectorDto(value: object): value is OptionalConnectorDto {
    if (!('present' in value) || value['present'] === undefined) return false;
    return true;
}

export function OptionalConnectorDtoFromJSON(json: any): OptionalConnectorDto {
    return OptionalConnectorDtoFromJSONTyped(json, false);
}

export function OptionalConnectorDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): OptionalConnectorDto {
    if (json == null) {
        return json;
    }
    return {
        
        'present': json['present'],
        'result': json['result'] == null ? undefined : ConnectorDtoFromJSON(json['result']),
    };
}

export function OptionalConnectorDtoToJSON(json: any): OptionalConnectorDto {
    return OptionalConnectorDtoToJSONTyped(json, false);
}

export function OptionalConnectorDtoToJSONTyped(value?: OptionalConnectorDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'present': value['present'],
        'result': ConnectorDtoToJSON(value['result']),
    };
}

