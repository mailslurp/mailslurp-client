/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  GuestPortalUserProjection,
  GuestPortalUserProjectionFromJSON,
  GuestPortalUserProjectionFromJSONTyped,
  GuestPortalUserProjectionToJSON,
  PageableObject,
  PageableObjectFromJSON,
  PageableObjectFromJSONTyped,
  PageableObjectToJSON,
  SortObject,
  SortObjectFromJSON,
  SortObjectFromJSONTyped,
  SortObjectToJSON,
} from './';

/**
 * Paginated guest portal users
 * @export
 * @interface PageGuestPortalUsers
 */
export interface PageGuestPortalUsers {
  /**
   *
   * @type {Array<GuestPortalUserProjection>}
   * @memberof PageGuestPortalUsers
   */
  content?: Array<GuestPortalUserProjection>;
  /**
   *
   * @type {PageableObject}
   * @memberof PageGuestPortalUsers
   */
  pageable?: PageableObject;
  /**
   *
   * @type {number}
   * @memberof PageGuestPortalUsers
   */
  totalElements: number;
  /**
   *
   * @type {number}
   * @memberof PageGuestPortalUsers
   */
  totalPages: number;
  /**
   *
   * @type {boolean}
   * @memberof PageGuestPortalUsers
   */
  last?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PageGuestPortalUsers
   */
  first?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageGuestPortalUsers
   */
  numberOfElements?: number;
  /**
   *
   * @type {number}
   * @memberof PageGuestPortalUsers
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof PageGuestPortalUsers
   */
  number?: number;
  /**
   *
   * @type {SortObject}
   * @memberof PageGuestPortalUsers
   */
  sort?: SortObject;
  /**
   *
   * @type {boolean}
   * @memberof PageGuestPortalUsers
   */
  empty?: boolean;
}

export function PageGuestPortalUsersFromJSON(json: any): PageGuestPortalUsers {
  return PageGuestPortalUsersFromJSONTyped(json, false);
}

export function PageGuestPortalUsersFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): PageGuestPortalUsers {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    content: !exists(json, 'content')
      ? undefined
      : (json['content'] as Array<any>).map(GuestPortalUserProjectionFromJSON),
    pageable: !exists(json, 'pageable')
      ? undefined
      : PageableObjectFromJSON(json['pageable']),
    totalElements: json['totalElements'],
    totalPages: json['totalPages'],
    last: !exists(json, 'last') ? undefined : json['last'],
    first: !exists(json, 'first') ? undefined : json['first'],
    numberOfElements: !exists(json, 'numberOfElements')
      ? undefined
      : json['numberOfElements'],
    size: !exists(json, 'size') ? undefined : json['size'],
    number: !exists(json, 'number') ? undefined : json['number'],
    sort: !exists(json, 'sort') ? undefined : SortObjectFromJSON(json['sort']),
    empty: !exists(json, 'empty') ? undefined : json['empty'],
  };
}

export function PageGuestPortalUsersToJSON(
  value?: PageGuestPortalUsers | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    content:
      value.content === undefined
        ? undefined
        : (value.content as Array<any>).map(GuestPortalUserProjectionToJSON),
    pageable: PageableObjectToJSON(value.pageable),
    totalElements: value.totalElements,
    totalPages: value.totalPages,
    last: value.last,
    first: value.first,
    numberOfElements: value.numberOfElements,
    size: value.size,
    number: value.number,
    sort: SortObjectToJSON(value.sort),
    empty: value.empty,
  };
}
