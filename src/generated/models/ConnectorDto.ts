/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface ConnectorDto
 */
export interface ConnectorDto {
  /**
   *
   * @type {string}
   * @memberof ConnectorDto
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof ConnectorDto
   */
  userId: string;
  /**
   *
   * @type {string}
   * @memberof ConnectorDto
   */
  connectorType: ConnectorDtoConnectorTypeEnum;
  /**
   *
   * @type {string}
   * @memberof ConnectorDto
   */
  connectorAuthType: ConnectorDtoConnectorAuthTypeEnum;
  /**
   *
   * @type {boolean}
   * @memberof ConnectorDto
   */
  syncEnabled: boolean;
  /**
   *
   * @type {string}
   * @memberof ConnectorDto
   */
  syncScheduleType: ConnectorDtoSyncScheduleTypeEnum;
  /**
   *
   * @type {number}
   * @memberof ConnectorDto
   */
  syncInterval?: number;
  /**
   *
   * @type {string}
   * @memberof ConnectorDto
   */
  imapHost?: string;
  /**
   *
   * @type {number}
   * @memberof ConnectorDto
   */
  imapPort?: number;
  /**
   *
   * @type {string}
   * @memberof ConnectorDto
   */
  imapUsername?: string;
  /**
   *
   * @type {string}
   * @memberof ConnectorDto
   */
  imapPassword?: string;
  /**
   *
   * @type {boolean}
   * @memberof ConnectorDto
   */
  imapSsl?: boolean;
  /**
   *
   * @type {Date}
   * @memberof ConnectorDto
   */
  createdAt: Date;
}

/**
 * @export
 * @enum {string}
 */
export enum ConnectorDtoConnectorTypeEnum {
  IMAP = 'IMAP',
}
/**
 * @export
 * @enum {string}
 */
export enum ConnectorDtoConnectorAuthTypeEnum {
  PLAIN_TEXT = 'PLAIN_TEXT',
}
/**
 * @export
 * @enum {string}
 */
export enum ConnectorDtoSyncScheduleTypeEnum {
  INTERVAL = 'INTERVAL',
}

export function ConnectorDtoFromJSON(json: any): ConnectorDto {
  return ConnectorDtoFromJSONTyped(json, false);
}

export function ConnectorDtoFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ConnectorDto {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    userId: json['userId'],
    connectorType: json['connectorType'],
    connectorAuthType: json['connectorAuthType'],
    syncEnabled: json['syncEnabled'],
    syncScheduleType: json['syncScheduleType'],
    syncInterval: !exists(json, 'syncInterval')
      ? undefined
      : json['syncInterval'],
    imapHost: !exists(json, 'imapHost') ? undefined : json['imapHost'],
    imapPort: !exists(json, 'imapPort') ? undefined : json['imapPort'],
    imapUsername: !exists(json, 'imapUsername')
      ? undefined
      : json['imapUsername'],
    imapPassword: !exists(json, 'imapPassword')
      ? undefined
      : json['imapPassword'],
    imapSsl: !exists(json, 'imapSsl') ? undefined : json['imapSsl'],
    createdAt: new Date(json['createdAt']),
  };
}

export function ConnectorDtoToJSON(value?: ConnectorDto | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    userId: value.userId,
    connectorType: value.connectorType,
    connectorAuthType: value.connectorAuthType,
    syncEnabled: value.syncEnabled,
    syncScheduleType: value.syncScheduleType,
    syncInterval: value.syncInterval,
    imapHost: value.imapHost,
    imapPort: value.imapPort,
    imapUsername: value.imapUsername,
    imapPassword: value.imapPassword,
    imapSsl: value.imapSsl,
    createdAt: value.createdAt.toISOString(),
  };
}
