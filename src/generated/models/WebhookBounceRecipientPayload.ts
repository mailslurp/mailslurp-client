/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * BOUNCE_RECIPIENT webhook payload. Sent to your webhook url endpoint via HTTP POST when an email caused a bounce to occur for a recipient. Save the recipient to a ban list of your server and avoid email them again.
 * @export
 * @interface WebhookBounceRecipientPayload
 */
export interface WebhookBounceRecipientPayload {
  /**
   * Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
   * @type {string}
   * @memberof WebhookBounceRecipientPayload
   */
  messageId: string;
  /**
   * ID of webhook entity being triggered
   * @type {string}
   * @memberof WebhookBounceRecipientPayload
   */
  webhookId: string;
  /**
   * Name of the event type webhook is being triggered for.
   * @type {string}
   * @memberof WebhookBounceRecipientPayload
   */
  eventName: WebhookBounceRecipientPayloadEventNameEnum;
  /**
   * Name of the webhook being triggered
   * @type {string}
   * @memberof WebhookBounceRecipientPayload
   */
  webhookName?: string | null;
  /**
   * Email address that caused a bounce. Make note of the address and try not to message it again to preserve your reputation.
   * @type {string}
   * @memberof WebhookBounceRecipientPayload
   */
  recipient: string;
}

/**
 * @export
 * @enum {string}
 */
export enum WebhookBounceRecipientPayloadEventNameEnum {
  EMAIL_RECEIVED = 'EMAIL_RECEIVED',
  NEW_EMAIL = 'NEW_EMAIL',
  NEW_CONTACT = 'NEW_CONTACT',
  NEW_ATTACHMENT = 'NEW_ATTACHMENT',
  EMAIL_OPENED = 'EMAIL_OPENED',
  EMAIL_READ = 'EMAIL_READ',
  DELIVERY_STATUS = 'DELIVERY_STATUS',
  BOUNCE = 'BOUNCE',
  BOUNCE_RECIPIENT = 'BOUNCE_RECIPIENT',
  NEW_SMS = 'NEW_SMS',
}

export function WebhookBounceRecipientPayloadFromJSON(
  json: any
): WebhookBounceRecipientPayload {
  return WebhookBounceRecipientPayloadFromJSONTyped(json, false);
}

export function WebhookBounceRecipientPayloadFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): WebhookBounceRecipientPayload {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    messageId: json['messageId'],
    webhookId: json['webhookId'],
    eventName: json['eventName'],
    webhookName: !exists(json, 'webhookName') ? undefined : json['webhookName'],
    recipient: json['recipient'],
  };
}

export function WebhookBounceRecipientPayloadToJSON(
  value?: WebhookBounceRecipientPayload | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    messageId: value.messageId,
    webhookId: value.webhookId,
    eventName: value.eventName,
    webhookName: value.webhookName,
    recipient: value.recipient,
  };
}
