/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DomainInformation } from './DomainInformation';
import {
    DomainInformationFromJSON,
    DomainInformationFromJSONTyped,
    DomainInformationToJSON,
    DomainInformationToJSONTyped,
} from './DomainInformation';

/**
 * 
 * @export
 * @interface DomainGroup
 */
export interface DomainGroup {
    /**
     * 
     * @type {string}
     * @memberof DomainGroup
     */
    label: DomainGroupLabelEnum;
    /**
     * 
     * @type {Array<DomainInformation>}
     * @memberof DomainGroup
     */
    domains: Array<DomainInformation>;
}


/**
 * @export
 */
export const DomainGroupLabelEnum = {
    DEFAULT: 'DEFAULT',
    DOMAIN_POOL: 'DOMAIN_POOL',
    CUSTOM: 'CUSTOM'
} as const;
export type DomainGroupLabelEnum = typeof DomainGroupLabelEnum[keyof typeof DomainGroupLabelEnum];


/**
 * Check if a given object implements the DomainGroup interface.
 */
export function instanceOfDomainGroup(value: object): value is DomainGroup {
    if (!('label' in value) || value['label'] === undefined) return false;
    if (!('domains' in value) || value['domains'] === undefined) return false;
    return true;
}

export function DomainGroupFromJSON(json: any): DomainGroup {
    return DomainGroupFromJSONTyped(json, false);
}

export function DomainGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): DomainGroup {
    if (json == null) {
        return json;
    }
    return {
        
        'label': json['label'],
        'domains': ((json['domains'] as Array<any>).map(DomainInformationFromJSON)),
    };
}

export function DomainGroupToJSON(json: any): DomainGroup {
    return DomainGroupToJSONTyped(json, false);
}

export function DomainGroupToJSONTyped(value?: DomainGroup | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'label': value['label'],
        'domains': ((value['domains'] as Array<any>).map(DomainInformationToJSON)),
    };
}

