/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Sender } from './Sender';
import {
    SenderFromJSON,
    SenderFromJSONTyped,
    SenderToJSON,
    SenderToJSONTyped,
} from './Sender';
import type { EmailRecipients } from './EmailRecipients';
import {
    EmailRecipientsFromJSON,
    EmailRecipientsFromJSONTyped,
    EmailRecipientsToJSON,
    EmailRecipientsToJSONTyped,
} from './EmailRecipients';

/**
 * 
 * @export
 * @interface FakeEmailPreview
 */
export interface FakeEmailPreview {
    /**
     * 
     * @type {string}
     * @memberof FakeEmailPreview
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof FakeEmailPreview
     */
    emailAddress: string;
    /**
     * 
     * @type {Sender}
     * @memberof FakeEmailPreview
     */
    sender?: Sender | null;
    /**
     * 
     * @type {EmailRecipients}
     * @memberof FakeEmailPreview
     */
    recipients?: EmailRecipients | null;
    /**
     * 
     * @type {boolean}
     * @memberof FakeEmailPreview
     */
    hasAttachments: boolean;
    /**
     * 
     * @type {string}
     * @memberof FakeEmailPreview
     */
    subject?: string;
    /**
     * 
     * @type {string}
     * @memberof FakeEmailPreview
     */
    preview?: string;
    /**
     * 
     * @type {Date}
     * @memberof FakeEmailPreview
     */
    createdAt: Date;
    /**
     * 
     * @type {boolean}
     * @memberof FakeEmailPreview
     */
    seen: boolean;
}

/**
 * Check if a given object implements the FakeEmailPreview interface.
 */
export function instanceOfFakeEmailPreview(value: object): value is FakeEmailPreview {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('emailAddress' in value) || value['emailAddress'] === undefined) return false;
    if (!('hasAttachments' in value) || value['hasAttachments'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('seen' in value) || value['seen'] === undefined) return false;
    return true;
}

export function FakeEmailPreviewFromJSON(json: any): FakeEmailPreview {
    return FakeEmailPreviewFromJSONTyped(json, false);
}

export function FakeEmailPreviewFromJSONTyped(json: any, ignoreDiscriminator: boolean): FakeEmailPreview {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'emailAddress': json['emailAddress'],
        'sender': json['sender'] == null ? undefined : SenderFromJSON(json['sender']),
        'recipients': json['recipients'] == null ? undefined : EmailRecipientsFromJSON(json['recipients']),
        'hasAttachments': json['hasAttachments'],
        'subject': json['subject'] == null ? undefined : json['subject'],
        'preview': json['preview'] == null ? undefined : json['preview'],
        'createdAt': (new Date(json['createdAt'])),
        'seen': json['seen'],
    };
}

export function FakeEmailPreviewToJSON(json: any): FakeEmailPreview {
    return FakeEmailPreviewToJSONTyped(json, false);
}

export function FakeEmailPreviewToJSONTyped(value?: FakeEmailPreview | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'emailAddress': value['emailAddress'],
        'sender': SenderToJSON(value['sender']),
        'recipients': EmailRecipientsToJSON(value['recipients']),
        'hasAttachments': value['hasAttachments'],
        'subject': value['subject'],
        'preview': value['preview'],
        'createdAt': ((value['createdAt']).toISOString()),
        'seen': value['seen'],
    };
}

