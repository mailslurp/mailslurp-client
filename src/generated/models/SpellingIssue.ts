/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SpellingIssue
 */
export interface SpellingIssue {
    /**
     * 
     * @type {string}
     * @memberof SpellingIssue
     */
    group: string;
    /**
     * 
     * @type {string}
     * @memberof SpellingIssue
     */
    suggestion: string;
    /**
     * 
     * @type {string}
     * @memberof SpellingIssue
     */
    severity: SpellingIssueSeverityEnum;
    /**
     * 
     * @type {string}
     * @memberof SpellingIssue
     */
    message: string;
}


/**
 * @export
 */
export const SpellingIssueSeverityEnum = {
    Warning: 'Warning',
    Error: 'Error'
} as const;
export type SpellingIssueSeverityEnum = typeof SpellingIssueSeverityEnum[keyof typeof SpellingIssueSeverityEnum];


/**
 * Check if a given object implements the SpellingIssue interface.
 */
export function instanceOfSpellingIssue(value: object): value is SpellingIssue {
    if (!('group' in value) || value['group'] === undefined) return false;
    if (!('suggestion' in value) || value['suggestion'] === undefined) return false;
    if (!('severity' in value) || value['severity'] === undefined) return false;
    if (!('message' in value) || value['message'] === undefined) return false;
    return true;
}

export function SpellingIssueFromJSON(json: any): SpellingIssue {
    return SpellingIssueFromJSONTyped(json, false);
}

export function SpellingIssueFromJSONTyped(json: any, ignoreDiscriminator: boolean): SpellingIssue {
    if (json == null) {
        return json;
    }
    return {
        
        'group': json['group'],
        'suggestion': json['suggestion'],
        'severity': json['severity'],
        'message': json['message'],
    };
}

export function SpellingIssueToJSON(json: any): SpellingIssue {
    return SpellingIssueToJSONTyped(json, false);
}

export function SpellingIssueToJSONTyped(value?: SpellingIssue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'group': value['group'],
        'suggestion': value['suggestion'],
        'severity': value['severity'],
        'message': value['message'],
    };
}

