/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  AITransformResultProjection,
  AITransformResultProjectionFromJSON,
  AITransformResultProjectionFromJSONTyped,
  AITransformResultProjectionToJSON,
  PageableObject,
  PageableObjectFromJSON,
  PageableObjectFromJSONTyped,
  PageableObjectToJSON,
  SortObject,
  SortObjectFromJSON,
  SortObjectFromJSONTyped,
  SortObjectToJSON,
} from './';

/**
 * Paginated AI Transform result entities. Page index starts at zero. Projection results may omit larger entity fields. For fetching a full entity use the projection ID with individual method calls.
 * @export
 * @interface PageAITransformResultProjection
 */
export interface PageAITransformResultProjection {
  /**
   *
   * @type {Array<AITransformResultProjection>}
   * @memberof PageAITransformResultProjection
   */
  content?: Array<AITransformResultProjection>;
  /**
   *
   * @type {PageableObject}
   * @memberof PageAITransformResultProjection
   */
  pageable?: PageableObject;
  /**
   *
   * @type {number}
   * @memberof PageAITransformResultProjection
   */
  totalElements: number;
  /**
   *
   * @type {number}
   * @memberof PageAITransformResultProjection
   */
  totalPages: number;
  /**
   *
   * @type {boolean}
   * @memberof PageAITransformResultProjection
   */
  last?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageAITransformResultProjection
   */
  numberOfElements?: number;
  /**
   *
   * @type {boolean}
   * @memberof PageAITransformResultProjection
   */
  first?: boolean;
  /**
   *
   * @type {number}
   * @memberof PageAITransformResultProjection
   */
  size?: number;
  /**
   *
   * @type {number}
   * @memberof PageAITransformResultProjection
   */
  number?: number;
  /**
   *
   * @type {SortObject}
   * @memberof PageAITransformResultProjection
   */
  sort?: SortObject;
  /**
   *
   * @type {boolean}
   * @memberof PageAITransformResultProjection
   */
  empty?: boolean;
}

export function PageAITransformResultProjectionFromJSON(
  json: any
): PageAITransformResultProjection {
  return PageAITransformResultProjectionFromJSONTyped(json, false);
}

export function PageAITransformResultProjectionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): PageAITransformResultProjection {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    content: !exists(json, 'content')
      ? undefined
      : (json['content'] as Array<any>).map(
          AITransformResultProjectionFromJSON
        ),
    pageable: !exists(json, 'pageable')
      ? undefined
      : PageableObjectFromJSON(json['pageable']),
    totalElements: json['totalElements'],
    totalPages: json['totalPages'],
    last: !exists(json, 'last') ? undefined : json['last'],
    numberOfElements: !exists(json, 'numberOfElements')
      ? undefined
      : json['numberOfElements'],
    first: !exists(json, 'first') ? undefined : json['first'],
    size: !exists(json, 'size') ? undefined : json['size'],
    number: !exists(json, 'number') ? undefined : json['number'],
    sort: !exists(json, 'sort') ? undefined : SortObjectFromJSON(json['sort']),
    empty: !exists(json, 'empty') ? undefined : json['empty'],
  };
}

export function PageAITransformResultProjectionToJSON(
  value?: PageAITransformResultProjection | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    content:
      value.content === undefined
        ? undefined
        : (value.content as Array<any>).map(AITransformResultProjectionToJSON),
    pageable: PageableObjectToJSON(value.pageable),
    totalElements: value.totalElements,
    totalPages: value.totalPages,
    last: value.last,
    numberOfElements: value.numberOfElements,
    first: value.first,
    size: value.size,
    number: value.number,
    sort: SortObjectToJSON(value.sort),
    empty: value.empty,
  };
}
