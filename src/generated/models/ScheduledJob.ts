/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ScheduledJob
 */
export interface ScheduledJob {
    /**
     * 
     * @type {string}
     * @memberof ScheduledJob
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledJob
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledJob
     */
    inboxId: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledJob
     */
    jobId: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledJob
     */
    groupId: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledJob
     */
    triggerId: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduledJob
     */
    status: ScheduledJobStatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof ScheduledJob
     */
    sendAtTimestamp: Date;
    /**
     * 
     * @type {Date}
     * @memberof ScheduledJob
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ScheduledJob
     */
    updatedAt: Date;
}


/**
 * @export
 */
export const ScheduledJobStatusEnum = {
    SUBMITTED: 'SUBMITTED',
    COMPLETED: 'COMPLETED',
    ABORTED: 'ABORTED',
    FAILED: 'FAILED',
    CANCELLED: 'CANCELLED'
} as const;
export type ScheduledJobStatusEnum = typeof ScheduledJobStatusEnum[keyof typeof ScheduledJobStatusEnum];


/**
 * Check if a given object implements the ScheduledJob interface.
 */
export function instanceOfScheduledJob(value: object): value is ScheduledJob {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('inboxId' in value) || value['inboxId'] === undefined) return false;
    if (!('jobId' in value) || value['jobId'] === undefined) return false;
    if (!('groupId' in value) || value['groupId'] === undefined) return false;
    if (!('triggerId' in value) || value['triggerId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('sendAtTimestamp' in value) || value['sendAtTimestamp'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function ScheduledJobFromJSON(json: any): ScheduledJob {
    return ScheduledJobFromJSONTyped(json, false);
}

export function ScheduledJobFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScheduledJob {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userId': json['userId'],
        'inboxId': json['inboxId'],
        'jobId': json['jobId'],
        'groupId': json['groupId'],
        'triggerId': json['triggerId'],
        'status': json['status'],
        'sendAtTimestamp': (new Date(json['sendAtTimestamp'])),
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function ScheduledJobToJSON(json: any): ScheduledJob {
    return ScheduledJobToJSONTyped(json, false);
}

export function ScheduledJobToJSONTyped(value?: ScheduledJob | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'userId': value['userId'],
        'inboxId': value['inboxId'],
        'jobId': value['jobId'],
        'groupId': value['groupId'],
        'triggerId': value['triggerId'],
        'status': value['status'],
        'sendAtTimestamp': ((value['sendAtTimestamp']).toISOString()),
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
    };
}

