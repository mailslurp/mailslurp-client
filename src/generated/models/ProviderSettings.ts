/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ProviderSettings
 */
export interface ProviderSettings {
    /**
     * 
     * @type {string}
     * @memberof ProviderSettings
     */
    mailProvider: ProviderSettingsMailProviderEnum;
    /**
     * 
     * @type {string}
     * @memberof ProviderSettings
     */
    imapHost: string;
    /**
     * 
     * @type {number}
     * @memberof ProviderSettings
     */
    imapPort: number;
    /**
     * 
     * @type {boolean}
     * @memberof ProviderSettings
     */
    imapSsl: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProviderSettings
     */
    imapStartTls?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProviderSettings
     */
    smtpHost: string;
    /**
     * 
     * @type {number}
     * @memberof ProviderSettings
     */
    smtpPort: number;
    /**
     * 
     * @type {boolean}
     * @memberof ProviderSettings
     */
    smtpSsl: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProviderSettings
     */
    smtpStartTls?: boolean;
}


/**
 * @export
 */
export const ProviderSettingsMailProviderEnum = {
    GOOGLE: 'GOOGLE',
    MICROSOFT: 'MICROSOFT'
} as const;
export type ProviderSettingsMailProviderEnum = typeof ProviderSettingsMailProviderEnum[keyof typeof ProviderSettingsMailProviderEnum];


/**
 * Check if a given object implements the ProviderSettings interface.
 */
export function instanceOfProviderSettings(value: object): value is ProviderSettings {
    if (!('mailProvider' in value) || value['mailProvider'] === undefined) return false;
    if (!('imapHost' in value) || value['imapHost'] === undefined) return false;
    if (!('imapPort' in value) || value['imapPort'] === undefined) return false;
    if (!('imapSsl' in value) || value['imapSsl'] === undefined) return false;
    if (!('smtpHost' in value) || value['smtpHost'] === undefined) return false;
    if (!('smtpPort' in value) || value['smtpPort'] === undefined) return false;
    if (!('smtpSsl' in value) || value['smtpSsl'] === undefined) return false;
    return true;
}

export function ProviderSettingsFromJSON(json: any): ProviderSettings {
    return ProviderSettingsFromJSONTyped(json, false);
}

export function ProviderSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProviderSettings {
    if (json == null) {
        return json;
    }
    return {
        
        'mailProvider': json['mailProvider'],
        'imapHost': json['imapHost'],
        'imapPort': json['imapPort'],
        'imapSsl': json['imapSsl'],
        'imapStartTls': json['imapStartTls'] == null ? undefined : json['imapStartTls'],
        'smtpHost': json['smtpHost'],
        'smtpPort': json['smtpPort'],
        'smtpSsl': json['smtpSsl'],
        'smtpStartTls': json['smtpStartTls'] == null ? undefined : json['smtpStartTls'],
    };
}

export function ProviderSettingsToJSON(json: any): ProviderSettings {
    return ProviderSettingsToJSONTyped(json, false);
}

export function ProviderSettingsToJSONTyped(value?: ProviderSettings | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'mailProvider': value['mailProvider'],
        'imapHost': value['imapHost'],
        'imapPort': value['imapPort'],
        'imapSsl': value['imapSsl'],
        'imapStartTls': value['imapStartTls'],
        'smtpHost': value['smtpHost'],
        'smtpPort': value['smtpPort'],
        'smtpSsl': value['smtpSsl'],
        'smtpStartTls': value['smtpStartTls'],
    };
}

