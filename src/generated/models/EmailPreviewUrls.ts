/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * URLs for email body
 * @export
 * @interface EmailPreviewUrls
 */
export interface EmailPreviewUrls {
    /**
     * 
     * @type {string}
     * @memberof EmailPreviewUrls
     */
    rawSmtpMessageUrl: string;
    /**
     * 
     * @type {string}
     * @memberof EmailPreviewUrls
     */
    plainHtmlBodyUrl: string;
    /**
     * 
     * @type {string}
     * @memberof EmailPreviewUrls
     */
    origin: string;
}

/**
 * Check if a given object implements the EmailPreviewUrls interface.
 */
export function instanceOfEmailPreviewUrls(value: object): value is EmailPreviewUrls {
    if (!('rawSmtpMessageUrl' in value) || value['rawSmtpMessageUrl'] === undefined) return false;
    if (!('plainHtmlBodyUrl' in value) || value['plainHtmlBodyUrl'] === undefined) return false;
    if (!('origin' in value) || value['origin'] === undefined) return false;
    return true;
}

export function EmailPreviewUrlsFromJSON(json: any): EmailPreviewUrls {
    return EmailPreviewUrlsFromJSONTyped(json, false);
}

export function EmailPreviewUrlsFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmailPreviewUrls {
    if (json == null) {
        return json;
    }
    return {
        
        'rawSmtpMessageUrl': json['rawSmtpMessageUrl'],
        'plainHtmlBodyUrl': json['plainHtmlBodyUrl'],
        'origin': json['origin'],
    };
}

export function EmailPreviewUrlsToJSON(json: any): EmailPreviewUrls {
    return EmailPreviewUrlsToJSONTyped(json, false);
}

export function EmailPreviewUrlsToJSONTyped(value?: EmailPreviewUrls | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'rawSmtpMessageUrl': value['rawSmtpMessageUrl'],
        'plainHtmlBodyUrl': value['plainHtmlBodyUrl'],
        'origin': value['origin'],
    };
}

