/* tslint:disable */
/* eslint-disable */
/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It\'s designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Options for exporting user data
 * @export
 * @interface ExportOptions
 */
export interface ExportOptions {
    /**
     * 
     * @type {string}
     * @memberof ExportOptions
     */
    outputFormat: ExportOptionsOutputFormatEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ExportOptions
     */
    excludePreviouslyExported?: boolean | null;
    /**
     * 
     * @type {Date}
     * @memberof ExportOptions
     */
    createdEarliestTime?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof ExportOptions
     */
    createdOldestTime?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof ExportOptions
     */
    filter?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ExportOptions
     */
    listSeparatorToken?: string | null;
}


/**
 * @export
 */
export const ExportOptionsOutputFormatEnum = {
    DEFAULT: 'CSV_DEFAULT',
    EXCEL: 'CSV_EXCEL'
} as const;
export type ExportOptionsOutputFormatEnum = typeof ExportOptionsOutputFormatEnum[keyof typeof ExportOptionsOutputFormatEnum];


/**
 * Check if a given object implements the ExportOptions interface.
 */
export function instanceOfExportOptions(value: object): value is ExportOptions {
    if (!('outputFormat' in value) || value['outputFormat'] === undefined) return false;
    return true;
}

export function ExportOptionsFromJSON(json: any): ExportOptions {
    return ExportOptionsFromJSONTyped(json, false);
}

export function ExportOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportOptions {
    if (json == null) {
        return json;
    }
    return {
        
        'outputFormat': json['outputFormat'],
        'excludePreviouslyExported': json['excludePreviouslyExported'] == null ? undefined : json['excludePreviouslyExported'],
        'createdEarliestTime': json['createdEarliestTime'] == null ? undefined : (new Date(json['createdEarliestTime'])),
        'createdOldestTime': json['createdOldestTime'] == null ? undefined : (new Date(json['createdOldestTime'])),
        'filter': json['filter'] == null ? undefined : json['filter'],
        'listSeparatorToken': json['listSeparatorToken'] == null ? undefined : json['listSeparatorToken'],
    };
}

export function ExportOptionsToJSON(json: any): ExportOptions {
    return ExportOptionsToJSONTyped(json, false);
}

export function ExportOptionsToJSONTyped(value?: ExportOptions | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'outputFormat': value['outputFormat'],
        'excludePreviouslyExported': value['excludePreviouslyExported'],
        'createdEarliestTime': value['createdEarliestTime'] == null ? undefined : ((value['createdEarliestTime'] as any).toISOString()),
        'createdOldestTime': value['createdOldestTime'] == null ? undefined : ((value['createdOldestTime'] as any).toISOString()),
        'filter': value['filter'],
        'listSeparatorToken': value['listSeparatorToken'],
    };
}

